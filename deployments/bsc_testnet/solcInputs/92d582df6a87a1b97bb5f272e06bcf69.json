{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IBalleMaster.sol": {
      "content": "// contracts/interfaces/IBalleMaster.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBalleMaster {\n    // BALLE tokens created per block.\n    function ballePerBlock() external view returns (uint256);\n\n    // The block number when BALLE rewards distribution ends.\n    function endBlock() external view returns (uint256);\n\n    // BALLE to be minted for rewards (distributed but not minted).\n    function balleToMint() external view returns (uint256);\n}\n"
    },
    "contracts/staking/BalleRewardDistribution.sol": {
      "content": "// contracts/staking/BalleRewardDistribution.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../token/BALLEv2.sol\";\nimport \"../interfaces/IBalleMaster.sol\";\nimport \"../interfaces/IBalleRewardFund.sol\";\nimport \"../interfaces/IBalleStakingPool.sol\";\n\n/**\n * @dev Implementation of the BALLE Reward Distribution for the staking pool.\n * This contract will distribute the rewards from Reward Fund to the Rewarder of the Staking.\n * The owner of the contract is the Governance Gnosis Safe multisig.\n */\ncontract BalleRewardDistribution is Ownable {\n    using SafeERC20 for IERC20;\n\n    // BALLE token address.\n    BALLEv2 public immutable balle;\n    // The BalleMaster contract.\n    IBalleMaster public immutable balleMaster;\n\n    // The treasury contract.\n    address public treasury;\n    // The rewardFund contract.\n    address public rewardFund;\n    // The staking pool contract.\n    address public stakingPool;\n    // The staking pool rewarder contract.\n    address public rewarder;\n\n    // 10% fee on reward.\n    uint256 public constant REWARD_FEE = 1000;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant REWARD_FEE_MAX = 10000;\n\n    event BalleRewardDistributed(\n        address indexed pool,\n        uint256 baseAmount,\n        uint256 extraAmount,\n        uint256 feeAmount,\n        uint256 numberOfBlocks,\n        uint256 multiplier\n    );\n\n    constructor(\n        address _balle,\n        address _balleMaster,\n        address _treasury,\n        address _rewardFund\n    ) {\n        require(_balle != address(0), \"!balle\");\n        require(_balleMaster != address(0), \"!balleMaster\");\n        require(_treasury != address(0), \"!treasury\");\n        require(_rewardFund != address(0), \"!rewardFund\");\n\n        balle = BALLEv2(_balle);\n        balleMaster = IBalleMaster(_balleMaster);\n        treasury = _treasury;\n        rewardFund = _rewardFund;\n    }\n\n    /**\n     * @dev Function to change the treasury address.\n     */\n    function setTreasury(address _treasury) external onlyOwner {\n        require(_treasury != address(0), \"zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Function to change the rewardFund address.\n     */\n    function setRewardFund(address _rewardFund) external onlyOwner {\n        require(_rewardFund != address(0), \"zero address\");\n        rewardFund = _rewardFund;\n    }\n\n    /**\n     * @dev Function to change the stakingPool address.\n     */\n    function setStakingPool(address _stakingPool) external onlyOwner {\n        require(_stakingPool != address(0), \"zero address\");\n        stakingPool = _stakingPool;\n    }\n\n    /**\n     * @dev Function to change the rewarder address.\n     */\n    function setRewarder(address _rewarder) external onlyOwner {\n        require(_rewarder != address(0), \"zero address\");\n        rewarder = _rewarder;\n    }\n\n    /**\n     * @dev Function to distribute reward.\n     * @param _duration: Period for the reward distribution.\n     * @param _baseRewardAmount: Reward amount from performance fees to take from BalleRewardFund.\n     * @param _multiplier: Multiplier to add Extra reward from new minted BALLE, while there is free supply (100 = 1).\n     */\n    function distributeReward(\n        uint256 _duration,\n        uint256 _baseRewardAmount,\n        uint256 _multiplier,\n        uint256 _rewardStartBlock\n    ) external onlyOwner {\n        require(_duration > 0, \"!duration\");\n        require(_baseRewardAmount > 0, \"!baseRewardAmount\");\n        require(_multiplier >= 100, \"!multiplier\");\n        require(stakingPool != address(0), \"!stakingPool\");\n        require(rewarder != address(0), \"!rewarder\");\n\n        // Check if rewardFund has balance.\n        uint256 rewardFundBalance = IERC20(balle).balanceOf(rewardFund);\n        require(rewardFundBalance >= _baseRewardAmount, \"!rewardFundBalance\");\n\n        // Extra Reward amount.\n        uint256 extraRewardAmount = ((_baseRewardAmount * _multiplier) / 100) - _baseRewardAmount;\n        // Check if we can mint extraRewardAmount new BALLE.\n        uint256 toBeMintedOnVaults = 0;\n        if (block.number < balleMaster.endBlock()) {\n            toBeMintedOnVaults = (balleMaster.endBlock() - block.number) * balleMaster.ballePerBlock();\n        }\n        toBeMintedOnVaults = toBeMintedOnVaults + balleMaster.balleToMint();\n        uint256 freeSupply = balle.cap() - balle.totalSupply() - toBeMintedOnVaults;\n        if (extraRewardAmount > freeSupply) {\n            // recalculate to fit BALLE cap.\n            extraRewardAmount = freeSupply;\n            _multiplier = ((extraRewardAmount + _baseRewardAmount) * 100) / _baseRewardAmount;\n        }\n\n        // Send BALLE from RewardFund.\n        IBalleRewardFund(rewardFund).sendRewardAmount(rewarder, _baseRewardAmount);\n\n        // Reward fee, the fee will allways come from extra reward.\n        uint256 rewardFee = ((_baseRewardAmount + extraRewardAmount) * REWARD_FEE) / REWARD_FEE_MAX;\n        if (extraRewardAmount < rewardFee) {\n            rewardFee = extraRewardAmount;\n        } else {\n            balle.mint(rewarder, extraRewardAmount - rewardFee);\n        }\n        if (rewardFee > 0) {\n            balle.mint(treasury, rewardFee);\n        }\n\n        // Add reward to staking pool.\n        IBalleStakingPool(stakingPool).addReward(\n            _baseRewardAmount + extraRewardAmount - rewardFee,\n            _duration / 3,\n            _multiplier,\n            _rewardStartBlock\n        );\n\n        emit BalleRewardDistributed(\n            stakingPool,\n            _baseRewardAmount,\n            extraRewardAmount,\n            rewardFee,\n            _duration / 3,\n            _multiplier\n        );\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     * No tokens are stored in this contract, so, it's safe to transfer any token.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_to != address(0), \"zero address\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/token/BALLEv2.sol": {
      "content": "// contracts/token/BALLEv2.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract BALLEv2 is ERC20 {\n    using SafeERC20 for IERC20;\n\n    // Governance Gnosis Safe multisig address\n    address public governance;\n    // Authorized minters\n    mapping(address => bool) public minters;\n    // Max cap (40,000 BALLE)\n    uint256 public immutable cap;\n\n    event SetGovernance(address indexed addr);\n    event AddMinter(address indexed addr);\n    event RemoveMinter(address indexed addr);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _cap\n    ) ERC20(string(_name), string(_symbol)) {\n        require(_cap > 0, \"BALLE: cap is 0\");\n        cap = _cap;\n        governance = msg.sender;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address or an authorized minter\n     */\n    modifier onlyMinter() {\n        require(minters[msg.sender] || msg.sender == governance, \"!minter\");\n        _;\n    }\n\n    /**\n     * @dev Set the new Governance Gnosis Safe multisig address\n     */\n    function setGovernance(address _governance) external onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Add a minter address\n     */\n    function addMinter(address _minter) external onlyGovernance {\n        require(_minter != address(0), \"zero address\");\n        minters[_minter] = true;\n        emit AddMinter(_minter);\n    }\n\n    /**\n     * @dev Remove a minter address\n     */\n    function removeMinter(address _minter) external onlyGovernance {\n        require(_minter != address(0), \"zero address\");\n        minters[_minter] = false;\n        emit RemoveMinter(_minter);\n    }\n\n    /**\n     * @dev Creates _amount tokens and assigns them to _to account, increasing\n     * the total supply until the cap is reached.\n     */\n    function mint(address _to, uint256 _amount) external onlyMinter {\n        require(ERC20.totalSupply() + _amount <= cap, \"!cap\");\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     * No tokens are stored in this contract, so, it's safe to transfer any token.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyGovernance {\n        require(_to != address(0), \"zero address\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IBalleRewardFund.sol": {
      "content": "// contracts/interfaces/IBalleRewardFund.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBalleRewardFund {\n    // Transfer tokens to the rewarder.\n    function sendRewardAmount(address rewarder, uint256 amount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBalleStakingPool.sol": {
      "content": "// contracts/interfaces/IBalleStakingPool.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBalleStakingPool {\n    // Add reward to distribute. The funds should be transferred to the Rewarder contract.\n    function addReward(\n        uint256 _amount,\n        uint256 _numberOfBlocks,\n        uint256 _multiplier,\n        uint256 _rewardStartBlock\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/vaults/BalleMaster.sol": {
      "content": "// contracts/vaults/BalleMaster.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../token/BALLEv2.sol\";\nimport \"../interfaces/IStrategy.sol\";\n\n/**\n * @dev Implementation of the Master of BALLE.\n * This contract will take care of all reward calculations and distribution of BALLE tokens in vaults.\n * The owner of the contract is the Governance Gnosis Safe multisig.\n */\ncontract BalleMaster is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Info of each vault\n    struct VaultInfo {\n        IERC20 depositToken; // Address of deposited token contract.\n        address strat; // Address of the strategy contract.\n        uint256 allocPoint; // How many allocation points assigned to this vault. BALLEs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that BALLEs distribution occurs.\n        uint256 accBallePerShare; // Accumulated BALLEs per share, times 1e12. See below.\n        bool rewardsActive; // BALLE rewards active for this vault.\n        bool paused; // The vault's strategy is paused.\n        bool retired; // The vault is retired.\n    }\n\n    // Info of each user\n    struct UserInfo {\n        uint256 deposit; // User deposit amount.\n        uint256 shares; // User shares of the vault.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of BALLEs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a vault. Here's what happens:\n        //   1. The vault's `accBallePerShare` and `lastRewardBlock` gets updated.\n        //   2. User receives the pending reward sent to his address.\n        //   3. User's `shares` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // The BALLE token.\n    BALLEv2 public immutable balle;\n    // BALLE tokens created per block: 2283105022831050.\n    uint256 public immutable ballePerBlock;\n    // BALLE tokens to distribute: 24000e18.\n    uint256 public immutable balleTotalRewards;\n    // The block number when BALLE rewards distribution starts.\n    // This is set on constructor, because this contract continues distribution from 0x26FBb0FF7589A43C7d4B2Ff9A68A0519c474156c\n    uint256 public startBlock;\n    // The block number when BALLE rewards distribution ends.\n    uint256 public endBlock;\n    // Total allocation points. Must be the sum of all allocation points in all vaults.\n    uint256 public totalAllocPoint = 0;\n    // BALLE to be minted for rewards.\n    uint256 public balleToMint = 0;\n    // Operations Gnosis Safe multisig.\n    address public operations;\n    // Security Gnosis Safe multisig.\n    address public security;\n\n    // Info of each vault.\n    VaultInfo[] public vaultInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    event ActivateRewards(uint256 indexed vid, uint256 allocPoint);\n    event ModifyRewards(uint256 indexed vid, uint256 allocPoint);\n    event DeactivateRewards(uint256 indexed vid);\n    event EmergencyStratUpgrade(uint256 indexed vid, address indexed strat);\n    event PauseVault(uint256 indexed vid);\n    event UnpauseVault(uint256 indexed vid);\n    event PanicVault(uint256 indexed vid);\n    event RetireVault(uint256 indexed vid);\n    event Deposit(address indexed user, uint256 indexed vid, uint256 amount, uint256 rewards);\n    event Withdraw(address indexed user, uint256 indexed vid, uint256 amount, uint256 rewards);\n    event EmergencyWithdraw(address indexed user, uint256 indexed vid, uint256 amount);\n\n    constructor(\n        BALLEv2 _balle,\n        uint256 _ballePerBlock,\n        uint256 _balleTotalRewards,\n        uint256 _startBlock\n    ) {\n        balle = _balle;\n        ballePerBlock = _ballePerBlock;\n        balleTotalRewards = _balleTotalRewards;\n        startBlock = _startBlock;\n    }\n\n    /**\n     * @dev Function to change the Operations Gnosis Safe multisig.\n     */\n    function setOperations(address _operations) external onlyOwner {\n        require(_operations != address(0), \"zero address\");\n        operations = _operations;\n    }\n\n    /**\n     * @dev Function to change the Security Gnosis Safe multisig.\n     */\n    function setSecurity(address _security) external onlyOwner {\n        require(_security != address(0), \"zero address\");\n        security = _security;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\n     */\n    modifier onlyOperations() {\n        require(msg.sender == operations || msg.sender == owner(), \"!operations\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance, Operations or Security Gnosis Safe multisig.\n     */\n    modifier onlySecurity() {\n        require(msg.sender == operations || msg.sender == owner() || msg.sender == security, \"!security\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check if the vault exists.\n     */\n    modifier vaultExists(uint256 pid) {\n        require(pid < vaultInfo.length, \"!vault\");\n        _;\n    }\n\n    /**\n     * @dev View function to get the number of vaults configured.\n     */\n    function vaultLength() external view returns (uint256) {\n        return vaultInfo.length;\n    }\n\n    /**\n     * @dev Function to add a new vault configuration.\n     */\n    function addVault(address _depositToken, address _strat) external onlyOperations {\n        require(_strat != address(0), \"!strat\");\n        require(_depositToken == IStrategy(_strat).depositToken(), \"!depositToken\");\n        vaultInfo.push(\n            VaultInfo({\n                depositToken: IERC20(_depositToken),\n                strat: _strat,\n                allocPoint: 0,\n                lastRewardBlock: 0,\n                accBallePerShare: 0,\n                rewardsActive: false,\n                paused: false,\n                retired: false\n            })\n        );\n    }\n\n    /**\n     * @dev Function to activate vault rewards.\n     */\n    function activateVaultRewards(uint256 _vid, uint256 _allocPoint) external onlyOperations vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(!vault.rewardsActive, \"active\");\n        require(_allocPoint > 0, \"!allocpoint\");\n\n        massUpdateVaults();\n\n        if (startBlock == 0) {\n            // modified to continue distribution from 0x26FBb0FF7589A43C7d4B2Ff9A68A0519c474156c\n            startBlock = block.number;\n        }\n        if (endBlock == 0) {\n            endBlock = startBlock + (balleTotalRewards / ballePerBlock);\n        }\n        uint256 lastRewardBlock = block.number;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n\n        vault.allocPoint = _allocPoint;\n        vault.lastRewardBlock = lastRewardBlock;\n        vault.rewardsActive = true;\n        vault.accBallePerShare = 0;\n\n        emit ActivateRewards(_vid, _allocPoint);\n    }\n\n    /**\n     * @dev Function to modify vault rewards.\n     */\n    function modifyVaultRewards(uint256 _vid, uint256 _allocPoint) external onlyOperations vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(vault.rewardsActive, \"!active\");\n        require(_allocPoint > 0, \"!allocpoint\");\n\n        massUpdateVaults();\n\n        totalAllocPoint = totalAllocPoint - vault.allocPoint + _allocPoint;\n        vault.allocPoint = _allocPoint;\n\n        emit ModifyRewards(_vid, _allocPoint);\n    }\n\n    /**\n     * @dev Function to deactivate vault rewards.\n     */\n    function deactivateVaultRewards(uint256 _vid) public onlyOperations vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(vault.rewardsActive, \"!active\");\n\n        massUpdateVaults();\n\n        totalAllocPoint = totalAllocPoint - vault.allocPoint;\n        vault.allocPoint = 0;\n        vault.rewardsActive = false;\n\n        emit DeactivateRewards(_vid);\n    }\n\n    /**\n     * @dev Function to pause vault strategy.\n     */\n    function pauseVault(uint256 _vid) external onlySecurity vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(!vault.paused, \"!active\");\n\n        vault.paused = true;\n        emit PauseVault(_vid);\n\n        IStrategy(vault.strat).pause();\n    }\n\n    /**\n     * @dev Function to unpause vault strategy.\n     */\n    function unpauseVault(uint256 _vid) external onlyOperations vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(vault.paused, \"!paused\");\n\n        vault.paused = false;\n        emit UnpauseVault(_vid);\n\n        IStrategy(vault.strat).unpause();\n    }\n\n    /**\n     * @dev Function to panic vault strategy.\n     */\n    function panicVault(uint256 _vid) external onlySecurity vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(!vault.paused, \"!active\");\n\n        vault.paused = true;\n        emit PanicVault(_vid);\n\n        IStrategy(vault.strat).panic();\n    }\n\n    /**\n     * @dev Function to retire vault strategy.\n     */\n    function retireVault(uint256 _vid) external onlyOperations vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        require(!vault.retired, \"!active\");\n\n        // Make sure rewards are deactivated\n        if (vault.rewardsActive) {\n            deactivateVaultRewards(_vid);\n        }\n\n        vault.retired = true;\n        emit RetireVault(_vid);\n\n        IStrategy(vault.strat).retire();\n    }\n\n    /**\n     * @dev View function to calculate the reward multiplier over the given _from to _to block.\n     */\n    function getBlockMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to < startBlock) {\n            return 0;\n        }\n        if (_from > endBlock) {\n            return 0;\n        }\n        if (_from < startBlock) {\n            _from = startBlock;\n        }\n        if (_to > endBlock) {\n            _to = endBlock;\n        }\n        return _to - _from;\n    }\n\n    /**\n     * @dev View function to see pending BALLE rewards on frontend.\n     */\n    function pendingRewards(uint256 _vid, address _user) external view returns (uint256) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][_user];\n\n        uint256 accBallePerShare = vault.accBallePerShare;\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        if (vault.rewardsActive && block.number > vault.lastRewardBlock && sharesTotal != 0) {\n            uint256 multiplier = getBlockMultiplier(vault.lastRewardBlock, block.number);\n            uint256 balleReward = (multiplier * ballePerBlock * vault.allocPoint) / totalAllocPoint;\n            accBallePerShare = accBallePerShare + (balleReward * 1e12) / sharesTotal;\n        }\n        return (user.shares * accBallePerShare) / 1e12 - user.rewardDebt;\n    }\n\n    /**\n     * @dev View function to see user's deposited tokens on frontend.\n     * This is useful to show the earnings: depositTokens() - userDeposit()\n     */\n    function userDeposit(uint256 _vid, address _user) external view returns (uint256) {\n        return userInfo[_vid][_user].deposit;\n    }\n\n    /**\n     * @dev View function to see user's deposit tokens on frontend.\n     */\n    function depositTokens(uint256 _vid, address _user) external view returns (uint256) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][_user];\n\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n        if (sharesTotal == 0) {\n            return 0;\n        }\n        return (user.shares * depositTotal) / sharesTotal;\n    }\n\n    /**\n     * @dev Function to update reward variables for all vaults. Be careful of gas spending!\n     */\n    function massUpdateVaults() internal {\n        uint256 length = vaultInfo.length;\n        for (uint256 vid = 0; vid < length; ++vid) {\n            updateVault(vid);\n        }\n    }\n\n    /**\n     * @dev Function to update reward variables of the given vault to be up-to-date.\n     */\n    function updateVault(uint256 _vid) internal {\n        VaultInfo storage vault = vaultInfo[_vid];\n\n        if (!vault.rewardsActive) {\n            return;\n        }\n        if (block.number <= vault.lastRewardBlock) {\n            return;\n        }\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        if (sharesTotal == 0) {\n            vault.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getBlockMultiplier(vault.lastRewardBlock, block.number);\n        if (multiplier <= 0) {\n            return;\n        }\n        uint256 balleReward = (multiplier * ballePerBlock * vault.allocPoint) / totalAllocPoint;\n        balleToMint = balleToMint + balleReward;\n\n        vault.accBallePerShare = vault.accBallePerShare + (balleReward * 1e12) / sharesTotal;\n        vault.lastRewardBlock = block.number;\n    }\n\n    /**\n     * @dev Function that moves tokens from user -> BalleMaster (BALLE allocation) -> Strat (compounding).\n     */\n    function _deposit(uint256 _vid, uint256 _amount) internal {\n        updateVault(_vid);\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][msg.sender];\n\n        uint256 pending = 0;\n        if (user.shares > 0) {\n            pending = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt;\n            if (pending > 0) {\n                safeBalleTransfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0 && !vault.paused && !vault.retired) {\n            vault.depositToken.safeTransferFrom(msg.sender, address(this), _amount);\n            vault.depositToken.safeIncreaseAllowance(vault.strat, _amount);\n            uint256 sharesAdded = IStrategy(vaultInfo[_vid].strat).deposit(msg.sender, _amount);\n            uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n            uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n            user.shares = user.shares + sharesAdded;\n            user.deposit = (user.shares * depositTotal) / sharesTotal;\n        }\n        user.rewardDebt = (user.shares * vault.accBallePerShare) / 1e12;\n        emit Deposit(msg.sender, _vid, _amount, pending);\n    }\n\n    /**\n     * @dev Function that deposits user tokens.\n     */\n    function deposit(uint256 _vid, uint256 _amount) public nonReentrant vaultExists(_vid) {\n        _deposit(_vid, _amount);\n    }\n\n    /**\n     * @dev Function that deposits all user tokens balance.\n     */\n    function depositAll(uint256 _vid) public nonReentrant {\n        VaultInfo storage vault = vaultInfo[_vid];\n        _deposit(_vid, vault.depositToken.balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Function that performs the withdrawal.\n     */\n    function _withdraw(uint256 _vid, uint256 _amount) internal {\n        updateVault(_vid);\n\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][msg.sender];\n\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n\n        require(sharesTotal > 0, \"!sharesTotal\");\n        require(user.shares > 0, \"!user.shares\");\n\n        // Withdraw pending BALLE\n        uint256 pending = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt;\n        if (pending > 0) {\n            safeBalleTransfer(msg.sender, pending);\n        }\n\n        // Withdraw tokens\n        uint256 amount = (user.shares * depositTotal) / sharesTotal;\n        if (_amount > amount) {\n            _amount = amount;\n        }\n        if (_amount > 0) {\n            (uint256 sharesRemoved, uint256 depositRemoved) = IStrategy(vault.strat).withdraw(msg.sender, _amount);\n\n            if (sharesRemoved >= user.shares) {\n                user.shares = 0;\n                user.deposit = 0;\n            } else {\n                user.shares = user.shares - sharesRemoved;\n                user.deposit = (user.shares * (depositTotal - depositRemoved)) / (sharesTotal - sharesRemoved);\n            }\n\n            uint256 depositBal = IERC20(vault.depositToken).balanceOf(address(this));\n            if (depositBal < depositRemoved) {\n                depositRemoved = depositBal;\n            }\n            vault.depositToken.safeTransfer(msg.sender, depositRemoved);\n        }\n        user.rewardDebt = (user.shares * vault.accBallePerShare) / 1e12;\n\n        emit Withdraw(msg.sender, _vid, _amount, pending);\n    }\n\n    /**\n     * @dev Function that withdraws user tokens.\n     */\n    function withdraw(uint256 _vid, uint256 _amount) public nonReentrant vaultExists(_vid) {\n        _withdraw(_vid, _amount);\n    }\n\n    /**\n     * @dev Function that withdraws all user tokens balance.\n     */\n    function withdrawAll(uint256 _vid) public nonReentrant {\n        _withdraw(_vid, type(uint256).max);\n    }\n\n    /**\n     * @dev Function that withdraws without caring about rewards. EMERGENCY ONLY.\n     */\n    function emergencyWithdraw(uint256 _vid) public nonReentrant vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][msg.sender];\n\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        uint256 amount = (user.shares * depositTotal) / sharesTotal;\n        user.shares = 0;\n        user.deposit = 0;\n        user.rewardDebt = 0;\n\n        IStrategy(vault.strat).withdraw(msg.sender, amount);\n\n        uint256 lpBal = IERC20(vault.depositToken).balanceOf(address(this));\n        if (lpBal < amount) {\n            amount = lpBal;\n        }\n        vault.depositToken.safeTransfer(msg.sender, amount);\n\n        emit EmergencyWithdraw(msg.sender, _vid, amount);\n    }\n\n    /**\n     * @dev Function for Safe BALLE transfer.\n     * Will mint BALLE when needed and take care if rounding error causes pool to not have enough BALLE.\n     */\n    function safeBalleTransfer(address _to, uint256 _amount) internal {\n        uint256 balleBal = balle.balanceOf(address(this));\n\n        if (_amount > balleBal) {\n            if (balleToMint > 0) {\n                balle.mint(address(this), balleToMint);\n                balleToMint = 0;\n                balleBal = balle.balanceOf(address(this));\n                if (_amount > balleBal) {\n                    balle.transfer(_to, balleBal);\n                } else {\n                    balle.transfer(_to, _amount);\n                }\n            } else {\n                balle.transfer(_to, balleBal);\n            }\n        } else {\n            balle.transfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOwner {\n        require(_to != address(0), \"zero address\");\n        require(_token != address(balle), \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// contracts/interfaces/IStrategy.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStrategy {\n    // Deposited token\n    function depositToken() external view returns (address);\n\n    // Total tokens managed by strategy\n    function depositTotal() external view returns (uint256);\n\n    // Sum of all shares of users to depositTotal\n    function sharesTotal() external view returns (uint256);\n\n    // Main harvest function\n    function harvest() external;\n\n    // Transfer tokens BalleMaster -> strategy\n    function deposit(address _user, uint256 _amount) external returns (uint256);\n\n    // Transfer tokens strategy -> BalleMaster\n    function withdraw(address _user, uint256 _amount) external returns (uint256, uint256);\n\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external;\n\n    // Pause strategy\n    function pause() external;\n\n    // Unpause strategy\n    function unpause() external;\n\n    // Panic strategy\n    function panic() external;\n\n    // Retire strategy\n    function retire() external;\n}\n"
    },
    "contracts/token/BalleMigration.sol": {
      "content": "// contracts/token/BalleMigration.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IMintableERC20.sol\";\n\ncontract BalleMigration is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    IERC20 public balle;\n    IMintableERC20 public balleV2;\n\n    // Governance Gnosis Safe multisig address\n    address public governance;\n\n    event Migrate(address indexed addr, uint256 amount);\n    event SetGovernance(address indexed addr);\n\n    constructor(address _balle, address _balleV2) {\n        require(_balle != address(0), \"BALLE address not valid\");\n        require(_balleV2 != address(0), \"BALLEv2 address not valid\");\n        require(_balle != _balleV2, \"Invalid address\");\n\n        balle = IERC20(_balle);\n        balleV2 = IMintableERC20(_balleV2);\n        governance = msg.sender;\n    }\n\n    /**\n     * @dev Transfer BALLE from wallet, and mint new BALLEv2 to wallet\n     */\n    function migrate() external nonReentrant {\n        require(block.number < 8160345, \"too late\");\n        uint256 amount = balle.balanceOf(msg.sender);\n        require(amount > 0, \"!amount\");\n        balle.transferFrom(msg.sender, address(this), amount);\n        balleV2.mint(msg.sender, amount);\n\n        emit Migrate(msg.sender, amount);\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Set the new Governance Gnosis Safe multisig address\n     */\n    function setGovernance(address _governance) external onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        require(_token != address(balle), \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IMintableERC20.sol": {
      "content": "// contracts/interfaces/IMintableERC20.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableERC20 is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/treasury/BalleTreasury.sol": {
      "content": "// contracts/treasury/BalleTreasury.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @dev Implementation of the Treasury for BALLE.\n * This contract will hold all treasury tokens.\n * The owner of the contract is the Governance Gnosis Safe multisig.\n */\ncontract BalleTreasury is Ownable {\n    using SafeERC20 for IERC20;\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        require(_token != address(0), \"!token\");\n        require(_to != address(0), \"!to\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function withdrawBnb(address payable _to, uint256 _amount) external onlyOwner {\n        require(_to != address(0), \"!to\");\n        require(address(this).balance >= _amount, \"!amount\");\n\n        _to.transfer(_amount);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n}\n"
    },
    "contracts/test/TestStrategy.sol": {
      "content": "// contracts/mocks/TestStrategy.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../mocks/interfaces/IMMintableERC20.sol\";\n\ncontract TestStrategy is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public balleMaster;\n    address public depositToken;\n    address public govAddress;\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n    // Not needed variables, only for this testing strategy to work\n    bool public paused = false;\n    bool public retired = false;\n\n    /**\n     * @dev Implementation of strategy for testing.\n     * The strategy will \"mine\" TEST_LP tokens to simulate a working farm for testing purpouses.\n     * It's very simple to facilitate testing. Every time it's harvested, it will add 1% to TEST_LP balance.\n     * Will be improved to test fee distribution, etc.\n     */\n    constructor(address _balleMaster, address _depositToken) {\n        balleMaster = _balleMaster;\n        depositToken = _depositToken;\n\n        govAddress = msg.sender;\n        transferOwnership(_balleMaster);\n    }\n\n    /**\n     * @dev Function to harvest benefits and implement strategy steps.\n     * It will increase deposited tokens by 1% every time it's called.\n     */\n    function harvest() external {\n        require(msg.sender == govAddress, \"!gov\");\n\n        if (depositTotal == 0) {\n            return;\n        }\n\n        uint256 earned = IERC20(depositToken).balanceOf(address(this)) / 100;\n        // autocompounding strategy\n        depositTotal = depositTotal + earned;\n        IMMintableERC20(depositToken).mint(address(this), earned);\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     * It will leave the tokens here, strategy only for testing purpouses.\n     */\n    function deposit(address _user, uint256 _amount) public onlyOwner returns (uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        IERC20(depositToken).safeTransferFrom(address(msg.sender), address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0) {\n            sharesAdded = (_amount * sharesTotal) / depositTotal;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n        depositTotal = depositTotal + _amount;\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > depositAmt) {\n            _amount = depositAmt;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n        depositTotal = depositTotal - _amount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n\n        return (sharesRemoved, _amount);\n    }\n\n    function upgradeTo(address _strat)\n        external\n        onlyOwner\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(_strat != address(0), \"!strat\");\n        // A real strategy would prepare to upgrade (remove tokens from farm)\n        // Set allowance for new strat contract\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\n        IERC20(depositToken).safeIncreaseAllowance(_strat, depositAmt);\n\n        return (sharesTotal, depositAmt, 0);\n    }\n\n    function upgradeFrom(\n        address _strat,\n        uint256 _sharesTotal,\n        uint256 _depositAmt,\n        uint256 _earnedAmt\n    ) external onlyOwner {\n        require(_strat != address(0), \"!strat\");\n        // A real strategy would prepare to upgrade (remove tokens from farm)\n        // Transfer tokens\n\n        IERC20(depositToken).safeTransferFrom(_strat, address(this), _depositAmt);\n        depositTotal = IERC20(depositToken).balanceOf(address(this));\n        _earnedAmt = 0; // Test strategy does not have earnedToken, this is only to use the argument\n\n        sharesTotal = _sharesTotal;\n\n        // A real strategy would finish to upgrade (send tokens to farm)\n    }\n\n    function pause() external onlyOwner {\n        // A real strategy would enter pause mode:\n        //   - Remove tokens from farm\n        //   - Clear allowances of third party contracts\n\n        // Updating state, not needed on a real one\n        paused = true;\n    }\n\n    function unpause() external onlyOwner {\n        // A real strategy would enter active mode:\n        //   - Set allowances to third party contracts\n        //   - Send tokens to farm\n\n        // Updating state, not needed on a real one\n        paused = false;\n    }\n\n    function panic() external onlyOwner {\n        // A real strategy would panic exit farm:\n        //   - Remove tokens from farm with emergencyWithdraw\n        //   - Clear allowances of third party contracts\n\n        // Updating state, not needed on a real one\n        paused = true;\n    }\n\n    function retire() external onlyOwner {\n        // A real strategy would enter retired mode:\n        //   - Remove tokens from farm\n        //   - Clear allowances of third party contracts\n\n        // Updating state, not needed on a real one\n        paused = true;\n    }\n\n    function setGov(address _govAddress) public {\n        require(msg.sender == govAddress, \"!gov\");\n        govAddress = _govAddress;\n    }\n\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public {\n        require(msg.sender == govAddress, \"!gov\");\n        require(_token != depositToken, \"!safe\");\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/interfaces/IMMintableERC20.sol": {
      "content": "// contracts/mocks/interfaces/IMMintableERC20.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMMintableERC20 is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n}\n"
    },
    "contracts/mocks/MockRouter.sol": {
      "content": "// contracts/mocks/MockRouter.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IMMintableERC20.sol\";\n\n/**\n * @dev Mock contract used for unit tests.\n */\ncontract MockRouter {\n    using SafeERC20 for IERC20;\n\n    address public lpToken;\n\n    constructor(address _lpToken) {\n        lpToken = _lpToken;\n    }\n\n    /**\n     * @dev Mock addLiquidity function. Transfer tokens to contract and send LP.\n     */\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        require(amountADesired >= amountAMin, \"!amountAMin\");\n        require(amountBDesired >= amountBMin, \"!amountBMin\");\n        // solhint-disable-next-line not-rely-on-time\n        require(deadline >= block.timestamp + 100, \"!deadline\");\n        // Transfer tokens.\n        IERC20(tokenA).safeTransferFrom(address(msg.sender), address(this), amountADesired);\n        IERC20(tokenB).safeTransferFrom(address(msg.sender), address(this), amountBDesired);\n        // Mint LP\n        uint256 amount = (amountADesired + amountBDesired) / 2;\n        IMMintableERC20(lpToken).mint(to, amount);\n\n        return (amountADesired, amountBDesired, amount);\n    }\n\n    /**\n     * @dev Mock getAmountsOut function. Return same imput amount.\n     */\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external pure returns (uint256[] memory amounts) {\n        require(path.length > 1, \"!path\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            amounts[i + 1] = amountIn;\n        }\n    }\n\n    /**\n     * @dev Mock swapExactTokensForTokens function. Transfer first token of path to contract and last one to msg.sender.\n     * The amount to send is the same as amountIn.\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts) {\n        require(amountIn >= amountOutMin, \"!amount\");\n        // solhint-disable-next-line not-rely-on-time\n        require(deadline >= block.timestamp + 100, \"!deadline\");\n        // Transfer tokens.\n        IERC20(path[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\n        IMMintableERC20(path[path.length - 1]).mint(to, amountIn);\n        // Return value.\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            amounts[i + 1] = amountIn;\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockMasterChef.sol": {
      "content": "// contracts/mocks/MockMasterChef.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IMMintableERC20.sol\";\n\n/**\n * @dev Mock contract used for unit tests.\n */\ncontract MockMasterChef {\n    using SafeERC20 for IERC20;\n\n    address public cake;\n    address public lpToken;\n    uint256 public amount;\n    uint256 public cakePerBlock;\n    uint256 public lastBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        address _cake,\n        address _lpToken,\n        uint256 _cakePerBlock\n    ) {\n        cake = _cake;\n        lpToken = _lpToken;\n        cakePerBlock = _cakePerBlock;\n    }\n\n    /**\n     * @dev Mock deposit function. Transfer LP Token from msg.sender.\n     * Send pending CAKE if any.\n     */\n    function deposit(uint256 _pid, uint256 _amount) public {\n        require(_pid != 0, \"!pid\");\n\n        if (amount > 0) {\n            uint256 pending = (block.number - lastBlock) * cakePerBlock;\n            lastBlock = block.number;\n            if (pending > 0) {\n                safeCakeTransfer(msg.sender, pending);\n            }\n        }\n\n        if (_amount > 0) {\n            IERC20(lpToken).safeTransferFrom(address(msg.sender), address(this), _amount);\n            amount = amount + _amount;\n            if (lastBlock == 0) {\n                lastBlock = block.number;\n            }\n        }\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    /**\n     * @dev Mock view function to see pending CAKEs on frontend.\n     */\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\n        require(_pid != 0, \"!pid\");\n        require(_user != address(0), \"!user\");\n        return (block.number - lastBlock) * cakePerBlock;\n    }\n\n    /**\n     * @dev Mock withdraw function. Transfer LP Token to msg.sender.\n     * Send pending CAKE if any.\n     */\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        require(_pid != 0, \"!pid\");\n\n        require(amount >= _amount, \"!amount\");\n        uint256 pending = (block.number - lastBlock) * cakePerBlock;\n        lastBlock = block.number;\n        if (pending > 0) {\n            safeCakeTransfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            amount = amount - _amount;\n            IERC20(lpToken).safeTransfer(address(msg.sender), _amount);\n        }\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /**\n     * @dev Mock emergencyWithdraw function. Transfer all LP Token to msg.sender.\n     */\n    function emergencyWithdraw(uint256 _pid) public {\n        IERC20(lpToken).safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n        amount = 0;\n    }\n\n    // Safe cake transfer function, just in case if rounding error causes pool to not have enough CAKEs.\n    // MODIFIED TO MINT HERE\n    function safeCakeTransfer(address _to, uint256 _amount) internal {\n        IMMintableERC20(cake).mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/MasterChef.sol": {
      "content": "// contracts/mocks/Rewards.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IMMintableERC20.sol\";\n\ncontract MasterChef is Ownable {\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of CAKEs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accCakePerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. CAKEs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CAKEs distribution occurs.\n        uint256 accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\n    }\n\n    // The CAKE TOKEN!\n    address public cake;\n    // CAKE tokens created per block.\n    uint256 public cakePerBlock;\n    // Bonus muliplier for early cake makers.\n    uint256 public bonusMultiplier = 1;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when CAKE mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(address _cake) {\n        cake = _cake;\n        cakePerBlock = 400000000000000000;\n        startBlock = block.number;\n\n        // staking pool\n        poolInfo.push(\n            PoolInfo({lpToken: IERC20(_cake), allocPoint: 1000, lastRewardBlock: startBlock, accCakePerShare: 0})\n        );\n\n        totalAllocPoint = 1000;\n    }\n\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\n        bonusMultiplier = multiplierNumber;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n        poolInfo.push(\n            PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accCakePerShare: 0})\n        );\n        updateStakingPool();\n    }\n\n    // Update the given pool's CAKE allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n        totalAllocPoint = totalAllocPoint - prevAllocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        if (prevAllocPoint != _allocPoint) {\n            updateStakingPool();\n        }\n    }\n\n    function updateStakingPool() internal {\n        uint256 length = poolInfo.length;\n        uint256 points = 0;\n        for (uint256 pid = 1; pid < length; ++pid) {\n            points = points + poolInfo[pid].allocPoint;\n        }\n        if (points != 0) {\n            points = points / 3;\n            totalAllocPoint = totalAllocPoint - poolInfo[0].allocPoint + points;\n            poolInfo[0].allocPoint = points;\n        }\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        return (_to - _from) * bonusMultiplier;\n    }\n\n    // View function to see pending CAKEs on frontend.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCakePerShare = pool.accCakePerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 cakeReward = (multiplier * cakePerBlock * pool.allocPoint) / totalAllocPoint;\n            accCakePerShare = accCakePerShare + ((cakeReward * 1e12) / lpSupply);\n        }\n        return (user.amount * accCakePerShare) / 1e12 - user.rewardDebt;\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 cakeReward = (multiplier * cakePerBlock * pool.allocPoint) / totalAllocPoint;\n        pool.accCakePerShare = pool.accCakePerShare + ((cakeReward * 1e12) / lpSupply);\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to MasterChef for CAKE allocation.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        require(_pid != 0, \"deposit CAKE by staking\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = ((user.amount * pool.accCakePerShare) / 1e12) - user.rewardDebt;\n            if (pending > 0) {\n                safeCakeTransfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount + _amount;\n        }\n        user.rewardDebt = (user.amount * pool.accCakePerShare) / 1e12;\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        require(_pid != 0, \"withdraw CAKE by unstaking\");\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = ((user.amount * pool.accCakePerShare) / 1e12) - user.rewardDebt;\n        if (pending > 0) {\n            safeCakeTransfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount - _amount;\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = (user.amount * pool.accCakePerShare) / 1e12;\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Stake CAKE tokens to MasterChef\n    function enterStaking(uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[0][msg.sender];\n        updatePool(0);\n        if (user.amount > 0) {\n            uint256 pending = ((user.amount * pool.accCakePerShare) / 1e12) - user.rewardDebt;\n            if (pending > 0) {\n                safeCakeTransfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount + _amount;\n        }\n        user.rewardDebt = (user.amount * pool.accCakePerShare) / 1e12;\n\n        emit Deposit(msg.sender, 0, _amount);\n    }\n\n    // Withdraw CAKE tokens from STAKING.\n    function leaveStaking(uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[0][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(0);\n        uint256 pending = ((user.amount * pool.accCakePerShare) / 1e12) - user.rewardDebt;\n        if (pending > 0) {\n            safeCakeTransfer(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount - _amount;\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = (user.amount * pool.accCakePerShare) / 1e12;\n\n        emit Withdraw(msg.sender, 0, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    // allow admin update, no risk of rug pull\n    function updateCakePerBlock(uint256 _cakePerBlock) public onlyOwner {\n        require(msg.sender == owner(), \"Owner-Only Function\");\n        cakePerBlock = _cakePerBlock;\n    }\n\n    // Safe cake transfer function, just in case if rounding error causes pool to not have enough CAKEs.\n    // MODIFIED TO MINT HERE\n    function safeCakeTransfer(address _to, uint256 _amount) internal {\n        IMMintableERC20(cake).mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/strategies/StratPancakeLpV3.sol": {
      "content": "// contracts/strategies/StratPancakeLpV3.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IPancakeswapFarm.sol\";\nimport \"../interfaces/IPancakeRouter01.sol\";\n\n/**\n * @dev Implementation of the PancakeSwap LP Strategy.\n * This contract will compound LP tokens.\n * The owner of the contract is the BalleMaster contract.\n */\ncontract StratPancakeLpV3 is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // PancakeSwap's MasterChef address.\n    address public immutable masterChef;\n    // MasterChef's pid of pool.\n    uint256 public immutable pid;\n    // Deposit token (LP) address.\n    address public immutable depositToken;\n    // First token of LP address.\n    address public immutable token0;\n    // Second token of LP address.\n    address public immutable token1;\n    // Earned token (CAKE) address.\n    address public immutable earnedtoken;\n    // PancakeSwap router address.\n    address public immutable router;\n\n    // Address to send controller fee.\n    address public rewards;\n    // Address to send treasury fee.\n    address public treasury;\n\n    // Governance Gnosis Safe multisig.\n    address public governance;\n    // Operations Gnosis Safe multisig.\n    address public operations;\n    // Harvest addresses\n    mapping(address => bool) public harvesters;\n\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\n    uint256 public entranceFee = 9990;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\n    // 0.5% max settable entrance fee, LL = lowerlimit.\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\n\n    // 4% performance fee.\n    uint256 public performanceFee = 400;\n    // 8% max settable performance fee, UL = upperlimit.\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\n    // Factor to calculate fee 100 = 1%.\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\n    // 3% goes to BALLE holders.\n    uint256 public rewardsFeeFactor = 750;\n    // 1% goes to treasury.\n    uint256 public treasuryFeeFactor = 250;\n    // Factor for fee distribution.\n    uint256 public constant FEE_FACTOR_MAX = 1000;\n\n    // 5% default slippage tolerance.\n    uint256 public slippage = 950;\n    // 10% max settable slippage tolerance, UL = upperlimit.\n    uint256 public constant SLIPPAGE_UL = 990;\n\n    // Swap routes\n    address[] public earnedtokenToBallePath;\n    address[] public earnedtokenToToken0Path;\n    address[] public earnedtokenToToken1Path;\n\n    // Paused state activated\n    bool public paused = false;\n\n    event SetSettings(\n        uint256 entranceFee,\n        uint256 performanceFee,\n        uint256 rewardsFeeFactor,\n        uint256 treasuryFeeFactor,\n        uint256 slippage\n    );\n    event Harvest(uint256 amount);\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\n    event SetGovernance(address indexed addr);\n\n    /**\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\n     */\n    constructor(\n        address[] memory _addresses,\n        uint256 _pid,\n        address[] memory _earnedtokenToBallePath,\n        address[] memory _earnedtokenToToken0Path,\n        address[] memory _earnedtokenToToken1Path\n    ) {\n        require(_pid > 0, \"!pid\");\n\n        depositToken = _addresses[0];\n        token0 = _addresses[1];\n        token1 = _addresses[2];\n        earnedtoken = _addresses[3];\n        router = _addresses[4];\n        masterChef = _addresses[5];\n        pid = _pid;\n\n        governance = msg.sender;\n        harvesters[_addresses[7]] = true;\n        rewards = _addresses[8];\n        treasury = _addresses[9];\n\n        earnedtokenToBallePath = _earnedtokenToBallePath;\n        earnedtokenToToken0Path = _earnedtokenToToken0Path;\n        earnedtokenToToken1Path = _earnedtokenToToken1Path;\n\n        // The owner of the strategy contract is the BalleMaster contract\n        transferOwnership(_addresses[6]);\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig.\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\n     */\n    modifier onlyOperations() {\n        require(msg.sender == operations || msg.sender == governance, \"!operations\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig or an authorized harvester.\n     */\n    modifier onlyHarvester() {\n        require(harvesters[msg.sender] || msg.sender == operations || msg.sender == governance, \"!harvester\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check that the strategy is paused.\n     */\n    modifier whenPaused() {\n        require(paused, \"!paused\");\n        _;\n    }\n\n    /**\n     * @dev View function to see pending CAKEs on farm.\n     */\n    function pendingEarnedToken() external view returns (uint256) {\n        return IPancakeswapFarm(masterChef).pendingCake(pid, address(this));\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     */\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\n        require(_user != address(0), \"!user\");\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0 && sharesTotal > 0) {\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n\n        farm();\n\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to send depositToken to farm.\n     */\n    function farm() internal {\n        bool first = (depositTotal == 0);\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\n        depositTotal = depositTotal + amount;\n\n        if (first) {\n            // On first farming, set allowances\n            setAllowances();\n        }\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\n        require(_user != address(0), \"!user\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal - sharesRemoved;\n\n        // If paused, tokens are already here\n        if (!paused) {\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\n        }\n\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        depositTotal = depositTotal - _amount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n\n        return (sharesRemoved, _amount);\n    }\n\n    /**\n     * @dev Function to harvest earnings and reinvest.\n     */\n    function harvest() public onlyHarvester whenNotPaused nonReentrant {\n        // Harvest farm tokens\n        IPancakeswapFarm(masterChef).withdraw(pid, 0);\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n\n        emit Harvest(earnedAmt);\n\n        // Distribute the fees\n        earnedAmt = distributeFees(earnedAmt);\n\n        // Converts farm tokens into want tokens\n        if (earnedtoken != token0) {\n            // Swap half earned to token0\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken0Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        if (earnedtoken != token1) {\n            // Swap half earned to token1\n            safeSwap(\n                router,\n                earnedAmt / 2,\n                slippage,\n                earnedtokenToToken1Path,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        // Add liquidity\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\n        if (token0Amt > 0 && token1Amt > 0) {\n            IPancakeRouter01(router).addLiquidity(\n                token0,\n                token1,\n                token0Amt,\n                token1Amt,\n                0,\n                0,\n                address(this),\n                // solhint-disable-next-line not-rely-on-time\n                block.timestamp + 600\n            );\n        }\n\n        farm();\n    }\n\n    /**\n     * @dev Function to calculate and distribute the fees.\n     */\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (_earnedAmt > 0) {\n            // Performance fee\n            if (performanceFee > 0) {\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\n\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\n                // Swap treasuryFee to BALLE and send to treasury.\n                safeSwap(\n                    router,\n                    treasuryFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    treasury,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\n                // Swap rewardsFee to BALLE and send to rewards contract.\n                safeSwap(\n                    router,\n                    rewardsFee,\n                    slippage,\n                    earnedtokenToBallePath,\n                    rewards,\n                    // solhint-disable-next-line not-rely-on-time\n                    block.timestamp + 600\n                );\n\n                _earnedAmt = _earnedAmt - totalFee;\n\n                emit DistributeFees(rewardsFee, treasuryFee);\n            }\n        }\n\n        return _earnedAmt;\n    }\n\n    /**\n     * @dev Function to change strategy settings.\n     */\n    function setSettings(\n        uint256 _entranceFee,\n        uint256 _performanceFee,\n        uint256 _rewardsFeeFactor,\n        uint256 _treasuryFeeFactor,\n        uint256 _slippage\n    ) public onlyOperations {\n        require(_entranceFee >= ENTRANCE_FEE_LL, \"!entranceFeeLL\");\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \"!entranceFeeMax\");\n        entranceFee = _entranceFee;\n\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \"!performanceFeeUL\");\n        performanceFee = _performanceFee;\n\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \"!feeFactor\");\n        rewardsFeeFactor = _rewardsFeeFactor;\n        treasuryFeeFactor = _treasuryFeeFactor;\n\n        require(_slippage <= SLIPPAGE_UL, \"!slippageUL\");\n        slippage = _slippage;\n\n        emit SetSettings(_entranceFee, _performanceFee, _rewardsFeeFactor, _treasuryFeeFactor, _slippage);\n    }\n\n    /**\n     * @dev Function to change the Governance Gnosis Safe multisig.\n     */\n    function setGovernance(address _governance) public onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Function to change the Operations Gnosis Safe multisig.\n     */\n    function setOperations(address _operations) public onlyGovernance {\n        require(_operations != address(0), \"zero address\");\n        operations = _operations;\n    }\n\n    /**\n     * @dev Function to change the rewards address.\n     */\n    function setRewards(address _rewards) public onlyGovernance {\n        require(_rewards != address(0), \"zero address\");\n        rewards = _rewards;\n    }\n\n    /**\n     * @dev Function to change the treasury address.\n     */\n    function setTreasury(address _treasury) public onlyGovernance {\n        require(_treasury != address(0), \"zero address\");\n        treasury = _treasury;\n    }\n\n    /**\n     * @dev Add a harvester address.\n     */\n    function addHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = true;\n    }\n\n    /**\n     * @dev Remove a harvester address.\n     */\n    function removeHarvester(address _harvester) external onlyOperations {\n        require(_harvester != address(0), \"zero address\");\n        harvesters[_harvester] = false;\n    }\n\n    /**\n     * @dev Utility function for setting allowances with third party contracts.\n     */\n    function setAllowances() internal {\n        // Approve token transfers, check if 0 before setting\n        if (IERC20(depositToken).allowance(address(this), masterChef) == 0) {\n            IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\n        }\n        if (IERC20(earnedtoken).allowance(address(this), router) == 0) {\n            IERC20(earnedtoken).safeApprove(router, type(uint256).max);\n        }\n        if (IERC20(token0).allowance(address(this), router) == 0) {\n            IERC20(token0).safeApprove(router, type(uint256).max);\n        }\n        if (IERC20(token1).allowance(address(this), router) == 0) {\n            IERC20(token1).safeApprove(router, type(uint256).max);\n        }\n    }\n\n    /**\n     * @dev Utility function for clearing allowances with third party contracts.\n     */\n    function clearAllowances() internal {\n        // Disapprove token transfers\n        IERC20(depositToken).safeApprove(masterChef, 0);\n        IERC20(earnedtoken).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, 0);\n    }\n\n    /**\n     * @dev Utility function for safely swap tokens.\n     */\n    function safeSwap(\n        address _router,\n        uint256 _amountIn,\n        uint256 _slippage,\n        address[] memory _path,\n        address _to,\n        uint256 _deadline\n    ) internal {\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\n        uint256 amountOut = amounts[amounts.length - 1];\n\n        IPancakeRouter01(_router).swapExactTokensForTokens(\n            _amountIn,\n            (amountOut * _slippage) / 1000,\n            _path,\n            _to,\n            _deadline\n        );\n    }\n\n    /**\n     * @dev Stop the vault.\n     */\n    function pause() external onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Internal function for stopping the vault.\n     */\n    function _pause() internal {\n        if (!paused) {\n            paused = true;\n\n            if (depositTotal > 0) {\n                // Withdraw all from farm\n                IPancakeswapFarm(masterChef).withdraw(pid, depositTotal);\n            }\n\n            // Clear allowances of third party contracts.\n            clearAllowances();\n        }\n    }\n\n    /**\n     * @dev Restart the vault.\n     */\n    function unpause() external onlyOwner whenPaused {\n        depositTotal = 0; // It will be set back on farm().\n        paused = false;\n\n        farm();\n    }\n\n    /**\n     * @dev Stop the vault with emergencyWithdraw from farm.\n     */\n    function panic() external onlyOwner whenNotPaused {\n        paused = true;\n\n        // Emergency withdraw.\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\n\n        // Clear allowances of third party contracts.\n        clearAllowances();\n    }\n\n    /**\n     * @dev Retire the vault.\n     */\n    function retire() external onlyOwner {\n        // Stop vault\n        _pause();\n\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\n        uint256 earnedAmt = IERC20(earnedtoken).balanceOf(address(this));\n        if (earnedAmt > 0) {\n            IERC20(earnedtoken).safeTransfer(treasury, earnedAmt);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        require(_token != earnedtoken, \"!safe\");\n        require(_token != depositToken, \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeswapFarm.sol": {
      "content": "// contracts/interfaces/IPancakeswapFarm.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeswapFarm {\n    function poolLength() external view returns (uint256);\n\n    function userInfo() external view returns (uint256);\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\n\n    // View function to see pending CAKEs on frontend.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    // Deposit LP tokens to MasterChef for CAKE allocation.\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    // Withdraw LP tokens from MasterChef.\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    // Stake CAKE tokens to MasterChef\n    function enterStaking(uint256 _amount) external;\n\n    // Withdraw CAKE tokens from STAKING.\n    function leaveStaking(uint256 _amount) external;\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) external;\n}\n"
    },
    "contracts/interfaces/IPancakeRouter01.sol": {
      "content": "// contracts/interfaces/IPancakeRouter01.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/staking/BalleStakingPoolV1.sol": {
      "content": "// contracts/staking/BalleStakingPoolV1.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IBalleRewarder.sol\";\n\n/**\n * @dev Implementation of the BALLE Staking Pool.\n * This pool distributes platform performance fee.\n * The owner of the contract is the Governance Gnosis Safe multisig.\n */\ncontract BalleStakingPoolV1 is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Info of each user\n    struct UserInfo {\n        uint256 amount; // How many staked tokens the user has provided.\n        uint256 rewardDebt; // Reward debt.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of BALLEs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt\n        //\n        // Whenever a user stakes or withdraws tokens to the pool. Here's what happens:\n        //   1. The pool's `accTokenPerShare` and `lastRewardBlock` gets updated.\n        //   2. User receives the pending reward sent to his address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // The staked token.\n    address public immutable stakedToken;\n    // The reward token.\n    address public immutable rewardToken;\n    // The rewarder contract.\n    address public rewarder;\n    // The reward distribution contract.\n    address public rewardDistribution;\n    // Security Gnosis Safe multisig.\n    address public security;\n    // Accrued token per share.\n    uint256 public accTokenPerShare;\n    // The block number when rewards start.\n    uint256 public rewardStartBlock;\n    // The block number when rewards end.\n    uint256 public rewardEndBlock;\n    // The block number of the last pool update.\n    uint256 public lastRewardBlock;\n    // Reward tokens per block.\n    uint256 public rewardPerBlock;\n    // The extra reward multiplier applied over the amount from fees (100 = 1).\n    uint256 public extraRewardMultiplier;\n    // Total staked tokens amount.\n    uint256 public totalSupply;\n\n    // Info of each user that stakes tokens (stakedToken).\n    mapping(address => UserInfo) public userInfo;\n\n    // The pool is finished, no staking can be made and no more rewards will be distributed.\n    bool public finished;\n\n    event Deposit(address indexed user, uint256 amount, uint256 reward);\n    event Withdraw(address indexed user, uint256 amount, uint256 reward);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event RewardAdded(uint256 amount, uint256 numberOfBlocks, uint256 multiplier);\n    event RewardsStop();\n    event PoolFinish();\n\n    /**\n     * @dev BALLE Rewards staking pool.\n     * @param _stakedToken: staked token address.\n     * @param _rewardToken: reward token address.\n     * @param _rewardDistribution: reward distribution contract address.\n     */\n    constructor(\n        address _stakedToken,\n        address _rewardToken,\n        address _rewardDistribution\n    ) {\n        require(_stakedToken != address(0), \"!stakedToken\");\n        require(_rewardToken != address(0), \"!rewardToken\");\n        require(_rewardDistribution != address(0), \"!rewardDistribution\");\n\n        stakedToken = _stakedToken;\n        rewardToken = _rewardToken;\n        rewardDistribution = _rewardDistribution;\n    }\n\n    /**\n     * @dev Function to change the rewarder address.\n     */\n    function setRewarder(address _rewarder) external onlyOwner {\n        require(_rewarder != address(0), \"zero address\");\n        rewarder = _rewarder;\n    }\n\n    /**\n     * @dev Function to change the rewardDistribution address.\n     */\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\n        require(_rewardDistribution != address(0), \"zero address\");\n        rewardDistribution = _rewardDistribution;\n    }\n\n    /**\n     * @dev Function to change the Security Gnosis Safe multisig.\n     */\n    function setSecurity(address _security) external onlyOwner {\n        require(_security != address(0), \"zero address\");\n        security = _security;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address or the rewardDistribution.\n     */\n    modifier onlyRewardDistribution() {\n        require(msg.sender == rewardDistribution || msg.sender == owner(), \"!rewardDistribution\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance or Security Gnosis Safe multisig.\n     */\n    modifier onlySecurity() {\n        require(msg.sender == owner() || msg.sender == security, \"!security\");\n        _;\n    }\n\n    /**\n     * @dev Internal stake function.\n     * @param _amount: amount to stake (in stakedToken).\n     */\n    function _stake(uint256 _amount) internal {\n        require(_amount > 0, \"!amount\");\n        require(rewarder != address(0), \"!rewarder\");\n        require(!finished, \"finished\");\n        UserInfo storage user = userInfo[msg.sender];\n\n        updatePool();\n\n        uint256 pending = 0;\n        if (user.amount > 0) {\n            pending = (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt;\n        }\n\n        user.amount = user.amount + _amount;\n        totalSupply = totalSupply + _amount;\n        user.rewardDebt = (user.amount * accTokenPerShare) / 1e12;\n\n        if (pending > 0) {\n            IBalleRewarder(rewarder).sendReward(address(msg.sender), rewardToken, pending);\n        }\n        IERC20(stakedToken).safeTransferFrom(address(msg.sender), address(this), _amount);\n\n        emit Deposit(msg.sender, _amount, pending);\n    }\n\n    /**\n     * @dev Stake tokens to the pool and collect reward tokens (if any).\n     * @param _amount: amount to stake (in stakedToken).\n     */\n    function stake(uint256 _amount) external nonReentrant {\n        _stake(_amount);\n    }\n\n    /**\n     * @dev Stake all stakedToken balance on user wallet to the pool and collect reward tokens (if any).\n     */\n    function stakeAll() external nonReentrant {\n        _stake(IERC20(stakedToken).balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Internal withdraw\n     * @param _amount: amount to withdraw (in stakedToken).\n     */\n    function _withdraw(uint256 _amount) internal {\n        UserInfo storage user = userInfo[msg.sender];\n        if (_amount > user.amount) {\n            _amount = user.amount;\n        }\n\n        updatePool();\n\n        uint256 pending = (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt;\n\n        if (_amount > 0) {\n            // Take care of rounding issues.\n            uint256 bal = IERC20(stakedToken).balanceOf(address(this));\n            if (bal < _amount) {\n                _amount = bal;\n                user.amount = 0;\n                totalSupply = 0;\n            } else {\n                user.amount = user.amount - _amount;\n                totalSupply = totalSupply - _amount;\n            }\n            IERC20(stakedToken).safeTransfer(address(msg.sender), _amount);\n        }\n\n        if (pending > 0) {\n            IBalleRewarder(rewarder).sendReward(address(msg.sender), rewardToken, pending);\n        }\n        user.rewardDebt = (user.amount * accTokenPerShare) / 1e12;\n\n        emit Withdraw(msg.sender, _amount, pending);\n    }\n\n    /**\n     * @dev Withdraw staked tokens and collect reward tokens (if any).\n     * @param _amount: amount to withdraw (in stakedToken).\n     */\n    function withdraw(uint256 _amount) external nonReentrant {\n        _withdraw(_amount);\n    }\n\n    /**\n     * @dev Withdraw all user's staked tokens and collect reward (if any).\n     */\n    function withdrawAll() external nonReentrant {\n        _withdraw(type(uint256).max);\n    }\n\n    /**\n     * @dev Withdraw all staked tokens without caring about rewards. EMERGENCY ONLY.\n     */\n    function emergencyWithdraw() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 amountToTransfer = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        if (amountToTransfer > 0) {\n            // Take care of rounding issues.\n            uint256 bal = IERC20(stakedToken).balanceOf(address(this));\n            if (bal < amountToTransfer) {\n                amountToTransfer = bal;\n            }\n            totalSupply = totalSupply - amountToTransfer;\n            IERC20(stakedToken).safeTransfer(address(msg.sender), amountToTransfer);\n        }\n\n        emit EmergencyWithdraw(msg.sender, amountToTransfer);\n    }\n\n    /**\n     * @dev View function to see total staked value on frontend.\n     * @param _user: user address.\n     * @return Total staked for a given user.\n     */\n    function balanceOf(address _user) external view returns (uint256) {\n        return userInfo[_user].amount;\n    }\n\n    /**\n     * @dev View function to see pending reward on frontend.\n     * @param _user: user address.\n     * @return Pending reward for a given user.\n     */\n    function pendingReward(address _user) external view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        if (block.number > lastRewardBlock && totalSupply != 0) {\n            uint256 multiplier = getBlockMultiplier(lastRewardBlock, block.number);\n            uint256 reward = multiplier * rewardPerBlock;\n            uint256 adjustedTokenPerShare = accTokenPerShare + (reward * 1e12) / totalSupply;\n            return (user.amount * adjustedTokenPerShare) / 1e12 - user.rewardDebt;\n        } else {\n            return (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt;\n        }\n    }\n\n    /**\n     * @dev Update reward variables of the given pool to be up-to-date.\n     */\n    function updatePool() internal {\n        if (block.number <= lastRewardBlock) {\n            return;\n        }\n\n        totalSupply = IERC20(stakedToken).balanceOf(address(this));\n\n        if (totalSupply == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = getBlockMultiplier(lastRewardBlock, block.number);\n        uint256 reward = multiplier * rewardPerBlock;\n        accTokenPerShare = accTokenPerShare + (reward * 1e12) / totalSupply;\n        lastRewardBlock = block.number;\n    }\n\n    /**\n     * @dev Return reward multiplier over the given _from to _to block.\n     * @param _from: block to start.\n     * @param _to: block to finish.\n     */\n    function getBlockMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_from <= rewardStartBlock) {\n            if (_to > rewardStartBlock) {\n                _from = rewardStartBlock;\n            } else {\n                _from = _to;\n            }\n        }\n        if (_to <= rewardEndBlock) {\n            return _to - _from;\n        } else if (_from >= rewardEndBlock) {\n            return 0;\n        } else {\n            return rewardEndBlock - _from;\n        }\n    }\n\n    /**\n     * @dev Add reward to distribute.\n     * The funds should be transferred to the Rewarder contract.\n     * @param _amount: the reward amount to distribute.\n     * @param _numberOfBlocks: the num of blocks for the period of distribution.\n     * @param _multiplier: extra reward multiplier (100 = 1).\n     * @param _rewardStartBlock: only for the first distribution, start block of rewards.\n     */\n    function addReward(\n        uint256 _amount,\n        uint256 _numberOfBlocks,\n        uint256 _multiplier,\n        uint256 _rewardStartBlock\n    ) external onlyRewardDistribution {\n        require(_amount > 0, \"!amount\");\n        require(_numberOfBlocks >= (24 * 60 * 20), \"!numberOfBlocks\");\n        require(_multiplier >= 100, \"!multiplier\");\n        require(!finished, \"finished\");\n\n        updatePool();\n\n        if (block.number >= rewardEndBlock) {\n            // Previous reward period already finished.\n            rewardPerBlock = _amount / _numberOfBlocks;\n            if (rewardStartBlock == 0) {\n                if (_rewardStartBlock == 0) {\n                    rewardStartBlock = block.number;\n                } else {\n                    rewardStartBlock = _rewardStartBlock;\n                }\n            }\n        } else {\n            // Previous reward period still not finished, add leftover.\n            uint256 remaining = rewardEndBlock - block.number;\n            uint256 leftover = remaining * rewardPerBlock;\n            rewardPerBlock = (_amount + leftover) / _numberOfBlocks;\n        }\n        rewardEndBlock = block.number + _numberOfBlocks;\n        extraRewardMultiplier = _multiplier;\n\n        emit RewardAdded(_amount, _numberOfBlocks, _multiplier);\n    }\n\n    /**\n     * @dev Stop rewards.\n     */\n    function stopRewards() external onlySecurity {\n        rewardEndBlock = block.number;\n\n        emit RewardsStop();\n    }\n\n    /**\n     * @dev Finish pool.\n     */\n    function finish() external onlySecurity {\n        require(!finished, \"finished\");\n\n        if (rewardEndBlock > block.number) {\n            rewardEndBlock = block.number;\n        }\n        finished = true;\n\n        emit PoolFinish();\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOwner {\n        require(_to != address(0), \"zero address\");\n        require(_token != stakedToken, \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IBalleRewarder.sol": {
      "content": "// contracts/interfaces/IBalleRewarder.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IBalleRewarder {\n    // Send reward to the user.\n    function sendReward(\n        address user,\n        address token,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/staking/BalleRewardFund.sol": {
      "content": "// contracts/staking/BalleRewardFund.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @dev Implementation of the BALLE Reward Fund for the staking pool.\n * This contract will store BALLE from fees to be rewarded to BALLE holders via the staking pool.\n * The owner of the contract is the Governance Gnosis Safe multisig.\n */\ncontract BalleRewardFund is Ownable {\n    using SafeERC20 for IERC20;\n\n    // BALLE token address.\n    address public immutable balle;\n    // The reward distribution contract.\n    address public rewardDistribution;\n\n    constructor(address _balle) {\n        require(_balle != address(0), \"!balle\");\n\n        balle = _balle;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig or the rewardDistribution address.\n     */\n    modifier onlyRewardDistribution() {\n        require(msg.sender == owner() || msg.sender == rewardDistribution, \"!rewardDistribution\");\n        _;\n    }\n\n    /**\n     * @dev Function to change the rewardDistribution address.\n     */\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\n        require(_rewardDistribution != address(0), \"zero address\");\n        rewardDistribution = _rewardDistribution;\n    }\n\n    /**\n     * @dev Function to transfer tokens to the rewarder.\n     */\n    function sendRewardAmount(address _rewarder, uint256 _amount) external onlyRewardDistribution returns (uint256) {\n        require(_rewarder != address(0), \"!rewarder\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 balance = IERC20(balle).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        IERC20(balle).safeTransfer(_rewarder, _amount);\n\n        return _amount;\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_to != address(0), \"zero address\");\n        require(_token != address(balle), \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/staking/BalleRewarder.sol": {
      "content": "// contracts/staking/BalleRewarder.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @dev Implementation of the BALLE Rewarder for the staking pool.\n * This contract will send BALLE rewards to users.\n * It stores the BALLE being distributed in the current period from the staking pool.\n * The owner of the contract is the Governance Gnosis Safe multisig.\n */\ncontract BalleRewarder is Ownable {\n    using SafeERC20 for IERC20;\n\n    // BALLE token address.\n    address public immutable balle;\n    // The staking pool contract.\n    address public stakingPool;\n\n    constructor(address _balle, address _stakingPool) {\n        require(_balle != address(0), \"!balle\");\n        require(_stakingPool != address(0), \"!stakingPool\");\n\n        balle = _balle;\n        stakingPool = _stakingPool;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the owner address or the stakingPool.\n     */\n    modifier onlyStakingPool() {\n        require(msg.sender == owner() || msg.sender == stakingPool, \"!stakingPool\");\n        _;\n    }\n\n    /**\n     * @dev Function to change the stakingPool address.\n     */\n    function setStakingPool(address _stakingPool) external onlyOwner {\n        require(_stakingPool != address(0), \"zero address\");\n        stakingPool = _stakingPool;\n    }\n\n    /**\n     * @dev Function to send tokens to the user.\n     */\n    function sendReward(\n        address _user,\n        address _token,\n        uint256 _amount\n    ) external onlyStakingPool returns (uint256) {\n        require(_user != address(0), \"!user\");\n        require(_token == balle, \"!token\");\n        require(_amount > 0, \"!amount\");\n\n        uint256 balance = IERC20(balle).balanceOf(address(this));\n        if (_amount > balance) {\n            _amount = balance;\n        }\n\n        IERC20(balle).safeTransfer(_user, _amount);\n\n        return _amount;\n    }\n\n    /**\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\n     * There is no guarantee governance will vote to return these.\n     */\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public onlyOwner {\n        require(_to != address(0), \"zero address\");\n        require(_token != address(balle), \"!safe\");\n\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/WBNB.sol": {
      "content": "// contracts/mocks/WBNB.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WBNB is ERC20(\"Wrapped BNB\", \"WBNB\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/TokenB.sol": {
      "content": "// contracts/mocks/TokenB.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TokenB is ERC20(\"Token B\", \"TKNB\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/TokenA.sol": {
      "content": "// contracts/mocks/TokenA.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TokenA is ERC20(\"Token A\", \"TKNA\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/TestLP.sol": {
      "content": "// contracts/mocks/TestLP.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestLP is ERC20(\"TEST_LP\", \"TEST_LP\") {\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) public {\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/mocks/CakeLP.sol": {
      "content": "// contracts/mocks/CakeLP.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CakeLP is ERC20(\"CAKE_LP\", \"CAKE_LP\") {\n    address public token0;\n    address public token1;\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) public {\n        _burn(_from, _amount);\n    }\n\n    function initialize(address _token0, address _token1) public {\n        token0 = _token0;\n        token1 = _token1;\n    }\n}\n"
    },
    "contracts/mocks/CAKE.sol": {
      "content": "// contracts/mocks/CAKE.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CAKE is ERC20(\"CAKE\", \"CAKE\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/BALLE.sol": {
      "content": "// contracts/mocks/BALLE.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BALLE is ERC20 {\n    address public governance;\n    mapping(address => bool) public minters;\n\n    constructor(string memory _name, string memory _symbol) ERC20(string(_name), string(_symbol)) {\n        governance = msg.sender;\n    }\n\n    function mint(address account, uint256 amount) external {\n        require(minters[msg.sender], \"!minter\");\n        _mint(account, amount);\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function addMinter(address _minter) external {\n        require(msg.sender == governance, \"!governance\");\n        minters[_minter] = true;\n    }\n\n    function removeMinter(address _minter) external {\n        require(msg.sender == governance, \"!governance\");\n        minters[_minter] = false;\n    }\n}\n"
    },
    "contracts/mocks/MockRewardPot.sol": {
      "content": "// contracts/mocks/MockRewardPot.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockRewardPot {\n    using SafeERC20 for IERC20;\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) external {\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function withdrawBnb(address payable _to, uint256 _amount) external {\n        _to.transfer(_amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}