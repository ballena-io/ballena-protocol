{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IMintableERC20.sol": {
      "content": "// contracts/interfaces/IMintableERC20.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableERC20 is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/token/BalleMigration.sol": {
      "content": "// contracts/token/BalleMigration.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IMintableERC20.sol\";\n\ncontract BalleMigration {\n    IERC20 public balle;\n    IMintableERC20 public balleV2;\n\n    event Migrate(address indexed addr, uint256 amount);\n\n    constructor(address _balle, address _balleV2) {\n        require(_balle != address(0), \"BALLE address not valid\");\n        require(_balleV2 != address(0), \"BALLEv2 address not valid\");\n        require(_balle != _balleV2, \"Invalid address\");\n\n        balle = IERC20(_balle);\n        balleV2 = IMintableERC20(_balleV2);\n    }\n\n    /**\n     * @dev Transfer BALLE from wallet, and mint new BALLEv2 to wallet\n     */\n    function migrate() external {\n        require(block.number < 8234475, \"too late\"); // TODO: update with real end block!\n        uint256 amount = balle.balanceOf(msg.sender);\n        require(amount > 0, \"!amount\");\n        balle.transferFrom(msg.sender, address(this), amount);\n        balleV2.mint(msg.sender, amount);\n\n        emit Migrate(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/vaults/BalleMaster.sol": {
      "content": "// contracts/vaults/BalleMaster.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../token/BALLEv2.sol\";\nimport \"../interfaces/IStrategy.sol\";\n\n/**\n * @dev Implementation of the Master of BALLE.\n * This contract will take care of all rewards calculations and distribution of BALLE tokens in vaults.\n * It's ownable and the owner is the only who can manage the active vaults and it's parameters for rewards distribution.\n * The ownership will be transferred to the Governance GNOSIS Safe.\n */\ncontract BalleMaster is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Info of each vault\n    struct VaultInfo {\n        IERC20 depositToken; // Address of deposited token contract.\n        IERC20 wantToken; // Address of the token to maximize.\n        bool rewardsActive; // BALLE rewards active for this vault.\n        uint256 allocPoint; // How many allocation points assigned to this vault. BALLEs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that BALLEs distribution occurs.\n        uint256 accBallePerShare; // Accumulated BALLEs per share, times 1e12. See below.\n        address strat; // Address of the strategy contract that will maximize want tokens.\n    }\n\n    // Info of each user\n    struct UserInfo {\n        uint256 shares; // User shares of the vault.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of BALLEs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a vault. Here's what happens:\n        //   1. The vault's `accBallePerShare` and `lastRewardBlock` gets updated.\n        //   2. User receives the pending reward sent to his address.\n        //   3. User's `shares` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // The BALLE token.\n    BALLEv2 public balle;\n    // BALLE tokens created per block: 2283105022831050.\n    uint256 public ballePerBlock;\n    // BALLE tokens to distribute: 24000e18.\n    uint256 public balleTotalRewards;\n    // The block number when BALLE rewards distribution starts.\n    uint256 public startBlock;\n    // The block number when BALLE rewards distribution ends.\n    uint256 public endBlock;\n    // Total allocation points. Must be the sum of all allocation points in all vaults.\n    uint256 public totalAllocPoint = 0;\n    // BALLE to be minted for rewards.\n    uint256 public balleToMint = 0;\n\n    // Info of each vault.\n    VaultInfo[] public vaultInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    event ActivateRewards(uint256 indexed vid, uint256 allocPoint);\n    event ModifyRewards(uint256 indexed vid, uint256 allocPoint);\n    event DeactivateRewards(uint256 indexed vid);\n    event Deposit(address indexed user, uint256 indexed vid, uint256 amount, uint256 rewards);\n    event Withdraw(address indexed user, uint256 indexed vid, uint256 amount, uint256 rewards);\n    event EmergencyWithdraw(address indexed user, uint256 indexed vid, uint256 amount);\n\n    constructor(\n        BALLEv2 _balle,\n        uint256 _ballePerBlock,\n        uint256 _balleTotalRewards\n    ) {\n        balle = _balle;\n        ballePerBlock = _ballePerBlock;\n        balleTotalRewards = _balleTotalRewards;\n    }\n\n    /**\n     * @dev Modifier to check if the vault exists.\n     */\n    modifier vaultExists(uint256 pid) {\n        require(pid < vaultInfo.length, \"!vault\");\n        _;\n    }\n\n    /**\n     * @dev View function to get the number of vaults configured.\n     */\n    function vaultLength() external view returns (uint256) {\n        return vaultInfo.length;\n    }\n\n    /**\n     * @dev Function to add a new vault configuration. Can only be called by the owner.\n     */\n    function addVault(\n        IERC20 _depositToken,\n        IERC20 _wantToken,\n        address _strat\n    ) public onlyOwner {\n        vaultInfo.push(\n            VaultInfo({\n                depositToken: _depositToken,\n                wantToken: _wantToken,\n                rewardsActive: false,\n                allocPoint: 0,\n                lastRewardBlock: 0,\n                accBallePerShare: 0,\n                strat: _strat\n            })\n        );\n    }\n\n    /**\n     * @dev Function to activate vault rewards. Can only be called by the owner.\n     */\n    function activateVaultRewards(uint256 _vid, uint256 _allocPoint) public onlyOwner vaultExists(_vid) {\n        require(!vaultInfo[_vid].rewardsActive, \"active\");\n        require(_allocPoint > 0, \"!allocpoint\");\n\n        massUpdateVaults();\n\n        if (startBlock == 0) {\n            startBlock = block.number;\n            endBlock = startBlock + (balleTotalRewards / ballePerBlock);\n        }\n        uint256 lastRewardBlock = block.number;\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n\n        vaultInfo[_vid].allocPoint = _allocPoint;\n        vaultInfo[_vid].lastRewardBlock = lastRewardBlock;\n        vaultInfo[_vid].rewardsActive = true;\n        vaultInfo[_vid].accBallePerShare = 0;\n\n        emit ActivateRewards(_vid, _allocPoint);\n    }\n\n    /**\n     * @dev Function to modify vault rewards. Can only be called by the owner.\n     */\n    function modifyVaultRewards(uint256 _vid, uint256 _allocPoint) public onlyOwner vaultExists(_vid) {\n        require(vaultInfo[_vid].rewardsActive, \"!active\");\n        require(_allocPoint > 0, \"!allocpoint\");\n\n        massUpdateVaults();\n\n        totalAllocPoint = totalAllocPoint - vaultInfo[_vid].allocPoint + _allocPoint;\n        vaultInfo[_vid].allocPoint = _allocPoint;\n\n        emit ModifyRewards(_vid, _allocPoint);\n    }\n\n    /**\n     * @dev Function to deactivate vault rewards. Can only be called by the owner.\n     */\n    function deactivateVaultRewards(uint256 _vid) public onlyOwner vaultExists(_vid) {\n        require(vaultInfo[_vid].rewardsActive, \"!active\");\n\n        massUpdateVaults();\n\n        totalAllocPoint = totalAllocPoint - vaultInfo[_vid].allocPoint;\n        vaultInfo[_vid].allocPoint = 0;\n        vaultInfo[_vid].rewardsActive = false;\n\n        emit DeactivateRewards(_vid);\n    }\n\n    /**\n     * @dev View function to calculate the reward multiplier over the given _from to _to block.\n     */\n    function getBlockMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to < _from) {\n            return 0;\n        }\n        if (_to < startBlock) {\n            return 0;\n        }\n        if (_from > endBlock) {\n            return 0;\n        }\n        if (_from < startBlock) {\n            _from = startBlock;\n        }\n        if (_to > endBlock) {\n            _to = endBlock;\n        }\n        return _to - _from;\n    }\n\n    /**\n     * @dev View function to see pending BALLE on frontend.\n     */\n    function pendingBalle(uint256 _vid, address _user) external view returns (uint256) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][_user];\n        uint256 accBallePerShare = vault.accBallePerShare;\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        if (vault.rewardsActive && block.number > vault.lastRewardBlock && sharesTotal != 0) {\n            uint256 multiplier = getBlockMultiplier(vault.lastRewardBlock, block.number);\n            uint256 balleReward = (multiplier * ballePerBlock * vault.allocPoint) / totalAllocPoint;\n            accBallePerShare = accBallePerShare + (balleReward * 1e12) / sharesTotal;\n        }\n        return (user.shares * accBallePerShare) / 1e12 - user.rewardDebt;\n    }\n\n    /**\n     * @dev View function to see staked (LP) tokens on frontend.\n     */\n    function stakedTokens(uint256 _vid, address _user) external view returns (uint256) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][_user];\n\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n        if (sharesTotal == 0) {\n            return 0;\n        }\n        return (user.shares * depositTotal) / sharesTotal;\n    }\n\n    /**\n     * @dev Function to update reward variables for all vaults. Be careful of gas spending!\n     */\n    function massUpdateVaults() internal {\n        uint256 length = vaultInfo.length;\n        for (uint256 vid = 0; vid < length; ++vid) {\n            updateVault(vid);\n        }\n    }\n\n    /**\n     * @dev Function to update reward variables of the given vault to be up-to-date.\n     */\n    function updateVault(uint256 _vid) internal {\n        VaultInfo storage vault = vaultInfo[_vid];\n        if (!vault.rewardsActive) {\n            return;\n        }\n        if (block.number <= vault.lastRewardBlock) {\n            return;\n        }\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        if (sharesTotal == 0) {\n            vault.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getBlockMultiplier(vault.lastRewardBlock, block.number);\n        if (multiplier <= 0) {\n            return;\n        }\n        uint256 balleReward = (multiplier * ballePerBlock * vault.allocPoint) / totalAllocPoint;\n        balleToMint = balleToMint + balleReward;\n\n        vault.accBallePerShare = vault.accBallePerShare + (balleReward * 1e12) / sharesTotal;\n        vault.lastRewardBlock = block.number;\n    }\n\n    /**\n     * @dev Function that moves tokens from user -> BalleMaster (BALLE allocation) -> Strat (compounding).\n     */\n    function _deposit(uint256 _vid, uint256 _amount) internal {\n        updateVault(_vid);\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][msg.sender];\n\n        uint256 pending;\n        if (user.shares > 0) {\n            pending = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt;\n            if (pending > 0) {\n                safeBalleTransfer(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            vault.depositToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            vault.depositToken.safeIncreaseAllowance(vault.strat, _amount);\n            uint256 sharesAdded = IStrategy(vaultInfo[_vid].strat).deposit(_amount);\n            user.shares = user.shares + sharesAdded;\n        }\n        user.rewardDebt = (user.shares * vault.accBallePerShare) / 1e12;\n        emit Deposit(msg.sender, _vid, _amount, pending);\n    }\n\n    /**\n     * @dev Function that deposits user tokens.\n     */\n    function deposit(uint256 _vid, uint256 _amount) public nonReentrant vaultExists(_vid) {\n        _deposit(_vid, _amount);\n    }\n\n    /**\n     * @dev Function that deposits all user tokens balance.\n     */\n    function depositAll(uint256 _vid) public nonReentrant {\n        VaultInfo storage vault = vaultInfo[_vid];\n        _deposit(_vid, vault.depositToken.balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Function that performs the withdrawal.\n     */\n    function _withdraw(uint256 _vid, uint256 _amount) internal {\n        updateVault(_vid);\n\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][msg.sender];\n\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n\n        require(sharesTotal > 0, \"!sharesTotal\");\n        require(user.shares > 0, \"!user.shares\");\n\n        // Withdraw pending BALLE\n        uint256 pending = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt;\n        if (pending > 0) {\n            safeBalleTransfer(msg.sender, pending);\n        }\n\n        // Withdraw tokens\n        uint256 amount = (user.shares * depositTotal) / sharesTotal;\n        if (_amount > amount) {\n            _amount = amount;\n        }\n        if (_amount > 0) {\n            (uint256 sharesRemoved, uint256 depositRemoved, uint256 wantRemoved) =\n                IStrategy(vault.strat).withdraw(_amount);\n\n            if (sharesRemoved > user.shares) {\n                user.shares = 0;\n            } else {\n                user.shares = user.shares - sharesRemoved;\n            }\n\n            uint256 depositBal = IERC20(vault.depositToken).balanceOf(address(this));\n            if (depositBal < depositRemoved) {\n                depositRemoved = depositBal;\n            }\n            vault.depositToken.safeTransfer(address(msg.sender), depositRemoved);\n\n            if (vault.depositToken != vault.wantToken) {\n                uint256 wantBal = IERC20(vault.wantToken).balanceOf(address(this));\n                if (wantBal < wantRemoved) {\n                    wantRemoved = wantBal;\n                }\n                vault.wantToken.safeTransfer(address(msg.sender), wantRemoved);\n            }\n        }\n        user.rewardDebt = (user.shares * vault.accBallePerShare) / 1e12;\n        emit Withdraw(msg.sender, _vid, _amount, pending);\n    }\n\n    /**\n     * @dev Function that withdraws user tokens.\n     */\n    function withdraw(uint256 _vid, uint256 _amount) public nonReentrant vaultExists(_vid) {\n        _withdraw(_vid, _amount);\n    }\n\n    /**\n     * @dev Function that withdraws all user tokens balance.\n     */\n    function withdrawAll(uint256 _vid) public nonReentrant {\n        _withdraw(_vid, type(uint256).max);\n    }\n\n    /**\n     * @dev Function that withdraws without caring about rewards. EMERGENCY ONLY.\n     */\n    function emergencyWithdraw(uint256 _vid) public nonReentrant vaultExists(_vid) {\n        VaultInfo storage vault = vaultInfo[_vid];\n        UserInfo storage user = userInfo[_vid][msg.sender];\n\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\n        uint256 amount = (user.shares * depositTotal) / sharesTotal;\n        user.shares = 0;\n        user.rewardDebt = 0;\n\n        // TODO consider implementing emergencyWithdraw on strategy too.\n        IStrategy(vault.strat).withdraw(amount);\n\n        uint256 lpBal = IERC20(vault.depositToken).balanceOf(address(this));\n        if (lpBal < amount) {\n            amount = lpBal;\n        }\n        vault.depositToken.safeTransfer(address(msg.sender), amount);\n\n        emit EmergencyWithdraw(msg.sender, _vid, amount);\n    }\n\n    /**\n     * @dev Function for Safe BALLE transfer.\n     * Will mint BALLE when needed and take care if rounding error causes pool to not have enough BALLE.\n     */\n    function safeBalleTransfer(address _to, uint256 _amount) internal {\n        uint256 balleBal = balle.balanceOf(address(this));\n        if (_amount > balleBal) {\n            if (balleToMint > 0) {\n                balle.mint(address(this), balleToMint);\n                balleToMint = 0;\n                balleBal = balle.balanceOf(address(this));\n                if (_amount > balleBal) {\n                    balle.transfer(_to, balleBal);\n                } else {\n                    balle.transfer(_to, _amount);\n                }\n            } else {\n                balle.transfer(_to, balleBal);\n            }\n        } else {\n            balle.transfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @dev Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\n     */\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public onlyOwner {\n        require(_token != address(balle), \"!safe\");\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/token/BALLEv2.sol": {
      "content": "// contracts/token/BALLEv2.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract BALLEv2 is ERC20 {\n    using SafeERC20 for IERC20;\n\n    address public governance;\n    mapping(address => bool) public minters;\n    uint256 public immutable cap;\n\n    event SetGovernance(address indexed addr);\n    event AddMinter(address indexed addr);\n    event RemoveMinter(address indexed addr);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _cap\n    ) ERC20(string(_name), string(_symbol)) {\n        require(_cap > 0, \"BALLE: cap is 0\");\n        cap = _cap;\n        governance = msg.sender;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the governance address\n     */\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"!governance\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check the caller is the governance address or an authorized minter\n     */\n    modifier onlyMinter() {\n        require(msg.sender == governance || minters[msg.sender], \"!governance && !minter\");\n        _;\n    }\n\n    /**\n     * @dev Set the new governance address\n     */\n    function setGovernance(address _governance) external onlyGovernance {\n        require(_governance != address(0), \"zero address\");\n        governance = _governance;\n        emit SetGovernance(_governance);\n    }\n\n    /**\n     * @dev Add a minter address\n     */\n    function addMinter(address _minter) external onlyGovernance {\n        require(_minter != address(0), \"zero address\");\n        minters[_minter] = true;\n        emit AddMinter(_minter);\n    }\n\n    /**\n     * @dev Remove a minter address\n     */\n    function removeMinter(address _minter) external onlyGovernance {\n        require(_minter != address(0), \"zero address\");\n        minters[_minter] = false;\n        emit RemoveMinter(_minter);\n    }\n\n    /**\n     * @dev Creates _amount tokens and assigns them to _to account, increasing\n     * the total supply until the cap is reached.\n     */\n    function mint(address _to, uint256 _amount) external onlyMinter {\n        require(ERC20.totalSupply() + _amount <= cap, \"!cap\");\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @dev Allows governance to take unsupported tokens out of the contract. This is just in case someone seriously messed up.\n     * There is no guarantee governance will vote to return these.\n     */\n    function governanceRecoverUnsupported(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external onlyGovernance {\n        require(_to != address(0), \"zero address\");\n        _token.safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// contracts/interfaces/IStrategy.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\ninterface IStrategy {\n    // Total tokens managed by strategy\n    function depositTotal() external view returns (uint256);\n\n    // Sum of all shares of users to depositTotal\n    function sharesTotal() external view returns (uint256);\n\n    // Main harvest function\n    function harvest() external;\n\n    // Transfer tokens BalleMaster -> strategy\n    function deposit(uint256 _amount) external returns (uint256);\n\n    // Transfer tokens strategy -> BalleMaster\n    function withdraw(uint256 _amount)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overloaded;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/test/TestStrategy.sol": {
      "content": "// contracts/mocks/TestStrategy.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IMintableERC20.sol\";\n\ncontract TestStrategy is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public balleMaster;\n    address public depositToken;\n    address public wantToken;\n    address public govAddress;\n    uint256 public depositTotal = 0;\n    uint256 public sharesTotal = 0;\n    uint256 public wantTotal = 0;\n\n    /**\n     * @dev Implementation of strategy for testing.\n     * The strategy will \"mine\" TEST_LP tokens to simulate a working farm for testing purpouses.\n     * It's very simple to facilitate testing. Every time it's harvested, it will add 1% to TEST_LP balance.\n     * Will be improved to test fee distribution, etc.\n     */\n    constructor(\n        address _balleMaster,\n        address _depositToken,\n        address _wantToken\n    ) {\n        balleMaster = _balleMaster;\n        depositToken = _depositToken;\n        wantToken = _wantToken;\n\n        govAddress = msg.sender;\n        transferOwnership(_balleMaster);\n    }\n\n    /**\n     * @dev Function to harvest benefits and implement strategy steps.\n     * It will increase deposited tokens by 1% every time it's called.\n     */\n    function harvest() external {\n        require(msg.sender == govAddress, \"!gov\");\n\n        if (depositTotal == 0) {\n            return;\n        }\n\n        uint256 earned = IERC20(depositToken).balanceOf(address(this)) / 100;\n        if (depositToken == wantToken) {\n            // autocompounding strategy\n            depositTotal = depositTotal + earned;\n            IMintableERC20(depositToken).mint(address(this), earned);\n        } else {\n            // wantToken maximizer strategy\n            wantTotal = wantTotal + earned;\n            IMintableERC20(wantToken).mint(address(this), earned);\n        }\n    }\n\n    /**\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\n     * It will leave the tokens here, strategy only for testing purpouses.\n     */\n    function deposit(uint256 _amount) public onlyOwner returns (uint256) {\n        require(_amount > 0, \"!amount\");\n\n        IERC20(depositToken).safeTransferFrom(address(msg.sender), address(this), _amount);\n\n        uint256 sharesAdded = _amount;\n        if (depositTotal > 0) {\n            sharesAdded = (_amount * sharesTotal) / depositTotal;\n        }\n        sharesTotal = sharesTotal + sharesAdded;\n        depositTotal = depositTotal + _amount;\n        return sharesAdded;\n    }\n\n    /**\n     * @dev Function to transfer tokens strategy -> BalleMaster.\n     */\n    function withdraw(uint256 _amount)\n        public\n        onlyOwner\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(_amount > 0, \"!amount\");\n\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\n        if (_amount > depositAmt) {\n            _amount = depositAmt;\n        }\n\n        if (depositTotal < _amount) {\n            _amount = depositTotal;\n        }\n\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        uint256 wantAmount = (wantTotal * sharesRemoved) / sharesTotal;\n        sharesTotal = sharesTotal - sharesRemoved;\n        depositTotal = depositTotal - _amount;\n        wantTotal = wantTotal - wantAmount;\n\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\n        if (depositToken != wantToken) {\n            IERC20(wantToken).safeTransfer(msg.sender, wantAmount);\n        }\n\n        return (sharesRemoved, _amount, wantAmount);\n    }\n\n    function setGov(address _govAddress) public {\n        require(msg.sender == govAddress, \"!gov\");\n        govAddress = _govAddress;\n    }\n\n    function inCaseTokensGetStuck(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) public {\n        require(msg.sender == govAddress, \"!gov\");\n        require(_token != wantToken, \"!safe\");\n        require(_token != depositToken, \"!safe\");\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/mocks/TokenB.sol": {
      "content": "// contracts/mocks/TokenB.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TokenB is ERC20(\"Token B\", \"TKNB\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/TokenA.sol": {
      "content": "// contracts/mocks/TokenA.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TokenA is ERC20(\"Token A\", \"TKNA\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/TestLP.sol": {
      "content": "// contracts/mocks/TestLP.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestLP is ERC20(\"TEST_LP\", \"TEST_LP\") {\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) public {\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/mocks/CakeLP.sol": {
      "content": "// contracts/mocks/CakeLP.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CakeLP is ERC20(\"CAKE_LP\", \"CAKE_LP\") {\n    address public token0;\n    address public token1;\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) public {\n        _burn(_from, _amount);\n    }\n\n    function initialize(address _token0, address _token1) public {\n        token0 = _token0;\n        token1 = _token1;\n    }\n}\n"
    },
    "contracts/mocks/CAKE.sol": {
      "content": "// contracts/mocks/CAKE.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CAKE is ERC20(\"CAKE\", \"CAKE\") {\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/BALLE.sol": {
      "content": "// contracts/mocks/BALLE.sol\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BALLE is ERC20 {\n    address public governance;\n    mapping(address => bool) public minters;\n\n    constructor(string memory _name, string memory _symbol) ERC20(string(_name), string(_symbol)) {\n        governance = msg.sender;\n    }\n\n    function mint(address account, uint256 amount) external {\n        require(minters[msg.sender], \"!minter\");\n        _mint(account, amount);\n    }\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!governance\");\n        governance = _governance;\n    }\n\n    function addMinter(address _minter) external {\n        require(msg.sender == governance, \"!governance\");\n        minters[_minter] = true;\n    }\n\n    function removeMinter(address _minter) external {\n        require(msg.sender == governance, \"!governance\");\n        minters[_minter] = false;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}