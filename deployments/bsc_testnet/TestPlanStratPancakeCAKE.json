{
  "address": "0x3a4722A9F74fA3d5f1975178782F925F8bbf15A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_earnedtokenToBallePath",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryAmount",
          "type": "uint256"
        }
      ],
      "name": "DistributeFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE_LL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_FACTOR_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERFORMANCE_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERFORMANCE_FEE_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLIPPAGE_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "addHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earnedtokenToBallePath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingEarnedToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "removeHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operations",
          "type": "address"
        }
      ],
      "name": "setOperations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0d196abb79e44a7ad49252d95e63c46f52676756f7961b6c77abde9f8e3adbb",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0x3a4722A9F74fA3d5f1975178782F925F8bbf15A9",
    "transactionIndex": 0,
    "gasUsed": "2471104",
    "logsBloom": "0x
    "blockHash": "0x68cd8d4a51fe4817d5e488761847991a33d8e41a627b7073c4aeb8e8347ccc25",
    "transactionHash": "0xd0d196abb79e44a7ad49252d95e63c46f52676756f7961b6c77abde9f8e3adbb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10105069,
        "transactionHash": "0xd0d196abb79e44a7ad49252d95e63c46f52676756f7961b6c77abde9f8e3adbb",
        "address": "0x3a4722A9F74fA3d5f1975178782F925F8bbf15A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x68cd8d4a51fe4817d5e488761847991a33d8e41a627b7073c4aeb8e8347ccc25"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10105069,
        "transactionHash": "0xd0d196abb79e44a7ad49252d95e63c46f52676756f7961b6c77abde9f8e3adbb",
        "address": "0x3a4722A9F74fA3d5f1975178782F925F8bbf15A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355",
          "0x000000000000000000000000943e160e966e35f15c8d964e1fe05e37867d5671"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x68cd8d4a51fe4817d5e488761847991a33d8e41a627b7073c4aeb8e8347ccc25"
      }
    ],
    "blockNumber": 10105069,
    "cumulativeGasUsed": "2471104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
      "0x91E85122eF92FF306EA47025efd00404CcaEEb19",
      "0x943e160E966e35F15c8D964e1FE05E37867D5671",
      "0xb25D37892305FE1b44c06F035139a0ED11EcA82d",
      "0x783557C3A2E98D58A9c6A0Fa10a475fcad62477f",
      "0x8ADB7044d41aC5B378281e0ebd9CD6eAC43a53F8"
    ],
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
      "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b"
    ]
  ],
  "solcInputHash": "b6aab1b20968a97e80e054f3733bdbe2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_earnedtokenToBallePath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE_LL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"addHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedtokenToBallePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEarnedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"removeHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operations\",\"type\":\"address\"}],\"name\":\"setOperations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the PancakeSwap Cake Strategy. This contract will compound Cake staking. The owner of the contract is the BalleMaster contract.\",\"kind\":\"dev\",\"methods\":{\"addHarvester(address)\":{\"details\":\"Add a harvester address.\"},\"constructor\":{\"details\":\"Implementation of PancakeSwap Cake autocompounding strategy.\"},\"deposit(address,uint256)\":{\"details\":\"Function to transfer tokens BalleMaster -> strategy and put it to work.\"},\"harvest()\":{\"details\":\"Function to harvest earnings and reinvest.\"},\"inCaseTokensGetStuck(address,uint256,address)\":{\"details\":\"Function to use from Governance Gnosis Safe multisig only in case tokens get stuck. This is to be used if someone, for example, sends tokens to the contract by mistake. There is no guarantee governance will vote to return these.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"panic()\":{\"details\":\"Stop the vault with emergencyWithdraw from farm.\"},\"pause()\":{\"details\":\"Stop the vault.\"},\"pendingEarnedToken()\":{\"details\":\"View function to see pending CAKEs on farm.\"},\"removeHarvester(address)\":{\"details\":\"Remove a harvester address.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"retire()\":{\"details\":\"Retire the vault.\"},\"setGovernance(address)\":{\"details\":\"Function to change the Governance Gnosis Safe multisig.\"},\"setOperations(address)\":{\"details\":\"Function to change the Operations Gnosis Safe multisig.\"},\"setRewards(address)\":{\"details\":\"Function to change the rewards address.\"},\"setSettings(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Function to change strategy settings.\"},\"setTreasury(address)\":{\"details\":\"Function to change the treasury address.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Restart the vault.\"},\"withdraw(address,uint256)\":{\"details\":\"Function to transfer tokens strategy -> BalleMaster.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StratPancakeCakeV1.sol\":\"StratPancakeCakeV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// contracts/interfaces/IPancakeRouter01.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xaabb10e62d52c3c3b172d2ca712f2eb26e67d6fd04f143a1cac2e3b2d1594fd0\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeswapFarm.sol\":{\"content\":\"// contracts/interfaces/IPancakeswapFarm.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeswapFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\",\"keccak256\":\"0x14a6c4dce2a653a262b585f434be731f622fe55d4f670c275ab618f2c185a0dd\",\"license\":\"MIT\"},\"contracts/strategies/StratPancakeCakeV1.sol\":{\"content\":\"// contracts/strategies/StratPancakeCakeV1.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IPancakeswapFarm.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter01.sol\\\";\\n\\n/**\\n * @dev Implementation of the PancakeSwap Cake Strategy.\\n * This contract will compound Cake staking.\\n * The owner of the contract is the BalleMaster contract.\\n */\\ncontract StratPancakeCakeV1 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // PancakeSwap's MasterChef address.\\n    address public immutable masterChef;\\n    // Deposit token (CAKE) address.\\n    address public immutable depositToken;\\n    // PancakeSwap router address.\\n    address public immutable router;\\n\\n    // Address to send controller fee.\\n    address public rewards;\\n    // Address to send treasury fee.\\n    address public treasury;\\n\\n    // Governance Gnosis Safe multisig.\\n    address public governance;\\n    // Operations Gnosis Safe multisig.\\n    address public operations;\\n    // Harvest addresses\\n    mapping(address => bool) public harvesters;\\n\\n    uint256 public depositTotal = 0;\\n    uint256 public sharesTotal = 0;\\n\\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\\n    uint256 public entranceFee = 9990;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\\n    // 0.5% max settable entrance fee, LL = lowerlimit.\\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\\n\\n    // 4% performance fee.\\n    uint256 public performanceFee = 400;\\n    // 8% max settable performance fee, UL = upperlimit.\\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\\n    // 3% goes to BALLE holders.\\n    uint256 public rewardsFeeFactor = 750;\\n    // 1% goes to treasury.\\n    uint256 public treasuryFeeFactor = 250;\\n    // Factor for fee distribution.\\n    uint256 public constant FEE_FACTOR_MAX = 1000;\\n\\n    // 5% default slippage tolerance.\\n    uint256 public slippage = 950;\\n    // 10% max settable slippage tolerance, UL = upperlimit.\\n    uint256 public constant SLIPPAGE_UL = 990;\\n\\n    // Swap routes\\n    address[] public earnedtokenToBallePath;\\n\\n    // Paused state activated\\n    bool public paused = false;\\n\\n    event SetSettings(\\n        uint256 entranceFee,\\n        uint256 performanceFee,\\n        uint256 rewardsFeeFactor,\\n        uint256 treasuryFeeFactor,\\n        uint256 slippage\\n    );\\n    event Harvest(uint256 amount);\\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\\n    event SetGovernance(address indexed addr);\\n\\n    /**\\n     * @dev Implementation of PancakeSwap Cake autocompounding strategy.\\n     */\\n    constructor(address[] memory _addresses, address[] memory _earnedtokenToBallePath) {\\n        depositToken = _addresses[0];\\n        router = _addresses[1];\\n        masterChef = _addresses[2];\\n\\n        governance = msg.sender;\\n        harvesters[_addresses[4]] = true;\\n        rewards = _addresses[5];\\n        treasury = _addresses[6];\\n\\n        earnedtokenToBallePath = _earnedtokenToBallePath;\\n\\n        // The owner of the strategy contract is the BalleMaster contract\\n        transferOwnership(_addresses[3]);\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig.\\n     */\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig.\\n     */\\n    modifier onlyOperations() {\\n        require(msg.sender == operations || msg.sender == governance, \\\"!operations\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance or Operations Gnosis Safe multisig or an authorized harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(harvesters[msg.sender] || msg.sender == operations || msg.sender == governance, \\\"!harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the strategy is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the strategy is paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused, \\\"!paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev View function to see pending CAKEs on farm.\\n     */\\n    function pendingEarnedToken() external view returns (uint256) {\\n        return IPancakeswapFarm(masterChef).pendingCake(0, address(this));\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\\n     */\\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 sharesAdded = _amount;\\n        if (depositTotal > 0 && sharesTotal > 0) {\\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\\n        }\\n        sharesTotal = sharesTotal + sharesAdded;\\n\\n        farm();\\n\\n        return sharesAdded;\\n    }\\n\\n    /**\\n     * @dev Function to send depositToken to farm.\\n     */\\n    function farm() internal {\\n        bool first = (depositTotal == 0);\\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\\n        depositTotal = depositTotal + amount;\\n\\n        if (first) {\\n            // On first farming, set allowances\\n            setAllowances();\\n        }\\n        IPancakeswapFarm(masterChef).enterStaking(amount);\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens strategy -> BalleMaster.\\n     */\\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        require(_amount > 0, \\\"!amount\\\");\\n\\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal - sharesRemoved;\\n\\n        // If paused, tokens are already here\\n        if (!paused) {\\n            IPancakeswapFarm(masterChef).leaveStaking(_amount);\\n        }\\n\\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\\n        if (_amount > balance) {\\n            _amount = balance;\\n        }\\n\\n        if (depositTotal < _amount) {\\n            _amount = depositTotal;\\n        }\\n\\n        depositTotal = depositTotal - _amount;\\n\\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\\n\\n        return (sharesRemoved, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to harvest earnings and reinvest.\\n     */\\n    function harvest() public onlyHarvester whenNotPaused nonReentrant {\\n        // Harvest farm tokens\\n        IPancakeswapFarm(masterChef).leaveStaking(0);\\n        uint256 earnedAmt = IERC20(depositToken).balanceOf(address(this));\\n\\n        emit Harvest(earnedAmt);\\n\\n        // Distribute the fees\\n        earnedAmt = distributeFees(earnedAmt);\\n\\n        farm();\\n    }\\n\\n    /**\\n     * @dev Function to calculate and distribute the fees.\\n     */\\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\\n        if (_earnedAmt > 0) {\\n            // Performance fee\\n            if (performanceFee > 0) {\\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\\n\\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\\n                // Swap treasuryFee to BALLE and send to treasury.\\n                safeSwap(\\n                    router,\\n                    treasuryFee,\\n                    slippage,\\n                    earnedtokenToBallePath,\\n                    treasury,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + 600\\n                );\\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\\n                // Swap rewardsFee to BALLE and send to rewards contract.\\n                safeSwap(\\n                    router,\\n                    rewardsFee,\\n                    slippage,\\n                    earnedtokenToBallePath,\\n                    rewards,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + 600\\n                );\\n\\n                _earnedAmt = _earnedAmt - totalFee;\\n\\n                emit DistributeFees(rewardsFee, treasuryFee);\\n            }\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    /**\\n     * @dev Function to change strategy settings.\\n     */\\n    function setSettings(\\n        uint256 _entranceFee,\\n        uint256 _performanceFee,\\n        uint256 _rewardsFeeFactor,\\n        uint256 _treasuryFeeFactor,\\n        uint256 _slippage\\n    ) public onlyOperations {\\n        require(_entranceFee >= ENTRANCE_FEE_LL, \\\"!entranceFeeLL\\\");\\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \\\"!entranceFeeMax\\\");\\n        entranceFee = _entranceFee;\\n\\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \\\"!performanceFeeUL\\\");\\n        performanceFee = _performanceFee;\\n\\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \\\"!feeFactor\\\");\\n        rewardsFeeFactor = _rewardsFeeFactor;\\n        treasuryFeeFactor = _treasuryFeeFactor;\\n\\n        require(_slippage <= SLIPPAGE_UL, \\\"!slippageUL\\\");\\n        slippage = _slippage;\\n\\n        emit SetSettings(_entranceFee, _performanceFee, _rewardsFeeFactor, _treasuryFeeFactor, _slippage);\\n    }\\n\\n    /**\\n     * @dev Function to change the Governance Gnosis Safe multisig.\\n     */\\n    function setGovernance(address _governance) public onlyGovernance {\\n        require(_governance != address(0), \\\"zero address\\\");\\n        governance = _governance;\\n        emit SetGovernance(_governance);\\n    }\\n\\n    /**\\n     * @dev Function to change the Operations Gnosis Safe multisig.\\n     */\\n    function setOperations(address _operations) public onlyGovernance {\\n        require(_operations != address(0), \\\"zero address\\\");\\n        operations = _operations;\\n    }\\n\\n    /**\\n     * @dev Function to change the rewards address.\\n     */\\n    function setRewards(address _rewards) public onlyGovernance {\\n        require(_rewards != address(0), \\\"zero address\\\");\\n        rewards = _rewards;\\n    }\\n\\n    /**\\n     * @dev Function to change the treasury address.\\n     */\\n    function setTreasury(address _treasury) public onlyGovernance {\\n        require(_treasury != address(0), \\\"zero address\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @dev Add a harvester address.\\n     */\\n    function addHarvester(address _harvester) external onlyOperations {\\n        require(_harvester != address(0), \\\"zero address\\\");\\n        harvesters[_harvester] = true;\\n    }\\n\\n    /**\\n     * @dev Remove a harvester address.\\n     */\\n    function removeHarvester(address _harvester) external onlyOperations {\\n        require(_harvester != address(0), \\\"zero address\\\");\\n        harvesters[_harvester] = false;\\n    }\\n\\n    /**\\n     * @dev Utility function for setting allowances with third party contracts.\\n     */\\n    function setAllowances() internal {\\n        // Approve token transfers, check if 0 before setting\\n        if (IERC20(depositToken).allowance(address(this), masterChef) == 0) {\\n            IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\\n        }\\n        if (IERC20(depositToken).allowance(address(this), router) == 0) {\\n            IERC20(depositToken).safeApprove(router, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Utility function for clearing allowances with third party contracts.\\n     */\\n    function clearAllowances() internal {\\n        // Disapprove token transfers\\n        IERC20(depositToken).safeApprove(masterChef, 0);\\n        IERC20(depositToken).safeApprove(router, 0);\\n    }\\n\\n    /**\\n     * @dev Utility function for safely swap tokens.\\n     */\\n    function safeSwap(\\n        address _router,\\n        uint256 _amountIn,\\n        uint256 _slippage,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline\\n    ) internal {\\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length - 1];\\n\\n        IPancakeRouter01(_router).swapExactTokensForTokens(\\n            _amountIn,\\n            (amountOut * _slippage) / 1000,\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @dev Stop the vault.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Internal function for stopping the vault.\\n     */\\n    function _pause() internal {\\n        if (!paused) {\\n            paused = true;\\n\\n            if (depositTotal > 0) {\\n                // Withdraw all from staking pool\\n                IPancakeswapFarm(masterChef).leaveStaking(depositTotal);\\n            }\\n\\n            // Clear allowances of third party contracts.\\n            clearAllowances();\\n        }\\n    }\\n\\n    /**\\n     * @dev Restart the vault.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        depositTotal = 0; // It will be set back on farm().\\n        paused = false;\\n\\n        farm();\\n    }\\n\\n    /**\\n     * @dev Stop the vault with emergencyWithdraw from farm.\\n     */\\n    function panic() external onlyOwner whenNotPaused {\\n        paused = true;\\n\\n        // Emergency withdraw.\\n        IPancakeswapFarm(masterChef).emergencyWithdraw(0);\\n\\n        // Clear allowances of third party contracts.\\n        clearAllowances();\\n    }\\n\\n    /**\\n     * @dev Retire the vault.\\n     */\\n    function retire() external onlyOwner {\\n        // Stop vault\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\\n     * There is no guarantee governance will vote to return these.\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyGovernance {\\n        require(_to != address(0), \\\"zero address\\\");\\n        require(_token != depositToken, \\\"!safe\\\");\\n\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa65dca9d0ed23fe45009fac8a98ccf4c26201a9833590c0fcde42a9253e1a3ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260006007819055600855612706600955610190600a556102ee600b5560fa600c556103b6600d55600f805460ff191690553480156200004257600080fd5b5060405162002c4c38038062002c4c833981016040819052620000659162000532565b600080546001600160a01b0319163390811782556040519091829160008051602062002c2c833981519152908290a3506001805581518290600090620000bb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031660a0816001600160a01b031660601b81525050816001815181106200010157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031660c0816001600160a01b031660601b81525050816002815181106200014757634e487b7160e01b600052603260045260246000fd5b602090810291909101015160601b6001600160601b03191660805260048054336001600160a01b0319909116178155825160019160069160009186918110620001a057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550816005815181106200020157634e487b7160e01b600052603260045260246000fd5b6020026020010151600260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550816006815181106200025157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600380546001600160a01b0319166001600160a01b0390921691909117905581516200029091600e9190840190620003e4565b50620002cb82600381518110620002b757634e487b7160e01b600052603260045260246000fd5b6020026020010151620002d360201b60201c565b5050620005af565b6000546001600160a01b03163314620003335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200039a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200032a565b600080546040516001600160a01b038085169392169160008051602062002c2c83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b8280548282559060005260206000209081019282156200043c579160200282015b828111156200043c57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000405565b506200044a9291506200044e565b5090565b5b808211156200044a57600081556001016200044f565b80516001600160a01b03811681146200047d57600080fd5b919050565b600082601f83011262000493578081fd5b815160206001600160401b0380831115620004b257620004b262000599565b8260051b604051601f19603f83011681018181108482111715620004da57620004da62000599565b60405284815283810192508684018288018501891015620004f9578687fd5b8692505b858310156200052657620005118162000465565b845292840192600192909201918401620004fd565b50979650505050505050565b6000806040838503121562000545578182fd5b82516001600160401b03808211156200055c578384fd5b6200056a8683870162000482565b9350602085015191508082111562000580578283fd5b506200058f8582860162000482565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c60c05160601c61258e6200069e6000396000818161051d015281816116b301528181611775015281816118e401528181611b590152611c2e015260008181610470015281816107ef01528181610a3d01528181610b2901528181611433015281816114f10152818161153f0152818161186d015281816118c201528181611a6801528181611af301528181611b810152611c0c0152600081816102d40152818161055e015281816107740152818161093f015281816113b6015281816115f80152818161188f015281816119e401528181611a400152611b15015261258e6000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80638778878211610146578063aff66095116100c3578063ed0f435211610087578063ed0f4352146104b8578063f0f44260146104c1578063f2fde38b146104d4578063f384a44c146104e7578063f3fef3a3146104f0578063f887ea40146105185761025e565b8063aff6609514610445578063c32c1e6514610458578063c89039c51461046b578063e695b9d914610492578063ec38a862146104a55761025e565b8063952e6ee91161010a578063952e6ee9146104055780639ae0ddaf1461040e5780639ec5a89414610417578063a4874d771461042a578063ab033ea9146104325761025e565b806387788782146103a257806387976583146103ab5780638b33b4b2146103ce5780638da5cb5b146103e15780638fab5917146103f25761025e565b80635aa6e675116101df57806367206d40116101a357806367206d401461035a578063715018a61461036d5780637215313d146103755780637a3404881461037e5780638456cb591461038757806384fa32ac1461038f5761025e565b80635aa6e6751461030e5780635b5be8dd146102635780635c975abb1461032157806361d027b31461033e578063649677e1146103515761025e565b80634641257d116102265780634641257d146102a35780634700d305146102ab57806347e7ef24146102b35780634adae0da146102c6578063575a86b2146102cf5761025e565b806304448370146102635780632838ee9c1461027f5780633e032a3b146102875780633f4ba83a1461029057806344a3955e1461029a575b600080fd5b61026c61271081565b6040519081526020015b60405180910390f35b61026c61053f565b61026c600d5481565b6102986105e5565b005b61026c60085481565b61029861066d565b6102986108c7565b61026c6102c1366004612161565b6109a4565b61026c60075481565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610276565b6004546102f6906001600160a01b031681565b600f5461032e9060ff1681565b6040519015158152602001610276565b6003546102f6906001600160a01b031681565b61026c60095481565b61029861036836600461218a565b610ad7565b610298610baa565b61026c6103de81565b61026c61032081565b610298610c1e565b61029861039d3660046122d5565b610c73565b61026c600a5481565b61032e6103b9366004612147565b60066020526000908152604090205460ff1681565b6005546102f6906001600160a01b031681565b6000546001600160a01b03166102f6565b610298610400366004612147565b610e75565b61026c600b5481565b61026c6126de81565b6002546102f6906001600160a01b031681565b610298610efe565b610298610440366004612147565b610f28565b610298610453366004612147565b610fc2565b610298610466366004612147565b611048565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b6102f66104a03660046122a5565b6110ba565b6102986104b3366004612147565b6110e4565b61026c6103e881565b6102986104cf366004612147565b611156565b6102986104e2366004612147565b6111c8565b61026c600c5481565b6105036104fe366004612161565b6112b2565b60408051928352602083019190915201610276565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b604051631175a1dd60e01b8152600060048201819052306024830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631175a1dd9060440160206040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e091906122bd565b905090565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161060f906123eb565b60405180910390fd5b600f5460ff166106545760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b604482015260640161060f565b6000600755600f805460ff1916905561066b611521565b565b3360009081526006602052604090205460ff168061069557506005546001600160a01b031633145b806106aa57506004546001600160a01b031633145b6106e35760405162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015260640161060f565b600f5460ff16156107065760405162461bcd60e51b815260040161060f90612446565b600260015414156107595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060f565b6002600155604051631058d28160e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d28190602401600060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087291906122bd565b90507f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d58816040516108a591815260200190565b60405180910390a16108b681611660565b90506108c0611521565b5060018055565b6000546001600160a01b031633146108f15760405162461bcd60e51b815260040161060f906123eb565b600f5460ff16156109145760405162461bcd60e51b815260040161060f90612446565b600f805460ff19166001179055604051632989754760e11b8152600060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635312ea8e906024015b600060405180830381600087803b15801561098457600080fd5b505af1158015610998573d6000803e3d6000fd5b5050505061066b611860565b600080546001600160a01b031633146109cf5760405162461bcd60e51b815260040161060f906123eb565b600f5460ff16156109f25760405162461bcd60e51b815260040161060f90612446565b6001600160a01b038316610a305760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b604482015260640161060f565b610a656001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308561190a565b600754829015801590610a7a57506000600854115b15610ab75761271060075460095460085486610a9691906124f3565b610aa091906124f3565b610aaa91906124d3565b610ab491906124d3565b90505b80600854610ac591906124bb565b600855610ad0611521565b9392505050565b6004546001600160a01b03163314610b015760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b038116610b275760405162461bcd60e51b815260040161060f90612420565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610b915760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b604482015260640161060f565b610ba56001600160a01b038416828461197b565b505050565b6000546001600160a01b03163314610bd45760405162461bcd60e51b815260040161060f906123eb565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610c485760405162461bcd60e51b815260040161060f906123eb565b600f5460ff1615610c6b5760405162461bcd60e51b815260040161060f90612446565b61066b6119ab565b6005546001600160a01b0316331480610c9657506004546001600160a01b031633145b610cb25760405162461bcd60e51b815260040161060f906123c6565b6126de851015610cf55760405162461bcd60e51b815260206004820152600e60248201526d08595b9d1c985b98d9519959531360921b604482015260640161060f565b612710851115610d395760405162461bcd60e51b815260206004820152600f60248201526e042cadce8e4c2dcc6ca8ccaca9ac2f608b1b604482015260640161060f565b6009859055610320841115610d845760405162461bcd60e51b8152602060048201526011602482015270085c195c999bdc9b585b98d95199595553607a1b604482015260640161060f565b600a8490556103e8610d9683856124bb565b14610dd05760405162461bcd60e51b815260206004820152600a60248201526910b332b2a330b1ba37b960b11b604482015260640161060f565b600b839055600c8290556103de811115610e1a5760405162461bcd60e51b815260206004820152600b60248201526a085cdb1a5c1c1859d9555360aa1b604482015260640161060f565b600d819055604080518681526020810186905290810184905260608101839052608081018290527fc67e0b149a57a70fa44a531a46c2c6d8e0b242fa12f459f250012c3a5987d29a9060a00160405180910390a15050505050565b6005546001600160a01b0316331480610e9857506004546001600160a01b031633145b610eb45760405162461bcd60e51b815260040161060f906123c6565b6001600160a01b038116610eda5760405162461bcd60e51b815260040161060f90612420565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b03163314610c6b5760405162461bcd60e51b815260040161060f906123eb565b6004546001600160a01b03163314610f525760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b038116610f785760405162461bcd60e51b815260040161060f90612420565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f24a8c4807b324a269a51827c3446b8ac1cc13810d7d0c0ca1efafabddd7b621990600090a250565b6005546001600160a01b0316331480610fe557506004546001600160a01b031633145b6110015760405162461bcd60e51b815260040161060f906123c6565b6001600160a01b0381166110275760405162461bcd60e51b815260040161060f90612420565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6004546001600160a01b031633146110725760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b0381166110985760405162461bcd60e51b815260040161060f90612420565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600e81815481106110ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6004546001600160a01b0316331461110e5760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b0381166111345760405162461bcd60e51b815260040161060f90612420565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146111805760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b0381166111a65760405162461bcd60e51b815260040161060f90612420565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146111f25760405162461bcd60e51b815260040161060f906123eb565b6001600160a01b0381166112575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805481906001600160a01b031633146112df5760405162461bcd60e51b815260040161060f906123eb565b6001600160a01b03841661131d5760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b604482015260640161060f565b600083116113575760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161060f565b60006007546008548561136a91906124f3565b61137491906124d3565b905060085481111561138557506008545b806008546113939190612512565b600855600f5460ff1661141b57604051631058d28160e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d28190602401600060405180830381600087803b15801561140257600080fd5b505af1158015611416573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561147d57600080fd5b505afa158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b591906122bd565b9050808511156114c3578094505b8460075410156114d35760075494505b846007546114e19190612512565b6007556115186001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338761197b565b50949293505050565b6007546040516370a0823160e01b81523060048201529015906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c191906122bd565b9050806007546115d191906124bb565b60075581156115e2576115e2611a23565b6040516341441d3b60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906341441d3b90602401600060405180830381600087803b15801561164457600080fd5b505af1158015611658573d6000803e3d6000fd5b505050505050565b6000811561185857600a5415611858576000612710600a548461168391906124f3565b61168d91906124d3565b905060006103e8600c54836116a291906124f3565b6116ac91906124d3565b90506117517f000000000000000000000000000000000000000000000000000000000000000082600d54600e80548060200260200160405190810160405280929190818152602001828054801561172c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161170e575b50506003546001600160a01b0316925061174c91504290506102586124bb565b611c55565b60006103e8600b548461176491906124f3565b61176e91906124d3565b905061180e7f000000000000000000000000000000000000000000000000000000000000000082600d54600e8054806020026020016040519081016040528092919081815260200182805480156117ee57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117d0575b50506002546001600160a01b0316925061174c91504290506102586124bb565b6118188386612512565b60408051838152602081018590529196507f916ad8171ef8c567c7790377a142f0200f9565940680c06e30dd105cfd924968910160405180910390a15050505b50805b919050565b6118b56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611dc2565b61066b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611dc2565b6040516001600160a01b03808516602483015283166044820152606481018290526119759085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ee6565b50505050565b6040516001600160a01b038316602482015260448101829052610ba590849063a9059cbb60e01b9060640161193e565b600f5460ff1661066b57600f805460ff1916600117905560075415611a1b57600754604051631058d28160e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d2819060240161096a565b61066b611860565b604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9060440160206040518083038186803b158015611aaa57600080fd5b505afa158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae291906122bd565b611b3c57611b3c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611dc2565b604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9060440160206040518083038186803b158015611bc357600080fd5b505afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb91906122bd565b61066b5761066b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611dc2565b60405163d06ca61f60e01b81526000906001600160a01b0388169063d06ca61f90611c869089908890600401612466565b60006040518083038186803b158015611c9e57600080fd5b505afa158015611cb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cda91908101906121c5565b905060008160018351611ced9190612512565b81518110611d0b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050876001600160a01b03166338ed1739886103e88985611d3491906124f3565b611d3e91906124d3565b8888886040518663ffffffff1660e01b8152600401611d6195949392919061247f565b600060405180830381600087803b158015611d7b57600080fd5b505af1158015611d8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611db791908101906121c5565b505050505050505050565b801580611e4b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4991906122bd565b155b611eb65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161060f565b6040516001600160a01b038316602482015260448101829052610ba590849063095ea7b360e01b9060640161193e565b6000611f3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fb89092919063ffffffff16565b805190915015610ba55780806020019051810190611f599190612285565b610ba55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060f565b6060611fc78484600085611fcf565b949350505050565b6060824710156120305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060f565b843b61207e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b0316858760405161209a9190612352565b60006040518083038185875af1925050503d80600081146120d7576040519150601f19603f3d011682016040523d82523d6000602084013e6120dc565b606091505b50915091506120ec8282866120f7565b979650505050505050565b60608315612106575081610ad0565b8251156121165782518084602001fd5b8160405162461bcd60e51b815260040161060f919061236e565b80356001600160a01b038116811461185b57600080fd5b600060208284031215612158578081fd5b610ad082612130565b60008060408385031215612173578081fd5b61217c83612130565b946020939093013593505050565b60008060006060848603121561219e578081fd5b6121a784612130565b9250602084013591506121bc60408501612130565b90509250925092565b600060208083850312156121d7578182fd5b825167ffffffffffffffff808211156121ee578384fd5b818501915085601f830112612201578384fd5b8151818111156122135761221361256b565b8060051b604051601f19603f830116810181811085821117156122385761223861256b565b604052828152858101935084860182860187018a1015612256578788fd5b8795505b8386101561227857805185526001959095019493860193860161225a565b5098975050505050505050565b600060208284031215612296578081fd5b81518015158114610ad0578182fd5b6000602082840312156122b6578081fd5b5035919050565b6000602082840312156122ce578081fd5b5051919050565b600080600080600060a086880312156122ec578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260208085019450808401835b838110156123475781516001600160a01b031687529582019590820190600101612322565b509495945050505050565b60008251612364818460208701612529565b9190910192915050565b600060208252825180602084015261238d816040850160208701612529565b601f01601f19169190910160400192915050565b6020808252600b908201526a21676f7665726e616e636560a81b604082015260600190565b6020808252600b908201526a216f7065726174696f6e7360a81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b600083825260406020830152611fc7604083018461230f565b600086825285602083015260a0604083015261249e60a083018661230f565b6001600160a01b0394909416606083015250608001529392505050565b600082198211156124ce576124ce612555565b500190565b6000826124ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561250d5761250d612555565b500290565b60008282101561252457612524612555565b500390565b60005b8381101561254457818101518382015260200161252c565b838111156119755750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000803000a8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c80638778878211610146578063aff66095116100c3578063ed0f435211610087578063ed0f4352146104b8578063f0f44260146104c1578063f2fde38b146104d4578063f384a44c146104e7578063f3fef3a3146104f0578063f887ea40146105185761025e565b8063aff6609514610445578063c32c1e6514610458578063c89039c51461046b578063e695b9d914610492578063ec38a862146104a55761025e565b8063952e6ee91161010a578063952e6ee9146104055780639ae0ddaf1461040e5780639ec5a89414610417578063a4874d771461042a578063ab033ea9146104325761025e565b806387788782146103a257806387976583146103ab5780638b33b4b2146103ce5780638da5cb5b146103e15780638fab5917146103f25761025e565b80635aa6e675116101df57806367206d40116101a357806367206d401461035a578063715018a61461036d5780637215313d146103755780637a3404881461037e5780638456cb591461038757806384fa32ac1461038f5761025e565b80635aa6e6751461030e5780635b5be8dd146102635780635c975abb1461032157806361d027b31461033e578063649677e1146103515761025e565b80634641257d116102265780634641257d146102a35780634700d305146102ab57806347e7ef24146102b35780634adae0da146102c6578063575a86b2146102cf5761025e565b806304448370146102635780632838ee9c1461027f5780633e032a3b146102875780633f4ba83a1461029057806344a3955e1461029a575b600080fd5b61026c61271081565b6040519081526020015b60405180910390f35b61026c61053f565b61026c600d5481565b6102986105e5565b005b61026c60085481565b61029861066d565b6102986108c7565b61026c6102c1366004612161565b6109a4565b61026c60075481565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610276565b6004546102f6906001600160a01b031681565b600f5461032e9060ff1681565b6040519015158152602001610276565b6003546102f6906001600160a01b031681565b61026c60095481565b61029861036836600461218a565b610ad7565b610298610baa565b61026c6103de81565b61026c61032081565b610298610c1e565b61029861039d3660046122d5565b610c73565b61026c600a5481565b61032e6103b9366004612147565b60066020526000908152604090205460ff1681565b6005546102f6906001600160a01b031681565b6000546001600160a01b03166102f6565b610298610400366004612147565b610e75565b61026c600b5481565b61026c6126de81565b6002546102f6906001600160a01b031681565b610298610efe565b610298610440366004612147565b610f28565b610298610453366004612147565b610fc2565b610298610466366004612147565b611048565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b6102f66104a03660046122a5565b6110ba565b6102986104b3366004612147565b6110e4565b61026c6103e881565b6102986104cf366004612147565b611156565b6102986104e2366004612147565b6111c8565b61026c600c5481565b6105036104fe366004612161565b6112b2565b60408051928352602083019190915201610276565b6102f67f000000000000000000000000000000000000000000000000000000000000000081565b604051631175a1dd60e01b8152600060048201819052306024830152907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631175a1dd9060440160206040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e091906122bd565b905090565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161060f906123eb565b60405180910390fd5b600f5460ff166106545760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b604482015260640161060f565b6000600755600f805460ff1916905561066b611521565b565b3360009081526006602052604090205460ff168061069557506005546001600160a01b031633145b806106aa57506004546001600160a01b031633145b6106e35760405162461bcd60e51b815260206004820152600a60248201526910b430b93b32b9ba32b960b11b604482015260640161060f565b600f5460ff16156107065760405162461bcd60e51b815260040161060f90612446565b600260015414156107595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060f565b6002600155604051631058d28160e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d28190602401600060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087291906122bd565b90507f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d58816040516108a591815260200190565b60405180910390a16108b681611660565b90506108c0611521565b5060018055565b6000546001600160a01b031633146108f15760405162461bcd60e51b815260040161060f906123eb565b600f5460ff16156109145760405162461bcd60e51b815260040161060f90612446565b600f805460ff19166001179055604051632989754760e11b8152600060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635312ea8e906024015b600060405180830381600087803b15801561098457600080fd5b505af1158015610998573d6000803e3d6000fd5b5050505061066b611860565b600080546001600160a01b031633146109cf5760405162461bcd60e51b815260040161060f906123eb565b600f5460ff16156109f25760405162461bcd60e51b815260040161060f90612446565b6001600160a01b038316610a305760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b604482015260640161060f565b610a656001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308561190a565b600754829015801590610a7a57506000600854115b15610ab75761271060075460095460085486610a9691906124f3565b610aa091906124f3565b610aaa91906124d3565b610ab491906124d3565b90505b80600854610ac591906124bb565b600855610ad0611521565b9392505050565b6004546001600160a01b03163314610b015760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b038116610b275760405162461bcd60e51b815260040161060f90612420565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610b915760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b604482015260640161060f565b610ba56001600160a01b038416828461197b565b505050565b6000546001600160a01b03163314610bd45760405162461bcd60e51b815260040161060f906123eb565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610c485760405162461bcd60e51b815260040161060f906123eb565b600f5460ff1615610c6b5760405162461bcd60e51b815260040161060f90612446565b61066b6119ab565b6005546001600160a01b0316331480610c9657506004546001600160a01b031633145b610cb25760405162461bcd60e51b815260040161060f906123c6565b6126de851015610cf55760405162461bcd60e51b815260206004820152600e60248201526d08595b9d1c985b98d9519959531360921b604482015260640161060f565b612710851115610d395760405162461bcd60e51b815260206004820152600f60248201526e042cadce8e4c2dcc6ca8ccaca9ac2f608b1b604482015260640161060f565b6009859055610320841115610d845760405162461bcd60e51b8152602060048201526011602482015270085c195c999bdc9b585b98d95199595553607a1b604482015260640161060f565b600a8490556103e8610d9683856124bb565b14610dd05760405162461bcd60e51b815260206004820152600a60248201526910b332b2a330b1ba37b960b11b604482015260640161060f565b600b839055600c8290556103de811115610e1a5760405162461bcd60e51b815260206004820152600b60248201526a085cdb1a5c1c1859d9555360aa1b604482015260640161060f565b600d819055604080518681526020810186905290810184905260608101839052608081018290527fc67e0b149a57a70fa44a531a46c2c6d8e0b242fa12f459f250012c3a5987d29a9060a00160405180910390a15050505050565b6005546001600160a01b0316331480610e9857506004546001600160a01b031633145b610eb45760405162461bcd60e51b815260040161060f906123c6565b6001600160a01b038116610eda5760405162461bcd60e51b815260040161060f90612420565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6000546001600160a01b03163314610c6b5760405162461bcd60e51b815260040161060f906123eb565b6004546001600160a01b03163314610f525760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b038116610f785760405162461bcd60e51b815260040161060f90612420565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f24a8c4807b324a269a51827c3446b8ac1cc13810d7d0c0ca1efafabddd7b621990600090a250565b6005546001600160a01b0316331480610fe557506004546001600160a01b031633145b6110015760405162461bcd60e51b815260040161060f906123c6565b6001600160a01b0381166110275760405162461bcd60e51b815260040161060f90612420565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6004546001600160a01b031633146110725760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b0381166110985760405162461bcd60e51b815260040161060f90612420565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600e81815481106110ca57600080fd5b6000918252602090912001546001600160a01b0316905081565b6004546001600160a01b0316331461110e5760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b0381166111345760405162461bcd60e51b815260040161060f90612420565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146111805760405162461bcd60e51b815260040161060f906123a1565b6001600160a01b0381166111a65760405162461bcd60e51b815260040161060f90612420565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146111f25760405162461bcd60e51b815260040161060f906123eb565b6001600160a01b0381166112575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805481906001600160a01b031633146112df5760405162461bcd60e51b815260040161060f906123eb565b6001600160a01b03841661131d5760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b604482015260640161060f565b600083116113575760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161060f565b60006007546008548561136a91906124f3565b61137491906124d3565b905060085481111561138557506008545b806008546113939190612512565b600855600f5460ff1661141b57604051631058d28160e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d28190602401600060405180830381600087803b15801561140257600080fd5b505af1158015611416573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561147d57600080fd5b505afa158015611491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b591906122bd565b9050808511156114c3578094505b8460075410156114d35760075494505b846007546114e19190612512565b6007556115186001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338761197b565b50949293505050565b6007546040516370a0823160e01b81523060048201529015906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561158957600080fd5b505afa15801561159d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c191906122bd565b9050806007546115d191906124bb565b60075581156115e2576115e2611a23565b6040516341441d3b60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906341441d3b90602401600060405180830381600087803b15801561164457600080fd5b505af1158015611658573d6000803e3d6000fd5b505050505050565b6000811561185857600a5415611858576000612710600a548461168391906124f3565b61168d91906124d3565b905060006103e8600c54836116a291906124f3565b6116ac91906124d3565b90506117517f000000000000000000000000000000000000000000000000000000000000000082600d54600e80548060200260200160405190810160405280929190818152602001828054801561172c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161170e575b50506003546001600160a01b0316925061174c91504290506102586124bb565b611c55565b60006103e8600b548461176491906124f3565b61176e91906124d3565b905061180e7f000000000000000000000000000000000000000000000000000000000000000082600d54600e8054806020026020016040519081016040528092919081815260200182805480156117ee57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117d0575b50506002546001600160a01b0316925061174c91504290506102586124bb565b6118188386612512565b60408051838152602081018590529196507f916ad8171ef8c567c7790377a142f0200f9565940680c06e30dd105cfd924968910160405180910390a15050505b50805b919050565b6118b56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611dc2565b61066b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611dc2565b6040516001600160a01b03808516602483015283166044820152606481018290526119759085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ee6565b50505050565b6040516001600160a01b038316602482015260448101829052610ba590849063a9059cbb60e01b9060640161193e565b600f5460ff1661066b57600f805460ff1916600117905560075415611a1b57600754604051631058d28160e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631058d2819060240161096a565b61066b611860565b604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9060440160206040518083038186803b158015611aaa57600080fd5b505afa158015611abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae291906122bd565b611b3c57611b3c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611dc2565b604051636eb1769f60e11b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063dd62ed3e9060440160206040518083038186803b158015611bc357600080fd5b505afa158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb91906122bd565b61066b5761066b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611dc2565b60405163d06ca61f60e01b81526000906001600160a01b0388169063d06ca61f90611c869089908890600401612466565b60006040518083038186803b158015611c9e57600080fd5b505afa158015611cb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cda91908101906121c5565b905060008160018351611ced9190612512565b81518110611d0b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050876001600160a01b03166338ed1739886103e88985611d3491906124f3565b611d3e91906124d3565b8888886040518663ffffffff1660e01b8152600401611d6195949392919061247f565b600060405180830381600087803b158015611d7b57600080fd5b505af1158015611d8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611db791908101906121c5565b505050505050505050565b801580611e4b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4991906122bd565b155b611eb65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161060f565b6040516001600160a01b038316602482015260448101829052610ba590849063095ea7b360e01b9060640161193e565b6000611f3b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fb89092919063ffffffff16565b805190915015610ba55780806020019051810190611f599190612285565b610ba55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060f565b6060611fc78484600085611fcf565b949350505050565b6060824710156120305760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161060f565b843b61207e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b0316858760405161209a9190612352565b60006040518083038185875af1925050503d80600081146120d7576040519150601f19603f3d011682016040523d82523d6000602084013e6120dc565b606091505b50915091506120ec8282866120f7565b979650505050505050565b60608315612106575081610ad0565b8251156121165782518084602001fd5b8160405162461bcd60e51b815260040161060f919061236e565b80356001600160a01b038116811461185b57600080fd5b600060208284031215612158578081fd5b610ad082612130565b60008060408385031215612173578081fd5b61217c83612130565b946020939093013593505050565b60008060006060848603121561219e578081fd5b6121a784612130565b9250602084013591506121bc60408501612130565b90509250925092565b600060208083850312156121d7578182fd5b825167ffffffffffffffff808211156121ee578384fd5b818501915085601f830112612201578384fd5b8151818111156122135761221361256b565b8060051b604051601f19603f830116810181811085821117156122385761223861256b565b604052828152858101935084860182860187018a1015612256578788fd5b8795505b8386101561227857805185526001959095019493860193860161225a565b5098975050505050505050565b600060208284031215612296578081fd5b81518015158114610ad0578182fd5b6000602082840312156122b6578081fd5b5035919050565b6000602082840312156122ce578081fd5b5051919050565b600080600080600060a086880312156122ec578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000815180845260208085019450808401835b838110156123475781516001600160a01b031687529582019590820190600101612322565b509495945050505050565b60008251612364818460208701612529565b9190910192915050565b600060208252825180602084015261238d816040850160208701612529565b601f01601f19169190910160400192915050565b6020808252600b908201526a21676f7665726e616e636560a81b604082015260600190565b6020808252600b908201526a216f7065726174696f6e7360a81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b600083825260406020830152611fc7604083018461230f565b600086825285602083015260a0604083015261249e60a083018661230f565b6001600160a01b0394909416606083015250608001529392505050565b600082198211156124ce576124ce612555565b500190565b6000826124ee57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561250d5761250d612555565b500290565b60008282101561252457612524612555565b500390565b60005b8381101561254457818101518382015260200161252c565b838111156119755750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000803000a",
  "devdoc": {
    "details": "Implementation of the PancakeSwap Cake Strategy. This contract will compound Cake staking. The owner of the contract is the BalleMaster contract.",
    "kind": "dev",
    "methods": {
      "addHarvester(address)": {
        "details": "Add a harvester address."
      },
      "constructor": {
        "details": "Implementation of PancakeSwap Cake autocompounding strategy."
      },
      "deposit(address,uint256)": {
        "details": "Function to transfer tokens BalleMaster -> strategy and put it to work."
      },
      "harvest()": {
        "details": "Function to harvest earnings and reinvest."
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "details": "Function to use from Governance Gnosis Safe multisig only in case tokens get stuck. This is to be used if someone, for example, sends tokens to the contract by mistake. There is no guarantee governance will vote to return these."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "panic()": {
        "details": "Stop the vault with emergencyWithdraw from farm."
      },
      "pause()": {
        "details": "Stop the vault."
      },
      "pendingEarnedToken()": {
        "details": "View function to see pending CAKEs on farm."
      },
      "removeHarvester(address)": {
        "details": "Remove a harvester address."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "retire()": {
        "details": "Retire the vault."
      },
      "setGovernance(address)": {
        "details": "Function to change the Governance Gnosis Safe multisig."
      },
      "setOperations(address)": {
        "details": "Function to change the Operations Gnosis Safe multisig."
      },
      "setRewards(address)": {
        "details": "Function to change the rewards address."
      },
      "setSettings(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Function to change strategy settings."
      },
      "setTreasury(address)": {
        "details": "Function to change the treasury address."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Restart the vault."
      },
      "withdraw(address,uint256)": {
        "details": "Function to transfer tokens strategy -> BalleMaster."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5944,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "rewards",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5946,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5948,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5950,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "operations",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5954,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "harvesters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5957,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "depositTotal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5960,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5963,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "entranceFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5972,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "performanceFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5981,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "rewardsFeeFactor",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5984,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "treasuryFeeFactor",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5990,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "slippage",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5996,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "earnedtokenToBallePath",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5999,
        "contract": "contracts/strategies/StratPancakeCakeV1.sol:StratPancakeCakeV1",
        "label": "paused",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}