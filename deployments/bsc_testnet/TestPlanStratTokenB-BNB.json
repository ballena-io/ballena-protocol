{
  "address": "0xCBD94Aac8d55E574150047b187312c982EFb905c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_cakeToBallePath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_cakeToToken0Path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_cakeToToken1Path",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minEarnedToReinvest",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE_LL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_FACTOR_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_EARNED_TO_REINVEST_LL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_EARNED_TO_REINVEST_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERFORMANCE_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERFORMANCE_FEE_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLIPPAGE_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "addHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cake",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cakeToBallePath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cakeToToken0Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cakeToToken1Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minEarnedToReinvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "removeHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minEarnedToReinvest",
          "type": "uint256"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earnedAmt",
          "type": "uint256"
        }
      ],
      "name": "upgradeFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x04dd0e79245b9bd9ca2d53fb169b5af5b811736646b4fdeec72baae7e09504dd",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0xCBD94Aac8d55E574150047b187312c982EFb905c",
    "transactionIndex": 0,
    "gasUsed": "3197056",
    "logsBloom": "0x
    "blockHash": "0x4c63fd2ee2e4887df2ca6276eff2c73c1c8d422c700e9996040ba18366ffbe75",
    "transactionHash": "0x04dd0e79245b9bd9ca2d53fb169b5af5b811736646b4fdeec72baae7e09504dd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8723692,
        "transactionHash": "0x04dd0e79245b9bd9ca2d53fb169b5af5b811736646b4fdeec72baae7e09504dd",
        "address": "0xCBD94Aac8d55E574150047b187312c982EFb905c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4c63fd2ee2e4887df2ca6276eff2c73c1c8d422c700e9996040ba18366ffbe75"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8723692,
        "transactionHash": "0x04dd0e79245b9bd9ca2d53fb169b5af5b811736646b4fdeec72baae7e09504dd",
        "address": "0xCBD94Aac8d55E574150047b187312c982EFb905c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355",
          "0x000000000000000000000000d3f2fa28ec7b8261ddd31de3697454c1cd5d855b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4c63fd2ee2e4887df2ca6276eff2c73c1c8d422c700e9996040ba18366ffbe75"
      }
    ],
    "blockNumber": 8723692,
    "cumulativeGasUsed": "3197056",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x40a6f287fbf5e1841f76ce0218ff23edcd55f96d",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd",
      "0xd3b6a0e47a4907b27b748ce56e53303fbb05cc9b",
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
      "0x91E85122eF92FF306EA47025efd00404CcaEEb19",
      "0xD3f2fA28EC7B8261DdD31DE3697454C1cD5D855B",
      "0xb25D37892305FE1b44c06F035139a0ED11EcA82d",
      "0x57d6AC13DEFdD0cb249d854722fFE3125b3D3910",
      "0x8FCC11DA25b3eC556D231f330335c8AF5bE439a1"
    ],
    2,
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd",
      "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b"
    ],
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd"
    ],
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd",
      "0xd3b6a0e47a4907b27b748ce56e53303fbb05cc9b"
    ]
  ],
  "solcInputHash": "92fd38752454bc6b28e93e46b22b1a33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_cakeToBallePath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_cakeToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_cakeToToken1Path\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minEarnedToReinvest\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE_LL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_EARNED_TO_REINVEST_LL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_EARNED_TO_REINVEST_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"addHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cakeToBallePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cakeToToken0Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cakeToToken1Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEarnedToReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"removeHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEarnedToReinvest\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnedAmt\",\"type\":\"uint256\"}],\"name\":\"upgradeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHarvester(address)\":{\"details\":\"Add a harvester address from Governance GNOSIS Safe.\"},\"constructor\":{\"details\":\"Implementation of PancakeSwap LP autocompounding strategy.\"},\"deposit(address,uint256)\":{\"details\":\"Function to transfer tokens BalleMaster -> strategy and put it to work.\"},\"harvest()\":{\"details\":\"Function to harvest earnings and reinvest.\"},\"inCaseTokensGetStuck(address,uint256,address)\":{\"details\":\"Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"panic()\":{\"details\":\"Stop the vault with emergencyWithdraw from farm.\"},\"pause()\":{\"details\":\"Stop the vault.\"},\"removeHarvester(address)\":{\"details\":\"Remove a harvester address from Governance GNOSIS Safe.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"retire()\":{\"details\":\"Retire the vault.\"},\"setGovernance(address)\":{\"details\":\"Function to change the governance address.\"},\"setSettings(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Function to change strategy settings.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Restart the vault.\"},\"upgradeFrom(address,uint256,uint256,uint256)\":{\"details\":\"Complete upgrade from the old strategy.\"},\"upgradeTo(address)\":{\"details\":\"Prepare to upgrade strategy to the new one indicated.\"},\"withdraw(address,uint256)\":{\"details\":\"Function to transfer tokens strategy -> BalleMaster.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StratPancakeLpV1.sol\":\"StratPancakeLpV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// contracts/interfaces/IPancakeRouter01.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xaabb10e62d52c3c3b172d2ca712f2eb26e67d6fd04f143a1cac2e3b2d1594fd0\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeswapFarm.sol\":{\"content\":\"// contracts/interfaces/IPancakeswapFarm.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeswapFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\",\"keccak256\":\"0x14a6c4dce2a653a262b585f434be731f622fe55d4f670c275ab618f2c185a0dd\",\"license\":\"MIT\"},\"contracts/strategies/StratPancakeLpV1.sol\":{\"content\":\"// contracts/strategies/StratPancakeLpV1.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPancakeswapFarm.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter01.sol\\\";\\n\\ncontract StratPancakeLpV1 is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // PancakeSwap's MasterChef address.\\n    address public immutable masterChef;\\n    // MasterChef's pid of pool.\\n    uint256 public immutable pid;\\n    // Deposit token (LP) address.\\n    address public immutable depositToken;\\n    // First token of LP address.\\n    address public immutable token0;\\n    // Second token of LP address.\\n    address public immutable token1;\\n    // Earned token (CAKE) address.\\n    address public immutable cake;\\n    // PancakeSwap router address.\\n    address public immutable router;\\n\\n    // Address to send controller fee.\\n    address public immutable rewards;\\n    // Address to send treasury fee.\\n    address public immutable treasury;\\n\\n    // Governance address\\n    address public governance;\\n    // Harvest addresses\\n    mapping(address => bool) public harvesters;\\n\\n    uint256 public depositTotal = 0;\\n    uint256 public sharesTotal = 0;\\n\\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\\n    uint256 public entranceFee = 9990;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\\n    // 0.5% max settable entrance fee, LL = lowerlimit.\\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\\n\\n    // 4% performance fee.\\n    uint256 public performanceFee = 400;\\n    // 8% max settable performance fee, UL = upperlimit.\\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\\n    // 3% goes to BALLE holders.\\n    uint256 public rewardsFeeFactor = 750;\\n    // 1% goes to treasury.\\n    uint256 public treasuryFeeFactor = 250;\\n    // Factor for fee distribution.\\n    uint256 public constant FEE_FACTOR_MAX = 1000;\\n\\n    // 5% default slippage tolerance.\\n    uint256 public slippage = 950;\\n    // 10% max settable slippage tolerance, UL = upperlimit.\\n    uint256 public constant SLIPPAGE_UL = 990;\\n\\n    // Minimum earned amount to reinvest. Default 1 CAKE.\\n    uint256 public minEarnedToReinvest = 1000000000000000000;\\n    // 0.1 CAKE min settable minimum to reinvest, LL = lowerlimit.\\n    uint256 public constant MIN_EARNED_TO_REINVEST_LL = 100000000000000000;\\n    // 10 CAKE max settable minimum to reinvest, UL = upperlimit.\\n    uint256 public constant MIN_EARNED_TO_REINVEST_UL = 10000000000000000000;\\n\\n    // Swap routes\\n    address[] public cakeToBallePath;\\n    address[] public cakeToToken0Path;\\n    address[] public cakeToToken1Path;\\n\\n    // Paused state activated\\n    bool public paused = false;\\n\\n    event SetSettings(\\n        uint256 entranceFee,\\n        uint256 performanceFee,\\n        uint256 rewardsFeeFactor,\\n        uint256 treasuryFeeFactor,\\n        uint256 slippage,\\n        uint256 minEarnedToReinvest\\n    );\\n    event SetGovernance(address indexed addr);\\n\\n    /**\\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\\n     */\\n    constructor(\\n        address[] memory _addresses,\\n        uint256 _pid,\\n        address[] memory _cakeToBallePath,\\n        address[] memory _cakeToToken0Path,\\n        address[] memory _cakeToToken1Path\\n    ) {\\n        require(_pid > 0, \\\"!pid\\\");\\n\\n        depositToken = _addresses[0];\\n        token0 = _addresses[1];\\n        token1 = _addresses[2];\\n        cake = _addresses[3];\\n        router = _addresses[4];\\n        masterChef = _addresses[5];\\n        pid = _pid;\\n\\n        governance = msg.sender;\\n        harvesters[_addresses[7]] = true;\\n        rewards = _addresses[8];\\n        treasury = _addresses[9];\\n\\n        cakeToBallePath = _cakeToBallePath;\\n        cakeToToken0Path = _cakeToToken0Path;\\n        cakeToToken1Path = _cakeToToken1Path;\\n\\n        transferOwnership(_addresses[6]);\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the governance address or an authorized harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == governance || harvesters[msg.sender], \\\"!governance && !harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the strategy is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the strategy is paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused, \\\"!paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\\n     */\\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        IERC20(depositToken).safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        uint256 sharesAdded = _amount;\\n        if (depositTotal > 0 && sharesTotal > 0) {\\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\\n        }\\n        sharesTotal = sharesTotal + sharesAdded;\\n\\n        farm();\\n\\n        return sharesAdded;\\n    }\\n\\n    /**\\n     * @dev Function to send depositToken to farm.\\n     */\\n    function farm() internal {\\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\\n        depositTotal = depositTotal + amount;\\n        IERC20(depositToken).safeApprove(masterChef, 0);\\n        IERC20(depositToken).safeIncreaseAllowance(masterChef, amount);\\n\\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens strategy -> BalleMaster.\\n     */\\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        require(_amount > 0, \\\"!amount\\\");\\n\\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal - sharesRemoved;\\n\\n        // If paused, tokens are already here\\n        if (!paused) {\\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\\n        }\\n\\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\\n        if (_amount > balance) {\\n            _amount = balance;\\n        }\\n\\n        if (depositTotal < _amount) {\\n            _amount = depositTotal;\\n        }\\n\\n        depositTotal = depositTotal - _amount;\\n\\n        IERC20(depositToken).safeTransfer(address(msg.sender), _amount);\\n\\n        return (sharesRemoved, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to harvest earnings and reinvest.\\n     */\\n    function harvest() public onlyHarvester whenNotPaused {\\n        _harvest(0);\\n    }\\n\\n    /**\\n     * @dev Internal function to harvest earnings and reinvest.\\n     * If called with _amount > 0 will withdraw the LP indicated with the earned CAKE.\\n     */\\n    function _harvest(uint256 _amount) internal {\\n        // Harvest farm tokens\\n        IPancakeswapFarm(masterChef).withdraw(pid, _amount);\\n        uint256 earnedAmt = IERC20(cake).balanceOf(address(this));\\n        if (earnedAmt < minEarnedToReinvest) {\\n            return;\\n        }\\n\\n        // Approve router to spend the tokens\\n        IERC20(cake).safeApprove(router, 0);\\n        IERC20(cake).safeIncreaseAllowance(router, earnedAmt);\\n\\n        // Distribute the fees\\n        earnedAmt = distributeFees(earnedAmt);\\n\\n        // Converts farm tokens into want tokens\\n        if (cake != token0) {\\n            // Swap half earned to token0\\n            safeSwap(\\n                router,\\n                earnedAmt / 2,\\n                slippage,\\n                cakeToToken0Path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp + 600\\n            );\\n        }\\n\\n        if (cake != token1) {\\n            // Swap half earned to token1\\n            safeSwap(\\n                router,\\n                earnedAmt / 2,\\n                slippage,\\n                cakeToToken1Path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp + 600\\n            );\\n        }\\n\\n        // Add liquidity\\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\\n        if (token0Amt > 0 && token1Amt > 0) {\\n            IERC20(token0).safeApprove(router, 0);\\n            IERC20(token1).safeApprove(router, 0);\\n            IERC20(token0).safeIncreaseAllowance(router, token0Amt);\\n            IERC20(token1).safeIncreaseAllowance(router, token1Amt);\\n            IPancakeRouter01(router).addLiquidity(\\n                token0,\\n                token1,\\n                token0Amt,\\n                token1Amt,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp + 600\\n            );\\n        }\\n\\n        farm();\\n    }\\n\\n    /**\\n     * @dev Function to calculate and distribute the fees.\\n     */\\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\\n        if (_earnedAmt > 0) {\\n            // Performance fee\\n            if (performanceFee > 0) {\\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\\n\\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\\n                // Swap treasuryFee to BALLE and send to treasury.\\n                safeSwap(\\n                    router,\\n                    treasuryFee,\\n                    slippage,\\n                    cakeToBallePath,\\n                    treasury,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + 600\\n                );\\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\\n                // Swap rewardsFee to BALLE and send to rewards contract.\\n                safeSwap(\\n                    router,\\n                    rewardsFee,\\n                    slippage,\\n                    cakeToBallePath,\\n                    rewards,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + 600\\n                );\\n\\n                _earnedAmt = _earnedAmt - totalFee;\\n            }\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    /**\\n     * @dev Function to change strategy settings.\\n     */\\n    function setSettings(\\n        uint256 _entranceFee,\\n        uint256 _performanceFee,\\n        uint256 _rewardsFeeFactor,\\n        uint256 _treasuryFeeFactor,\\n        uint256 _slippage,\\n        uint256 _minEarnedToReinvest\\n    ) public onlyGovernance {\\n        require(_entranceFee >= ENTRANCE_FEE_LL, \\\"!entranceFeeLL\\\");\\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \\\"!entranceFeeMax\\\");\\n        entranceFee = _entranceFee;\\n\\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \\\"!performanceFeeUL\\\");\\n        performanceFee = _performanceFee;\\n\\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \\\"!feeFactor\\\");\\n        rewardsFeeFactor = _rewardsFeeFactor;\\n        treasuryFeeFactor = _treasuryFeeFactor;\\n\\n        require(_slippage <= SLIPPAGE_UL, \\\"!slippageUL\\\");\\n        slippage = _slippage;\\n\\n        require(_minEarnedToReinvest <= MIN_EARNED_TO_REINVEST_UL, \\\"!minEarnedToReinvestUL\\\");\\n        require(_minEarnedToReinvest >= MIN_EARNED_TO_REINVEST_LL, \\\"!minEarnedToReinvestLL\\\");\\n        minEarnedToReinvest = _minEarnedToReinvest;\\n\\n        emit SetSettings(\\n            _entranceFee,\\n            _performanceFee,\\n            _rewardsFeeFactor,\\n            _treasuryFeeFactor,\\n            _slippage,\\n            _minEarnedToReinvest\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to change the governance address.\\n     */\\n    function setGovernance(address _governance) public onlyGovernance {\\n        require(_governance != address(0), \\\"zero address\\\");\\n        governance = _governance;\\n        emit SetGovernance(_governance);\\n    }\\n\\n    /**\\n     * @dev Add a harvester address from Governance GNOSIS Safe.\\n     */\\n    function addHarvester(address _harvester) external onlyGovernance {\\n        require(_harvester != address(0), \\\"zero address\\\");\\n        harvesters[_harvester] = true;\\n    }\\n\\n    /**\\n     * @dev Remove a harvester address from Governance GNOSIS Safe.\\n     */\\n    function removeHarvester(address _harvester) external onlyGovernance {\\n        require(_harvester != address(0), \\\"zero address\\\");\\n        harvesters[_harvester] = false;\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public onlyGovernance {\\n        require(_token != address(0), \\\"zero address\\\");\\n        require(_token != cake, \\\"!safe\\\");\\n        require(_token != depositToken, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Utility function for safely swap tokens.\\n     */\\n    function safeSwap(\\n        address _router,\\n        uint256 _amountIn,\\n        uint256 _slippage,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline\\n    ) internal {\\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length - 1];\\n\\n        IPancakeRouter01(_router).swapExactTokensForTokens(\\n            _amountIn,\\n            (amountOut * _slippage) / 1000,\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @dev Prepare to upgrade strategy to the new one indicated.\\n     */\\n    function upgradeTo(address _strat)\\n        external\\n        onlyOwner\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(_strat != address(0), \\\"!strat\\\");\\n\\n        // Stop vault.\\n        _pause();\\n\\n        // Set allowance for new strat contract.\\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\\n        uint256 earnedAmt = IERC20(cake).balanceOf(address(this));\\n        IERC20(depositToken).safeApprove(_strat, 0);\\n        IERC20(depositToken).safeIncreaseAllowance(_strat, depositAmt);\\n        IERC20(cake).safeApprove(_strat, 0);\\n        IERC20(cake).safeIncreaseAllowance(_strat, earnedAmt);\\n\\n        return (sharesTotal, depositAmt, earnedAmt);\\n    }\\n\\n    /**\\n     * @dev Complete upgrade from the old strategy.\\n     */\\n    function upgradeFrom(\\n        address _strat,\\n        uint256 _sharesTotal,\\n        uint256 _depositAmt,\\n        uint256 _earnedAmt\\n    ) external onlyOwner {\\n        require(_strat != address(0), \\\"!strat\\\");\\n\\n        if (_depositAmt > 0) {\\n            IERC20(depositToken).safeTransferFrom(_strat, address(this), _depositAmt);\\n        }\\n        if (_earnedAmt > 0) {\\n            IERC20(cake).safeTransferFrom(_strat, address(this), _earnedAmt);\\n        }\\n        sharesTotal = _sharesTotal;\\n\\n        farm();\\n    }\\n\\n    /**\\n     * @dev Stop the vault.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Internal function for stopping the vault.\\n     */\\n    function _pause() internal {\\n        if (!paused) {\\n            // Harvest with withdrawall.\\n            _harvest(depositTotal);\\n\\n            // Clear allowances of third party contracts.\\n            IERC20(depositToken).safeApprove(masterChef, 0);\\n            IERC20(cake).safeApprove(router, 0);\\n            IERC20(token0).safeApprove(router, 0);\\n            IERC20(token1).safeApprove(router, 0);\\n\\n            paused = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Restart the vault.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        depositTotal = 0; // It will be set back on farm().\\n        farm();\\n        paused = false;\\n    }\\n\\n    /**\\n     * @dev Stop the vault with emergencyWithdraw from farm.\\n     */\\n    function panic() external onlyOwner whenNotPaused {\\n        // Emergency withdraw.\\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\\n\\n        // Clear allowances of third party contracts.\\n        IERC20(depositToken).safeApprove(masterChef, 0);\\n        IERC20(cake).safeApprove(router, 0);\\n        IERC20(token0).safeApprove(router, 0);\\n        IERC20(token1).safeApprove(router, 0);\\n\\n        paused = true;\\n    }\\n\\n    /**\\n     * @dev Retire the vault.\\n     */\\n    function retire() external onlyOwner {\\n        // Stop vault\\n        _pause();\\n\\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\\n        uint256 earnedAmt = IERC20(cake).balanceOf(address(this));\\n        if (earnedAmt > 0) {\\n            IERC20(cake).safeTransfer(treasury, earnedAmt);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x34f10cc10f2d25301dd67cddde1d8650eb78698b88e081747b6297d25ed1754a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c80637c10eef211610167578063ab033ea9116100ce578063ed0f435211610087578063ed0f4352146105e4578063f1068454146105ed578063f2fde38b14610614578063f384a44c14610627578063f3fef3a314610630578063f887ea4014610658576102a0565b8063ab033ea914610536578063aff6609514610549578063c89039c51461055c578063cc917f4e14610583578063d21220a714610596578063dce17484146105bd576102a0565b80638da5cb5b116101205780638da5cb5b146104d15780638fab5917146104e2578063952e6ee9146104f55780639ae0ddaf146104fe5780639ec5a89414610507578063a4874d771461052e576102a0565b80637c10eef21461046e5780637f010784146104815780638456cb5914610494578063871392c41461049c57806387788782146104a557806387976583146104ae576102a0565b8063575a86b21161020b57806367206d40116101c457806367206d401461041f5780636926d05c14610432578063715018a6146104455780637215313d1461044d578063790f6e51146104565780637a34048814610465576102a0565b8063575a86b2146103985780635aa6e675146103bf5780635b5be8dd146102a55780635c975abb146103d257806361d027b3146103ef578063649677e114610416576102a0565b80633f4ba83a1161025d5780633f4ba83a1461035957806344a3955e146103635780634641257d1461036c5780634700d3051461037457806347e7ef241461037c5780634adae0da1461038f576102a0565b806304448370146102a55780630dfe1681146102c157806313c50bea1461030057806319714fac1461030f5780633659cfe6146103225780633e032a3b14610350575b600080fd5b6102ae61271081565b6040519081526020015b60405180910390f35b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102b8565b6102ae67016345785d8a000081565b6102e861031d366004612dcc565b61067f565b610335610330366004612c36565b6106a9565b604080519384526020840192909252908201526060016102b8565b6102ae60095481565b610361610958565b005b6102ae60045481565b6103616109d7565b610361610a7a565b6102ae61038a366004612c50565b610cc5565b6102ae60035481565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b6001546102e8906001600160a01b031681565b600e546103df9060ff1681565b60405190151581526020016102b8565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b6102ae60055481565b61036161042d366004612c79565b610df8565b6102e8610440366004612dcc565b610f35565b610361610f45565b6102ae6103de81565b6102ae678ac7230489e8000081565b6102ae61032081565b61036161047c366004612cb4565b610fb9565b6102e861048f366004612dcc565b6110ab565b6103616110bb565b6102ae600a5481565b6102ae60065481565b6103df6104bc366004612c36565b60026020526000908152604090205460ff1681565b6000546001600160a01b03166102e8565b6103616104f0366004612c36565b611110565b6102ae60075481565b6102ae6126de81565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b610361611184565b610361610544366004612c36565b6112af565b610361610557366004612c36565b611349565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b610361610591366004612e29565b6113ba565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b6102ae6103e881565b6102ae7f000000000000000000000000000000000000000000000000000000000000000081565b610361610622366004612c36565b611656565b6102ae60085481565b61064361063e366004612c50565b611740565b604080519283526020830191909152016102b8565b6102e87f000000000000000000000000000000000000000000000000000000000000000081565b600b818154811061068f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080336001600160a01b03166106c96000546001600160a01b031690565b6001600160a01b0316146106f85760405162461bcd60e51b81526004016106ef90612f22565b60405180910390fd5b6001600160a01b0384166107375760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b60448201526064016106ef565b61073f6119d5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156107a157600080fd5b505afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d99190612de4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561083e57600080fd5b505afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190612de4565b90506108ad6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016876000611a3b565b6108e16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168784611b92565b6109166001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016876000611a3b565b61094a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168783611b92565b600454969195509350915050565b6000546001600160a01b031633146109825760405162461bcd60e51b81526004016106ef90612f22565b600e5460ff166109be5760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b60448201526064016106ef565b60006003556109cb611c53565b600e805460ff19169055565b6001546001600160a01b03163314806109ff57503360009081526002602052604090205460ff165b610a4b5760405162461bcd60e51b815260206004820152601960248201527f21676f7665726e616e636520262620216861727665737465720000000000000060448201526064016106ef565b600e5460ff1615610a6e5760405162461bcd60e51b81526004016106ef90612f7d565b610a786000611e4c565b565b6000546001600160a01b03163314610aa45760405162461bcd60e51b81526004016106ef90612f22565b600e5460ff1615610ac75760405162461bcd60e51b81526004016106ef90612f7d565b604051632989754760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635312ea8e90602401600060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b50610bb79250506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690507f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b610c0c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b610c616001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b610cb66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b600e805460ff19166001179055565b600080546001600160a01b03163314610cf05760405162461bcd60e51b81526004016106ef90612f22565b600e5460ff1615610d135760405162461bcd60e51b81526004016106ef90612f7d565b6001600160a01b038316610d515760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b60448201526064016106ef565b610d866001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612617565b600354829015801590610d9b57506000600454115b15610dd85761271060035460055460045486610db7919061302a565b610dc1919061302a565b610dcb919061300a565b610dd5919061300a565b90505b80600454610de69190612ff2565b600455610df1611c53565b9392505050565b6001546001600160a01b03163314610e225760405162461bcd60e51b81526004016106ef90612efd565b6001600160a01b038316610e485760405162461bcd60e51b81526004016106ef90612f57565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610eb25760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b60448201526064016106ef565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610f1c5760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b60448201526064016106ef565b610f306001600160a01b038416828461264f565b505050565b600c818154811061068f57600080fd5b6000546001600160a01b03163314610f6f5760405162461bcd60e51b81526004016106ef90612f22565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610fe35760405162461bcd60e51b81526004016106ef90612f22565b6001600160a01b0384166110225760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b60448201526064016106ef565b811561105d5761105d6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853085612617565b8015611098576110986001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853084612617565b60048390556110a5611c53565b50505050565b600d818154811061068f57600080fd5b6000546001600160a01b031633146110e55760405162461bcd60e51b81526004016106ef90612f22565b600e5460ff16156111085760405162461bcd60e51b81526004016106ef90612f7d565b610a786119d5565b6001546001600160a01b0316331461113a5760405162461bcd60e51b81526004016106ef90612efd565b6001600160a01b0381166111605760405162461bcd60e51b81526004016106ef90612f57565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000546001600160a01b031633146111ae5760405162461bcd60e51b81526004016106ef90612f22565b6111b66119d5565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561121857600080fd5b505afa15801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190612de4565b905080156112ac576112ac6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361264f565b50565b6001546001600160a01b031633146112d95760405162461bcd60e51b81526004016106ef90612efd565b6001600160a01b0381166112ff5760405162461bcd60e51b81526004016106ef90612f57565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f24a8c4807b324a269a51827c3446b8ac1cc13810d7d0c0ca1efafabddd7b621990600090a250565b6001546001600160a01b031633146113735760405162461bcd60e51b81526004016106ef90612efd565b6001600160a01b0381166113995760405162461bcd60e51b81526004016106ef90612f57565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6001546001600160a01b031633146113e45760405162461bcd60e51b81526004016106ef90612efd565b6126de8610156114275760405162461bcd60e51b815260206004820152600e60248201526d08595b9d1c985b98d9519959531360921b60448201526064016106ef565b61271086111561146b5760405162461bcd60e51b815260206004820152600f60248201526e042cadce8e4c2dcc6ca8ccaca9ac2f608b1b60448201526064016106ef565b60058690556103208511156114b65760405162461bcd60e51b8152602060048201526011602482015270085c195c999bdc9b585b98d95199595553607a1b60448201526064016106ef565b60068590556103e86114c88486612ff2565b146115025760405162461bcd60e51b815260206004820152600a60248201526910b332b2a330b1ba37b960b11b60448201526064016106ef565b600784905560088390556103de82111561154c5760405162461bcd60e51b815260206004820152600b60248201526a085cdb1a5c1c1859d9555360aa1b60448201526064016106ef565b6009829055678ac7230489e800008111156115a25760405162461bcd60e51b8152602060048201526016602482015275085b5a5b91585c9b9959151bd4995a5b9d995cdd155360521b60448201526064016106ef565b67016345785d8a00008110156115f35760405162461bcd60e51b8152602060048201526016602482015275085b5a5b91585c9b9959151bd4995a5b9d995cdd131360521b60448201526064016106ef565b600a8190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527fcb4ecc62ba7efb533c814d48b7dc1c8f06063d93bf32c3730c1ec47011e8747a9060c00160405180910390a1505050505050565b6000546001600160a01b031633146116805760405162461bcd60e51b81526004016106ef90612f22565b6001600160a01b0381166116e55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ef565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805481906001600160a01b0316331461176d5760405162461bcd60e51b81526004016106ef90612f22565b6001600160a01b0384166117ab5760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b60448201526064016106ef565b600083116117e55760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b60448201526064016106ef565b6000600354600454856117f8919061302a565b611802919061300a565b905060045481111561181357506004545b806004546118219190613049565b600455600e5460ff166118cf57604051630441a3e760e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b1580156118b657600080fd5b505af11580156118ca573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119699190612de4565b905080851115611977578094505b8460035410156119875760035494505b846003546119959190613049565b6003556119cc6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338761264f565b50949293505050565b600e5460ff16610a78576119ea600354611e4c565b610bb76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000060005b801580611ac45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611a8a57600080fd5b505afa158015611a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac29190612de4565b155b611b2f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016106ef565b6040516001600160a01b038316602482015260448101829052610f3090849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261267f565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611bde57600080fd5b505afa158015611bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c169190612de4565b611c209190612ff2565b6040516001600160a01b0385166024820152604481018290529091506110a590859063095ea7b360e01b90606401611b5b565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611cb557600080fd5b505afa158015611cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ced9190612de4565b905080600354611cfd9190612ff2565b600355611d556001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b611da96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611b92565b604051631c57762b60e31b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e2bbb15890604401600060405180830381600087803b158015611e3157600080fd5b505af1158015611e45573d6000803e3d6000fd5b5050505050565b604051630441a3e760e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b158015611ed457600080fd5b505af1158015611ee8573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015611f4e57600080fd5b505afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190612de4565b9050600a54811015611f9857506112ac565b611fed6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b6120416001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611b92565b61204a81612751565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612146576121467f00000000000000000000000000000000000000000000000000000000000000006120d460028461300a565b600954600c80548060200260200160405190810160405280929190818152602001828054801561212d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161210f575b505050505030426102586121419190612ff2565b61293a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612239576122397f00000000000000000000000000000000000000000000000000000000000000006121ce60028461300a565b600954600d80548060200260200160405190810160405280929190818152602001828054801561212d576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161210f57505050505030426102586121419190612ff2565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561229b57600080fd5b505afa1580156122af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d39190612de4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561233857600080fd5b505afa15801561234c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123709190612de4565b90506000821180156123825750600081115b1561260f576123dc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b6124316001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611a3b565b6124856001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611b92565b6124d96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611b92565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e8e337007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085856000803061255c42610258612ff2565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b1580156125d357600080fd5b505af11580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190612dfc565b5050505b6110a5611c53565b6040516001600160a01b03808516602483015283166044820152606481018290526110a59085906323b872dd60e01b90608401611b5b565b6040516001600160a01b038316602482015260448101829052610f3090849063a9059cbb60e01b90606401611b5b565b60006126d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612aa79092919063ffffffff16565b805190915015610f3057808060200190518101906126f29190612dac565b610f305760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106ef565b60008115612932576006541561293257600061271060065484612774919061302a565b61277e919061300a565b905060006103e860085483612793919061302a565b61279d919061300a565b90506128517f000000000000000000000000000000000000000000000000000000000000000082600954600b80548060200260200160405190810160405280929190818152602001828054801561281d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116127ff575b50505050507f0000000000000000000000000000000000000000000000000000000000000000426102586121419190612ff2565b60006103e860075484612864919061302a565b61286e919061300a565b90506129227f000000000000000000000000000000000000000000000000000000000000000082600954600b8054806020026020016040519081016040528092919081815260200182805480156128ee57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116128d0575b50505050507f0000000000000000000000000000000000000000000000000000000000000000426102586121419190612ff2565b61292c8386613049565b94505050505b50805b919050565b60405163d06ca61f60e01b81526000906001600160a01b0388169063d06ca61f9061296b9089908890600401612f9d565b60006040518083038186803b15801561298357600080fd5b505afa158015612997573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129bf9190810190612cec565b9050600081600183516129d29190613049565b815181106129f057634e487b7160e01b600052603260045260246000fd5b60200260200101519050876001600160a01b03166338ed1739886103e88985612a19919061302a565b612a23919061300a565b8888886040518663ffffffff1660e01b8152600401612a46959493929190612fb6565b600060405180830381600087803b158015612a6057600080fd5b505af1158015612a74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a9c9190810190612cec565b505050505050505050565b6060612ab68484600085612abe565b949350505050565b606082471015612b1f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106ef565b843b612b6d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ef565b600080866001600160a01b03168587604051612b899190612eae565b60006040518083038185875af1925050503d8060008114612bc6576040519150601f19603f3d011682016040523d82523d6000602084013e612bcb565b606091505b5091509150612bdb828286612be6565b979650505050505050565b60608315612bf5575081610df1565b825115612c055782518084602001fd5b8160405162461bcd60e51b81526004016106ef9190612eca565b80356001600160a01b038116811461293557600080fd5b600060208284031215612c47578081fd5b610df182612c1f565b60008060408385031215612c62578081fd5b612c6b83612c1f565b946020939093013593505050565b600080600060608486031215612c8d578081fd5b612c9684612c1f565b925060208401359150612cab60408501612c1f565b90509250925092565b60008060008060808587031215612cc9578081fd5b612cd285612c1f565b966020860135965060408601359560600135945092505050565b60006020808385031215612cfe578182fd5b825167ffffffffffffffff80821115612d15578384fd5b818501915085601f830112612d28578384fd5b815181811115612d3a57612d3a6130a2565b8060051b604051601f19603f83011681018181108582111715612d5f57612d5f6130a2565b604052828152858101935084860182860187018a1015612d7d578788fd5b8795505b83861015612d9f578051855260019590950194938601938601612d81565b5098975050505050505050565b600060208284031215612dbd578081fd5b81518015158114610df1578182fd5b600060208284031215612ddd578081fd5b5035919050565b600060208284031215612df5578081fd5b5051919050565b600080600060608486031215612e10578283fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c08789031215612e41578182fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000815180845260208085019450808401835b83811015612ea35781516001600160a01b031687529582019590820190600101612e7e565b509495945050505050565b60008251612ec0818460208701613060565b9190910192915050565b6000602082528251806020840152612ee9816040850160208701613060565b601f01601f19169190910160400192915050565b6020808252600b908201526a21676f7665726e616e636560a81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b600083825260406020830152612ab66040830184612e6b565b600086825285602083015260a06040830152612fd560a0830186612e6b565b6001600160a01b0394909416606083015250608001529392505050565b600082198211156130055761300561308c565b500190565b60008261302557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156130445761304461308c565b500290565b60008282101561305b5761305b61308c565b500390565b60005b8381101561307b578181015183820152602001613063565b838111156110a55750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000803000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addHarvester(address)": {
        "details": "Add a harvester address from Governance GNOSIS Safe."
      },
      "constructor": {
        "details": "Implementation of PancakeSwap LP autocompounding strategy."
      },
      "deposit(address,uint256)": {
        "details": "Function to transfer tokens BalleMaster -> strategy and put it to work."
      },
      "harvest()": {
        "details": "Function to harvest earnings and reinvest."
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "details": "Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "panic()": {
        "details": "Stop the vault with emergencyWithdraw from farm."
      },
      "pause()": {
        "details": "Stop the vault."
      },
      "removeHarvester(address)": {
        "details": "Remove a harvester address from Governance GNOSIS Safe."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "retire()": {
        "details": "Retire the vault."
      },
      "setGovernance(address)": {
        "details": "Function to change the governance address."
      },
      "setSettings(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Function to change strategy settings."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Restart the vault."
      },
      "upgradeFrom(address,uint256,uint256,uint256)": {
        "details": "Complete upgrade from the old strategy."
      },
      "upgradeTo(address)": {
        "details": "Prepare to upgrade strategy to the new one indicated."
      },
      "withdraw(address,uint256)": {
        "details": "Function to transfer tokens strategy -> BalleMaster."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3806,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3810,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "harvesters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3813,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "depositTotal",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3816,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3819,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "entranceFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3828,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "performanceFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3837,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "rewardsFeeFactor",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3840,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "treasuryFeeFactor",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3846,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "slippage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3852,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "minEarnedToReinvest",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3861,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "cakeToBallePath",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3864,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "cakeToToken0Path",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3867,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "cakeToToken1Path",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3870,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "paused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}