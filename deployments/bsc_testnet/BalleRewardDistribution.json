{
  "address": "0xe79D4c20F38C7264F1b6c813394c37d33dAc0e73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_balleMaster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardFund",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfBlocks",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "BalleRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXTRA_REWARD_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTRA_REWARD_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balle",
      "outputs": [
        {
          "internalType": "contract BALLEv2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balleMaster",
      "outputs": [
        {
          "internalType": "contract IBalleMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseRewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardStartBlock",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardFund",
          "type": "address"
        }
      ],
      "name": "setRewardFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        }
      ],
      "name": "setStakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x38b5ed13d2cf40960f510d40cdac0743cbe99602f6ac5ec6587c4a06e98c8353",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0xe79D4c20F38C7264F1b6c813394c37d33dAc0e73",
    "transactionIndex": 1,
    "gasUsed": "1253872",
    "logsBloom": "0x
    "blockHash": "0xbab320c8a7b2206633c9d4f0b041a8f9d4de94aace2feebfe51ae6f9bfbb2cfd",
    "transactionHash": "0x38b5ed13d2cf40960f510d40cdac0743cbe99602f6ac5ec6587c4a06e98c8353",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9016383,
        "transactionHash": "0x38b5ed13d2cf40960f510d40cdac0743cbe99602f6ac5ec6587c4a06e98c8353",
        "address": "0xe79D4c20F38C7264F1b6c813394c37d33dAc0e73",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbab320c8a7b2206633c9d4f0b041a8f9d4de94aace2feebfe51ae6f9bfbb2cfd"
      }
    ],
    "blockNumber": 9016383,
    "cumulativeGasUsed": "1397723",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b",
    "0x59b75eE4Fe79A5C807eB6553c110B5295c675D35",
    "0x8ADB7044d41aC5B378281e0ebd9CD6eAC43a53F8",
    "0x783557C3A2E98D58A9c6A0Fa10a475fcad62477f"
  ],
  "solcInputHash": "360ef9858f9d13e2da8b2e0e5d9f9b58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balleMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardFund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"BalleRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXTRA_REWARD_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTRA_REWARD_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balle\",\"outputs\":[{\"internalType\":\"contract BALLEv2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balleMaster\",\"outputs\":[{\"internalType\":\"contract IBalleMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardStartBlock\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardFund\",\"type\":\"address\"}],\"name\":\"setRewardFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the BALLE Reward Distribution for the staking pool. This contract will distribute the rewards from Reward Fund to the Rewarder of the Staking. The owner of the contract is the Governance Gnosis Safe multisig.\",\"kind\":\"dev\",\"methods\":{\"distributeReward(uint256,uint256,uint256,uint256)\":{\"details\":\"Function to distribute reward.\",\"params\":{\"_baseRewardAmount\":\": Reward amount from performance fees to take from BalleRewardFund.\",\"_duration\":\": Period for the reward distribution. From 24h to 7 days.\",\"_multiplier\":\": Extra reward amount to add from new minted BALLE, while there is free supply (100 = 1).\"}},\"inCaseTokensGetStuck(address,uint256,address)\":{\"details\":\"Function to use from Governance Gnosis Safe multisig only in case tokens get stuck. This is to be used if someone, for example, sends tokens to the contract by mistake. There is no guarantee governance will vote to return these. No tokens are stored in this contract, so, it's safe to transfer any token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardFund(address)\":{\"details\":\"Function to change the rewardFund address.\"},\"setRewarder(address)\":{\"details\":\"Function to change the rewarder address.\"},\"setStakingPool(address)\":{\"details\":\"Function to change the stakingPool address.\"},\"setTreasury(address)\":{\"details\":\"Function to change the treasury address.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/BalleRewardDistribution.sol\":\"BalleRewardDistribution\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IBalleMaster.sol\":{\"content\":\"// contracts/interfaces/IBalleMaster.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBalleMaster {\\n    // BALLE tokens created per block.\\n    function ballePerBlock() external view returns (uint256);\\n\\n    // The block number when BALLE rewards distribution ends.\\n    function endBlock() external view returns (uint256);\\n\\n    // BALLE to be minted for rewards (distributed but not minted).\\n    function balleToMint() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x675ba5799a8934005c6d67beed56a673223175b1d0bfe7fedc7e6c9975b4f72d\",\"license\":\"MIT\"},\"contracts/interfaces/IBalleRewardFund.sol\":{\"content\":\"// contracts/interfaces/IBalleRewardFund.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBalleRewardFund {\\n    // Transfer tokens to the rewarder.\\n    function sendRewardAmount(address rewarder, uint256 amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x653b7d85821ab10742a2921643a5128134088c89add465ebde387f4c161e468a\",\"license\":\"MIT\"},\"contracts/interfaces/IBalleStakingPool.sol\":{\"content\":\"// contracts/interfaces/IBalleStakingPool.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBalleStakingPool {\\n    // Add reward to distribute. The funds should be transferred to the Rewarder contract.\\n    function addReward(\\n        uint256 _amount,\\n        uint256 _numberOfBlocks,\\n        uint256 _multiplier,\\n        uint256 _rewardStartBlock\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcc346486d363ddeb4d714e738b223cf4bf8310602cf6bfd20e46ef01b308856e\",\"license\":\"MIT\"},\"contracts/staking/BalleRewardDistribution.sol\":{\"content\":\"// contracts/staking/BalleRewardDistribution.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../token/BALLEv2.sol\\\";\\nimport \\\"../interfaces/IBalleMaster.sol\\\";\\nimport \\\"../interfaces/IBalleRewardFund.sol\\\";\\nimport \\\"../interfaces/IBalleStakingPool.sol\\\";\\n\\n/**\\n * @dev Implementation of the BALLE Reward Distribution for the staking pool.\\n * This contract will distribute the rewards from Reward Fund to the Rewarder of the Staking.\\n * The owner of the contract is the Governance Gnosis Safe multisig.\\n */\\ncontract BalleRewardDistribution is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // BALLE token address.\\n    BALLEv2 public immutable balle;\\n    // The BalleMaster contract.\\n    IBalleMaster public immutable balleMaster;\\n\\n    // The treasury contract.\\n    address public treasury;\\n    // The rewardFund contract.\\n    address public rewardFund;\\n    // The staking pool contract.\\n    address public stakingPool;\\n    // The staking pool rewarder contract.\\n    address public rewarder;\\n\\n    // 10% fee on extra reward.\\n    uint256 public constant EXTRA_REWARD_FEE = 1000;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant EXTRA_REWARD_FEE_MAX = 10000;\\n\\n    event BalleRewardDistributed(\\n        address indexed pool,\\n        uint256 baseAmount,\\n        uint256 extraAmount,\\n        uint256 feeAmount,\\n        uint256 numberOfBlocks,\\n        uint256 multiplier\\n    );\\n\\n    constructor(\\n        address _balle,\\n        address _balleMaster,\\n        address _treasury,\\n        address _rewardFund\\n    ) {\\n        require(_balle != address(0), \\\"!balle\\\");\\n        require(_balleMaster != address(0), \\\"!balleMaster\\\");\\n        require(_treasury != address(0), \\\"!treasury\\\");\\n        require(_rewardFund != address(0), \\\"!rewardFund\\\");\\n\\n        balle = BALLEv2(_balle);\\n        balleMaster = IBalleMaster(_balleMaster);\\n        treasury = _treasury;\\n        rewardFund = _rewardFund;\\n    }\\n\\n    /**\\n     * @dev Function to change the treasury address.\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"zero address\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @dev Function to change the rewardFund address.\\n     */\\n    function setRewardFund(address _rewardFund) external onlyOwner {\\n        require(_rewardFund != address(0), \\\"zero address\\\");\\n        rewardFund = _rewardFund;\\n    }\\n\\n    /**\\n     * @dev Function to change the stakingPool address.\\n     */\\n    function setStakingPool(address _stakingPool) external onlyOwner {\\n        require(_stakingPool != address(0), \\\"zero address\\\");\\n        stakingPool = _stakingPool;\\n    }\\n\\n    /**\\n     * @dev Function to change the rewarder address.\\n     */\\n    function setRewarder(address _rewarder) external onlyOwner {\\n        require(_rewarder != address(0), \\\"zero address\\\");\\n        rewarder = _rewarder;\\n    }\\n\\n    /**\\n     * @dev Function to distribute reward.\\n     * @param _duration: Period for the reward distribution. From 24h to 7 days.\\n     * @param _baseRewardAmount: Reward amount from performance fees to take from BalleRewardFund.\\n     * @param _multiplier: Extra reward amount to add from new minted BALLE, while there is free supply (100 = 1).\\n     */\\n    function distributeReward(\\n        uint256 _duration,\\n        uint256 _baseRewardAmount,\\n        uint256 _multiplier,\\n        uint256 _rewardStartBlock\\n    ) external onlyOwner {\\n        require(_duration >= 24 hours, \\\"!min duration\\\");\\n        require(_duration <= 7 days, \\\"!max duration\\\");\\n        require(_baseRewardAmount > 0, \\\"!baseRewardAmount\\\");\\n        require(_multiplier >= 100, \\\"!multiplier\\\");\\n        require(stakingPool != address(0), \\\"!stakingPool\\\");\\n        require(rewarder != address(0), \\\"!rewarder\\\");\\n\\n        // Check if rewardFund has balance.\\n        uint256 rewardFundBalance = IERC20(balle).balanceOf(rewardFund);\\n        require(rewardFundBalance >= _baseRewardAmount, \\\"!rewardFundBalance\\\");\\n\\n        // Extra Reward amount.\\n        uint256 extraRewardAmount = (_baseRewardAmount * _multiplier) / 100;\\n        // Check if we can mint extraRewardAmount new BALLE.\\n        uint256 toBeMintedOnVaults = 0;\\n        if (block.number < balleMaster.endBlock()) {\\n            toBeMintedOnVaults = (balleMaster.endBlock() - block.number) * balleMaster.ballePerBlock();\\n        }\\n        toBeMintedOnVaults = toBeMintedOnVaults + balleMaster.balleToMint();\\n        uint256 freeSupply = balle.cap() - balle.totalSupply() - toBeMintedOnVaults;\\n        if (extraRewardAmount > freeSupply) {\\n            // recalculate to fit BALLE cap.\\n            extraRewardAmount = freeSupply;\\n            _multiplier = (extraRewardAmount * 100) / _baseRewardAmount;\\n        }\\n\\n        // Extra Reward fee.\\n        uint256 extraRewardFee = (extraRewardAmount * EXTRA_REWARD_FEE) / EXTRA_REWARD_FEE_MAX;\\n\\n        // Send BALLE from RewardFund.\\n        IBalleRewardFund(rewardFund).sendRewardAmount(rewarder, _baseRewardAmount);\\n\\n        // Mint BALLE.\\n        balle.mint(treasury, extraRewardFee);\\n        balle.mint(rewarder, extraRewardAmount - extraRewardFee);\\n\\n        // Add reward to staking pool.\\n        IBalleStakingPool(stakingPool).addReward(\\n            _baseRewardAmount + extraRewardAmount - extraRewardFee,\\n            _duration / 3,\\n            _multiplier,\\n            _rewardStartBlock\\n        );\\n\\n        emit BalleRewardDistributed(\\n            stakingPool,\\n            _baseRewardAmount,\\n            extraRewardAmount - extraRewardFee,\\n            extraRewardFee,\\n            _duration / 3,\\n            _multiplier\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\\n     * There is no guarantee governance will vote to return these.\\n     * No tokens are stored in this contract, so, it's safe to transfer any token.\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public onlyOwner {\\n        require(_to != address(0), \\\"zero address\\\");\\n\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x22af430b685d52704e85d50a169388c4deb8091d84d4807c479b4cb6c3e63212\",\"license\":\"MIT\"},\"contracts/token/BALLEv2.sol\":{\"content\":\"// contracts/token/BALLEv2.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract BALLEv2 is ERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    // Governance Gnosis Safe multisig address\\n    address public governance;\\n    // Authorized minters\\n    mapping(address => bool) public minters;\\n    // Max cap (40,000 BALLE)\\n    uint256 public immutable cap;\\n\\n    event SetGovernance(address indexed addr);\\n    event AddMinter(address indexed addr);\\n    event RemoveMinter(address indexed addr);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _cap\\n    ) ERC20(string(_name), string(_symbol)) {\\n        require(_cap > 0, \\\"BALLE: cap is 0\\\");\\n        cap = _cap;\\n        governance = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address\\n     */\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address or an authorized minter\\n     */\\n    modifier onlyMinter() {\\n        require(minters[msg.sender] || msg.sender == governance, \\\"!minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the new Governance Gnosis Safe multisig address\\n     */\\n    function setGovernance(address _governance) external onlyGovernance {\\n        require(_governance != address(0), \\\"zero address\\\");\\n        governance = _governance;\\n        emit SetGovernance(_governance);\\n    }\\n\\n    /**\\n     * @dev Add a minter address\\n     */\\n    function addMinter(address _minter) external onlyGovernance {\\n        require(_minter != address(0), \\\"zero address\\\");\\n        minters[_minter] = true;\\n        emit AddMinter(_minter);\\n    }\\n\\n    /**\\n     * @dev Remove a minter address\\n     */\\n    function removeMinter(address _minter) external onlyGovernance {\\n        require(_minter != address(0), \\\"zero address\\\");\\n        minters[_minter] = false;\\n        emit RemoveMinter(_minter);\\n    }\\n\\n    /**\\n     * @dev Creates _amount tokens and assigns them to _to account, increasing\\n     * the total supply until the cap is reached.\\n     */\\n    function mint(address _to, uint256 _amount) external onlyMinter {\\n        require(ERC20.totalSupply() + _amount <= cap, \\\"!cap\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\\n     * There is no guarantee governance will vote to return these.\\n     * No tokens are stored in this contract, so, it's safe to transfer any token.\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public onlyGovernance {\\n        require(_to != address(0), \\\"zero address\\\");\\n\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2bb612e003eed0c74416be27724540773e1e79ac0f3121239e7a0ef13430db54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001724380380620017248339810160408190526200003491620001f7565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038416620000ba5760405162461bcd60e51b81526020600482015260066024820152652162616c6c6560d01b60448201526064015b60405180910390fd5b6001600160a01b038316620001015760405162461bcd60e51b815260206004820152600c60248201526b10b130b63632a6b0b9ba32b960a11b6044820152606401620000b1565b6001600160a01b038216620001455760405162461bcd60e51b815260206004820152600960248201526821747265617375727960b81b6044820152606401620000b1565b6001600160a01b0381166200018b5760405162461bcd60e51b815260206004820152600b60248201526a085c995dd85c99119d5b9960aa1b6044820152606401620000b1565b6001600160601b0319606094851b81166080529290931b90911660a052600180546001600160a01b039283166001600160a01b0319918216179091556002805492909316911617905562000253565b80516001600160a01b0381168114620001f257600080fd5b919050565b600080600080608085870312156200020d578384fd5b6200021885620001da565b93506200022860208601620001da565b92506200023860408601620001da565b91506200024860608601620001da565b905092959194509250565b60805160601c60a05160601c611466620002be600039600081816101f201528181610552015281816105ea0152818161067c015261072401526000818161022c01528181610473015281816107c401528181610855015281816109f10152610a5a01526114666000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806386d84386116100a2578063dcc3e06e11610071578063dcc3e06e14610214578063ded0da1014610227578063efe222661461024e578063f0f4426014610261578063f2fde38b146102745761010b565b806386d84386146101c0578063884f6f7f146101c95780638da5cb5b146101dc578063bb892620146101ed5761010b565b806361d027b3116100de57806361d027b31461017b57806367206d401461018e5780636b4ab63f146101a1578063715018a6146101b85761010b565b80630c56ae3b14610110578063145cfcde146101405780633028f63a146101555780633a6462e414610168575b600080fd5b600354610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046112ca565b610287565b005b61015361016336600461123d565b610bff565b61015361017636600461123d565b610c71565b600154610123906001600160a01b031681565b61015361019c366004611257565b610ce3565b6101aa6103e881565b604051908152602001610137565b610153610d4c565b6101aa61271081565b6101536101d736600461123d565b610dc0565b6000546001600160a01b0316610123565b6101237f000000000000000000000000000000000000000000000000000000000000000081565b600454610123906001600160a01b031681565b6101237f000000000000000000000000000000000000000000000000000000000000000081565b600254610123906001600160a01b031681565b61015361026f36600461123d565b610e32565b61015361028236600461123d565b610ea4565b6000546001600160a01b031633146102ba5760405162461bcd60e51b81526004016102b19061134a565b60405180910390fd5b620151808410156102fd5760405162461bcd60e51b815260206004820152600d60248201526c10b6b4b710323ab930ba34b7b760991b60448201526064016102b1565b62093a808411156103405760405162461bcd60e51b815260206004820152600d60248201526c10b6b0bc10323ab930ba34b7b760991b60448201526064016102b1565b600083116103845760405162461bcd60e51b81526020600482015260116024820152700858985cd954995dd85c99105b5bdd5b9d607a1b60448201526064016102b1565b60648210156103c35760405162461bcd60e51b815260206004820152600b60248201526a10b6bab63a34b83634b2b960a91b60448201526064016102b1565b6003546001600160a01b031661040a5760405162461bcd60e51b815260206004820152600c60248201526b085cdd185ada5b99d41bdbdb60a21b60448201526064016102b1565b6004546001600160a01b031661044e5760405162461bcd60e51b815260206004820152600960248201526810b932bbb0b93232b960b91b60448201526064016102b1565b6002546040516370a0823160e01b81526001600160a01b0391821660048201526000917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156104b557600080fd5b505afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed91906112b2565b9050838110156105345760405162461bcd60e51b81526020600482015260126024820152712172657761726446756e6442616c616e636560701b60448201526064016102b1565b6000606461054285876113dd565b61054c91906113bd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663083c63236040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a957600080fd5b505afa1580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906112b2565b431015610722577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166344bd5b4f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064157600080fd5b505afa158015610655573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067991906112b2565b437f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663083c63236040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d357600080fd5b505afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b91906112b2565b61071591906113fc565b61071f91906113dd565b90505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632b5b0a976040518163ffffffff1660e01b815260040160206040518083038186803b15801561077b57600080fd5b505afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b391906112b2565b6107bd90826113a5565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085391906112b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663355274ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e491906112b2565b6108ee91906113fc565b6108f891906113fc565b90508083111561091e57915081866109118260646113dd565b61091b91906113bd565b95505b600061271061092f6103e8866113dd565b61093991906113bd565b6002546004805460405163a362184760e01b81526001600160a01b0391821692810192909252602482018c905292935091169063a362184790604401602060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c791906112b2565b506001546040516340c10f1960e01b81526001600160a01b039182166004820152602481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610a3757600080fd5b505af1158015610a4b573d6000803e3d6000fd5b50506004546001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693506340c10f19925016610a8f84886113fc565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b50506003546001600160a01b031691506329206a70905082610b0b878c6113a5565b610b1591906113fc565b610b2060038d6113bd565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018a905260648101899052608401600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b50506003546001600160a01b031691507f9f870ae3696804db87690a6de4069b0d2182c337e6a7061dc5a70d77224c5a28905089610bbe84886113fc565b84610bca60038f6113bd565b604080519485526020850193909352918301526060820152608081018a905260a00160405180910390a2505050505050505050565b6000546001600160a01b03163314610c295760405162461bcd60e51b81526004016102b19061134a565b6001600160a01b038116610c4f5760405162461bcd60e51b81526004016102b19061137f565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c9b5760405162461bcd60e51b81526004016102b19061134a565b6001600160a01b038116610cc15760405162461bcd60e51b81526004016102b19061137f565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d0d5760405162461bcd60e51b81526004016102b19061134a565b6001600160a01b038116610d335760405162461bcd60e51b81526004016102b19061137f565b610d476001600160a01b0384168284610f8e565b505050565b6000546001600160a01b03163314610d765760405162461bcd60e51b81526004016102b19061134a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610dea5760405162461bcd60e51b81526004016102b19061134a565b6001600160a01b038116610e105760405162461bcd60e51b81526004016102b19061137f565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e5c5760405162461bcd60e51b81526004016102b19061134a565b6001600160a01b038116610e825760405162461bcd60e51b81526004016102b19061137f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610ece5760405162461bcd60e51b81526004016102b19061134a565b6001600160a01b038116610f335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b1565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610d479286929160009161101e91851690849061109b565b805190915015610d47578080602001905181019061103c9190611292565b610d475760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102b1565b60606110aa84846000856110b4565b90505b9392505050565b6060824710156111155760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102b1565b61111e856111e3565b61116a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b1565b600080866001600160a01b0316858760405161118691906112fb565b60006040518083038185875af1925050503d80600081146111c3576040519150601f19603f3d011682016040523d82523d6000602084013e6111c8565b606091505b50915091506111d88282866111ed565b979650505050505050565b803b15155b919050565b606083156111fc5750816110ad565b82511561120c5782518084602001fd5b8160405162461bcd60e51b81526004016102b19190611317565b80356001600160a01b03811681146111e857600080fd5b60006020828403121561124e578081fd5b6110ad82611226565b60008060006060848603121561126b578182fd5b61127484611226565b92506020840135915061128960408501611226565b90509250925092565b6000602082840312156112a3578081fd5b815180151581146110ad578182fd5b6000602082840312156112c3578081fd5b5051919050565b600080600080608085870312156112df578081fd5b5050823594602084013594506040840135936060013592509050565b6000825161130d818460208701611413565b9190910192915050565b6000602082528251806020840152611336816040850160208701611413565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b600082198211156113b8576113b8611443565b500190565b6000826113d857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156113f7576113f7611443565b500290565b60008282101561140e5761140e611443565b500390565b60005b8381101561142e578181015183820152602001611416565b8381111561143d576000848401525b50505050565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000803000a",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Implementation of the BALLE Reward Distribution for the staking pool. This contract will distribute the rewards from Reward Fund to the Rewarder of the Staking. The owner of the contract is the Governance Gnosis Safe multisig.",
    "kind": "dev",
    "methods": {
      "distributeReward(uint256,uint256,uint256,uint256)": {
        "details": "Function to distribute reward.",
        "params": {
          "_baseRewardAmount": ": Reward amount from performance fees to take from BalleRewardFund.",
          "_duration": ": Period for the reward distribution. From 24h to 7 days.",
          "_multiplier": ": Extra reward amount to add from new minted BALLE, while there is free supply (100 = 1)."
        }
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "details": "Function to use from Governance Gnosis Safe multisig only in case tokens get stuck. This is to be used if someone, for example, sends tokens to the contract by mistake. There is no guarantee governance will vote to return these. No tokens are stored in this contract, so, it's safe to transfer any token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardFund(address)": {
        "details": "Function to change the rewardFund address."
      },
      "setRewarder(address)": {
        "details": "Function to change the rewarder address."
      },
      "setStakingPool(address)": {
        "details": "Function to change the stakingPool address."
      },
      "setTreasury(address)": {
        "details": "Function to change the treasury address."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/staking/BalleRewardDistribution.sol:BalleRewardDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3849,
        "contract": "contracts/staking/BalleRewardDistribution.sol:BalleRewardDistribution",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3851,
        "contract": "contracts/staking/BalleRewardDistribution.sol:BalleRewardDistribution",
        "label": "rewardFund",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3853,
        "contract": "contracts/staking/BalleRewardDistribution.sol:BalleRewardDistribution",
        "label": "stakingPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3855,
        "contract": "contracts/staking/BalleRewardDistribution.sol:BalleRewardDistribution",
        "label": "rewarder",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}