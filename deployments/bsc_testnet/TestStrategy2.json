{
  "address": "0xb819d1c7B615E47229F99835082239B4B62edfd6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balleMaster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balleMaster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        }
      ],
      "name": "emergencyUpgradeTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmt",
          "type": "uint256"
        }
      ],
      "name": "upgradeFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dd5c8df0d94181839c0103f598ab363acb6cfbb4e70506e77f5408410d96814",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0xb819d1c7B615E47229F99835082239B4B62edfd6",
    "transactionIndex": 0,
    "gasUsed": "1199285",
    "logsBloom": "0x
    "blockHash": "0xc731c96c1524802563300643f32495eb1de9f952bd2b6c27d8dc0e377ec8b2d3",
    "transactionHash": "0x0dd5c8df0d94181839c0103f598ab363acb6cfbb4e70506e77f5408410d96814",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8412475,
        "transactionHash": "0x0dd5c8df0d94181839c0103f598ab363acb6cfbb4e70506e77f5408410d96814",
        "address": "0xb819d1c7B615E47229F99835082239B4B62edfd6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc731c96c1524802563300643f32495eb1de9f952bd2b6c27d8dc0e377ec8b2d3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8412475,
        "transactionHash": "0x0dd5c8df0d94181839c0103f598ab363acb6cfbb4e70506e77f5408410d96814",
        "address": "0xb819d1c7B615E47229F99835082239B4B62edfd6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355",
          "0x00000000000000000000000079c56bb227fe9c52ec7a8e78be86dd782ac5f023"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc731c96c1524802563300643f32495eb1de9f952bd2b6c27d8dc0e377ec8b2d3"
      }
    ],
    "blockNumber": 8412475,
    "cumulativeGasUsed": "1199285",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x79C56Bb227fe9C52EC7A8e78BE86dd782AC5F023",
    "0xF9E8dFa60b01c710f6f49bbFF9Fe510366DB1f34"
  ],
  "solcInputHash": "8a357e2d7f1e32295f46bd4ffe5a9867",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balleMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balleMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"emergencyUpgradeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmt\",\"type\":\"uint256\"}],\"name\":\"upgradeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Implementation of strategy for testing. The strategy will \\\"mine\\\" TEST_LP tokens to simulate a working farm for testing purpouses. It's very simple to facilitate testing. Every time it's harvested, it will add 1% to TEST_LP balance. Will be improved to test fee distribution, etc.\"},\"deposit(address,uint256)\":{\"details\":\"Function to transfer tokens BalleMaster -> strategy and put it to work. It will leave the tokens here, strategy only for testing purpouses.\"},\"harvest()\":{\"details\":\"Function to harvest benefits and implement strategy steps. It will increase deposited tokens by 1% every time it's called.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"Function to transfer tokens strategy -> BalleMaster.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestStrategy.sol\":\"TestStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableERC20.sol\":{\"content\":\"// contracts/interfaces/IMintableERC20.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableERC20 is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x07902ae24ef2c9bbd7833b21577644b1afc25c8bc23e4271d0573d660e6d1fd2\",\"license\":\"MIT\"},\"contracts/test/TestStrategy.sol\":{\"content\":\"// contracts/mocks/TestStrategy.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IMintableERC20.sol\\\";\\n\\ncontract TestStrategy is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public balleMaster;\\n    address public depositToken;\\n    address public govAddress;\\n    uint256 public depositTotal = 0;\\n    uint256 public sharesTotal = 0;\\n    // Not needed variables, only for this testing strategy to work\\n    bool public paused = false;\\n    bool public retired = false;\\n\\n    /**\\n     * @dev Implementation of strategy for testing.\\n     * The strategy will \\\"mine\\\" TEST_LP tokens to simulate a working farm for testing purpouses.\\n     * It's very simple to facilitate testing. Every time it's harvested, it will add 1% to TEST_LP balance.\\n     * Will be improved to test fee distribution, etc.\\n     */\\n    constructor(address _balleMaster, address _depositToken) {\\n        balleMaster = _balleMaster;\\n        depositToken = _depositToken;\\n\\n        govAddress = msg.sender;\\n        transferOwnership(_balleMaster);\\n    }\\n\\n    /**\\n     * @dev Function to harvest benefits and implement strategy steps.\\n     * It will increase deposited tokens by 1% every time it's called.\\n     */\\n    function harvest() external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n\\n        if (depositTotal == 0) {\\n            return;\\n        }\\n\\n        uint256 earned = IERC20(depositToken).balanceOf(address(this)) / 100;\\n        // autocompounding strategy\\n        depositTotal = depositTotal + earned;\\n        IMintableERC20(depositToken).mint(address(this), earned);\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\\n     * It will leave the tokens here, strategy only for testing purpouses.\\n     */\\n    function deposit(address _user, uint256 _amount) public onlyOwner returns (uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        require(_amount > 0, \\\"!amount\\\");\\n\\n        IERC20(depositToken).safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        uint256 sharesAdded = _amount;\\n        if (depositTotal > 0) {\\n            sharesAdded = (_amount * sharesTotal) / depositTotal;\\n        }\\n        sharesTotal = sharesTotal + sharesAdded;\\n        depositTotal = depositTotal + _amount;\\n        return sharesAdded;\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens strategy -> BalleMaster.\\n     */\\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        require(_amount > 0, \\\"!amount\\\");\\n\\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\\n        if (_amount > depositAmt) {\\n            _amount = depositAmt;\\n        }\\n\\n        if (depositTotal < _amount) {\\n            _amount = depositTotal;\\n        }\\n\\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal - sharesRemoved;\\n        depositTotal = depositTotal - _amount;\\n\\n        IERC20(depositToken).safeTransfer(msg.sender, _amount);\\n\\n        return (sharesRemoved, _amount);\\n    }\\n\\n    function upgradeTo(address _strat) external onlyOwner returns (uint256, uint256) {\\n        require(_strat != address(0), \\\"!strat\\\");\\n        // A real strategy would prepare to upgrade (remove tokens from farm)\\n        // Set allowance for new strat contract\\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\\n        IERC20(depositToken).safeIncreaseAllowance(_strat, depositAmt);\\n        return (sharesTotal, depositAmt);\\n    }\\n\\n    function emergencyUpgradeTo(address _strat) external onlyOwner returns (uint256, uint256) {\\n        require(_strat != address(0), \\\"!strat\\\");\\n        // A real strategy would prepare to upgrade (remove tokens from farm)\\n        // Set allowance for new strat contract\\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\\n        IERC20(depositToken).safeIncreaseAllowance(_strat, depositAmt);\\n        return (sharesTotal, depositAmt);\\n    }\\n\\n    function upgradeFrom(\\n        address _strat,\\n        uint256 _sharesTotal,\\n        uint256 _depositAmt\\n    ) external onlyOwner {\\n        require(_strat != address(0), \\\"!strat\\\");\\n        // A real strategy would prepare to upgrade (remove tokens from farm)\\n        // Transfer tokens\\n\\n        IERC20(depositToken).safeTransferFrom(_strat, address(this), _depositAmt);\\n        depositTotal = IERC20(depositToken).balanceOf(address(this));\\n\\n        sharesTotal = _sharesTotal;\\n\\n        // A real strategy would finish to upgrade (send tokens to farm)\\n    }\\n\\n    function pause() external onlyOwner {\\n        // A real strategy would enter pause mode:\\n        //   - Remove tokens from farm\\n        //   - Clear allowances of third party contracts\\n\\n        // Updating state, not needed on a real one\\n        paused = true;\\n    }\\n\\n    function unpause() external onlyOwner {\\n        // A real strategy would enter active mode:\\n        //   - Set allowances to third party contracts\\n        //   - Send tokens to farm\\n\\n        // Updating state, not needed on a real one\\n        paused = false;\\n    }\\n\\n    function panic() external onlyOwner {\\n        // A real strategy would panic exit farm:\\n        //   - Remove tokens from farm with emergencyWithdraw\\n        //   - Clear allowances of third party contracts\\n\\n        // Updating state, not needed on a real one\\n        paused = true;\\n    }\\n\\n    function retire() external onlyOwner {\\n        // A real strategy would enter retired mode:\\n        //   - Remove tokens from farm\\n        //   - Clear allowances of third party contracts\\n\\n        // Updating state, not needed on a real one\\n        paused = true;\\n    }\\n\\n    function setGov(address _govAddress) public {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        govAddress = _govAddress;\\n    }\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        require(_token != depositToken, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1363c615db2ba6b1d4120aff162967db7c36d5beda1b1c602d18e2b9fb91a11d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060048190556005556006805461ffff191690553480156200002657600080fd5b506040516200153a3803806200153a8339810160408190526200004991620001f5565b600080546001600160a01b031916339081178255604051909182916000805160206200151a833981519152908290a350600180546001600160a01b038085166001600160a01b03199283161790925560028054928416928216929092179091556003805490911633179055620000bf82620000c7565b50506200022c565b6000546001600160a01b03163314620001275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200018e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200011e565b600080546040516001600160a01b03808516939216916000805160206200151a83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b0381168114620001f057600080fd5b919050565b6000806040838503121562000208578182fd5b6200021383620001d8565b91506200022360208401620001d8565b90509250929050565b6112de806200023c6000396000f3fe608060405234801561001057600080fd5b50600436106101625760003560e01c8063715018a6116100c8578063bb8926201161008c578063cfad57a211610066578063cfad57a2146102a0578063f2fde38b146102b3578063f3fef3a3146102c657610162565b8063bb8926201461027a578063bdccc8231461018e578063c89039c51461028d57610162565b8063715018a61461024e5780638456cb591461020a5780638da5cb5b146102565780639d43f53414610267578063a4874d771461020a57610162565b80634641257d1161012a5780634adae0da116101045780634adae0da146102255780635c975abb1461022e57806367206d401461023b57610162565b80634641257d146102025780634700d3051461020a57806347e7ef241461021257610162565b80632eb38ae0146101675780633659cfe61461018e5780633f4ba83a146101b657806344a3955e146101c057806346008a07146101d7575b600080fd5b60065461017990610100900460ff1681565b60405190151581526020015b60405180910390f35b6101a161019c3660046110ca565b6102d9565b60408051928352602083019190915201610185565b6101be61040a565b005b6101c960055481565b604051908152602001610185565b6003546101ea906001600160a01b031681565b6040516001600160a01b039091168152602001610185565b6101be61045e565b6101be6105b5565b6101c96102203660046110e4565b61060c565b6101c960045481565b6006546101799060ff1681565b6101be61024936600461110d565b610735565b6101be6107d7565b6000546001600160a01b03166101ea565b6101be610275366004611148565b610869565b6001546101ea906001600160a01b031681565b6002546101ea906001600160a01b031681565b6101be6102ae3660046110ca565b61098d565b6101be6102c13660046110ca565b6109f2565b6101a16102d43660046110e4565b610afa565b6000805481906001600160a01b031633146103295760405162461bcd60e51b815260206004820181905260248201526000805160206112b283398151915260448201526064015b60405180910390fd5b6001600160a01b0383166103685760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b6044820152606401610320565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e4919061119a565b6002549091506103fe906001600160a01b03168583610cc7565b60055492509050915091565b6000546001600160a01b031633146104525760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6006805460ff19169055565b6003546001600160a01b031633146104a15760405162461bcd60e51b81526004016103209060208082526004908201526310b3b7bb60e11b604082015260600190565b6004546104ad576105b3565b6002546040516370a0823160e01b81523060048201526000916064916001600160a01b03909116906370a082319060240160206040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e919061119a565b6105389190611219565b9050806004546105489190611201565b60049081556002546040516340c10f1960e01b81523092810192909252602482018390526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b50505050505b565b6000546001600160a01b031633146105fd5760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6006805460ff19166001179055565b600080546001600160a01b031633146106555760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b0383166106935760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b6044820152606401610320565b600082116106cd5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610320565b6002546106e5906001600160a01b0316333085610dee565b60045482901561070c576004546005546106ff9085611239565b6107099190611219565b90505b8060055461071a9190611201565b60055560045461072b908490611201565b6004559392505050565b6003546001600160a01b031633146107785760405162461bcd60e51b81526004016103209060208082526004908201526310b3b7bb60e11b604082015260600190565b6002546001600160a01b03848116911614156107be5760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b6044820152606401610320565b6107d26001600160a01b0384168284610e26565b505050565b6000546001600160a01b0316331461081f5760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b0383166108f05760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b6044820152606401610320565b600254610908906001600160a01b0316843084610dee565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610983919061119a565b6004555060055550565b6003546001600160a01b031633146109d05760405162461bcd60e51b81526004016103209060208082526004908201526310b3b7bb60e11b604082015260600190565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a3a5760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b038116610a9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610320565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805481906001600160a01b03163314610b455760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b038416610b835760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b6044820152606401610320565b60008311610bbd5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610320565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c39919061119a565b905080841115610c47578093505b836004541015610c575760045493505b600060045460055486610c6a9190611239565b610c749190611219565b9050600554811115610c8557506005545b80600554610c939190611258565b600555600454610ca4908690611258565b600455600254610cbe906001600160a01b03163387610e26565b95939450505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b919061119a565b610d559190611201565b6040516001600160a01b038516602482015260448101829052909150610de890859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e56565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610de89085906323b872dd60e01b90608401610d84565b6040516001600160a01b0383166024820152604481018290526107d290849063a9059cbb60e01b90606401610d84565b6000610eab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f289092919063ffffffff16565b8051909150156107d25780806020019051810190610ec9919061117a565b6107d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610320565b6060610f378484600085610f41565b90505b9392505050565b606082471015610fa25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610320565b610fab85611070565b610ff75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610320565b600080866001600160a01b0316858760405161101391906111b2565b60006040518083038185875af1925050503d8060008114611050576040519150601f19603f3d011682016040523d82523d6000602084013e611055565b606091505b509150915061106582828661107a565b979650505050505050565b803b15155b919050565b60608315611089575081610f3a565b8251156110995782518084602001fd5b8160405162461bcd60e51b815260040161032091906111ce565b80356001600160a01b038116811461107557600080fd5b6000602082840312156110db578081fd5b610f3a826110b3565b600080604083850312156110f6578081fd5b6110ff836110b3565b946020939093013593505050565b600080600060608486031215611121578081fd5b61112a846110b3565b92506020840135915061113f604085016110b3565b90509250925092565b60008060006060848603121561115c578283fd5b611165846110b3565b95602085013595506040909401359392505050565b60006020828403121561118b578081fd5b81518015158114610f3a578182fd5b6000602082840312156111ab578081fd5b5051919050565b600082516111c481846020870161126f565b9190910192915050565b60006020825282518060208401526111ed81604085016020870161126f565b601f01601f19169190910160400192915050565b600082198211156112145761121461129b565b500190565b60008261123457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156112535761125361129b565b500290565b60008282101561126a5761126a61129b565b500390565b60005b8381101561128a578181015183820152602001611272565b83811115610de85750506000910152565b634e487b7160e01b600052601160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c6343000803000a8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101625760003560e01c8063715018a6116100c8578063bb8926201161008c578063cfad57a211610066578063cfad57a2146102a0578063f2fde38b146102b3578063f3fef3a3146102c657610162565b8063bb8926201461027a578063bdccc8231461018e578063c89039c51461028d57610162565b8063715018a61461024e5780638456cb591461020a5780638da5cb5b146102565780639d43f53414610267578063a4874d771461020a57610162565b80634641257d1161012a5780634adae0da116101045780634adae0da146102255780635c975abb1461022e57806367206d401461023b57610162565b80634641257d146102025780634700d3051461020a57806347e7ef241461021257610162565b80632eb38ae0146101675780633659cfe61461018e5780633f4ba83a146101b657806344a3955e146101c057806346008a07146101d7575b600080fd5b60065461017990610100900460ff1681565b60405190151581526020015b60405180910390f35b6101a161019c3660046110ca565b6102d9565b60408051928352602083019190915201610185565b6101be61040a565b005b6101c960055481565b604051908152602001610185565b6003546101ea906001600160a01b031681565b6040516001600160a01b039091168152602001610185565b6101be61045e565b6101be6105b5565b6101c96102203660046110e4565b61060c565b6101c960045481565b6006546101799060ff1681565b6101be61024936600461110d565b610735565b6101be6107d7565b6000546001600160a01b03166101ea565b6101be610275366004611148565b610869565b6001546101ea906001600160a01b031681565b6002546101ea906001600160a01b031681565b6101be6102ae3660046110ca565b61098d565b6101be6102c13660046110ca565b6109f2565b6101a16102d43660046110e4565b610afa565b6000805481906001600160a01b031633146103295760405162461bcd60e51b815260206004820181905260248201526000805160206112b283398151915260448201526064015b60405180910390fd5b6001600160a01b0383166103685760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b6044820152606401610320565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e4919061119a565b6002549091506103fe906001600160a01b03168583610cc7565b60055492509050915091565b6000546001600160a01b031633146104525760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6006805460ff19169055565b6003546001600160a01b031633146104a15760405162461bcd60e51b81526004016103209060208082526004908201526310b3b7bb60e11b604082015260600190565b6004546104ad576105b3565b6002546040516370a0823160e01b81523060048201526000916064916001600160a01b03909116906370a082319060240160206040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e919061119a565b6105389190611219565b9050806004546105489190611201565b60049081556002546040516340c10f1960e01b81523092810192909252602482018390526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b50505050505b565b6000546001600160a01b031633146105fd5760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6006805460ff19166001179055565b600080546001600160a01b031633146106555760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b0383166106935760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b6044820152606401610320565b600082116106cd5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610320565b6002546106e5906001600160a01b0316333085610dee565b60045482901561070c576004546005546106ff9085611239565b6107099190611219565b90505b8060055461071a9190611201565b60055560045461072b908490611201565b6004559392505050565b6003546001600160a01b031633146107785760405162461bcd60e51b81526004016103209060208082526004908201526310b3b7bb60e11b604082015260600190565b6002546001600160a01b03848116911614156107be5760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b6044820152606401610320565b6107d26001600160a01b0384168284610e26565b505050565b6000546001600160a01b0316331461081f5760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b0383166108f05760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b6044820152606401610320565b600254610908906001600160a01b0316843084610dee565b6002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610983919061119a565b6004555060055550565b6003546001600160a01b031633146109d05760405162461bcd60e51b81526004016103209060208082526004908201526310b3b7bb60e11b604082015260600190565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a3a5760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b038116610a9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610320565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805481906001600160a01b03163314610b455760405162461bcd60e51b815260206004820181905260248201526000805160206112b28339815191526044820152606401610320565b6001600160a01b038416610b835760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b6044820152606401610320565b60008311610bbd5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610320565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c39919061119a565b905080841115610c47578093505b836004541015610c575760045493505b600060045460055486610c6a9190611239565b610c749190611219565b9050600554811115610c8557506005545b80600554610c939190611258565b600555600454610ca4908690611258565b600455600254610cbe906001600160a01b03163387610e26565b95939450505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015610d1357600080fd5b505afa158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b919061119a565b610d559190611201565b6040516001600160a01b038516602482015260448101829052909150610de890859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e56565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610de89085906323b872dd60e01b90608401610d84565b6040516001600160a01b0383166024820152604481018290526107d290849063a9059cbb60e01b90606401610d84565b6000610eab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f289092919063ffffffff16565b8051909150156107d25780806020019051810190610ec9919061117a565b6107d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610320565b6060610f378484600085610f41565b90505b9392505050565b606082471015610fa25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610320565b610fab85611070565b610ff75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610320565b600080866001600160a01b0316858760405161101391906111b2565b60006040518083038185875af1925050503d8060008114611050576040519150601f19603f3d011682016040523d82523d6000602084013e611055565b606091505b509150915061106582828661107a565b979650505050505050565b803b15155b919050565b60608315611089575081610f3a565b8251156110995782518084602001fd5b8160405162461bcd60e51b815260040161032091906111ce565b80356001600160a01b038116811461107557600080fd5b6000602082840312156110db578081fd5b610f3a826110b3565b600080604083850312156110f6578081fd5b6110ff836110b3565b946020939093013593505050565b600080600060608486031215611121578081fd5b61112a846110b3565b92506020840135915061113f604085016110b3565b90509250925092565b60008060006060848603121561115c578283fd5b611165846110b3565b95602085013595506040909401359392505050565b60006020828403121561118b578081fd5b81518015158114610f3a578182fd5b6000602082840312156111ab578081fd5b5051919050565b600082516111c481846020870161126f565b9190910192915050565b60006020825282518060208401526111ed81604085016020870161126f565b601f01601f19169190910160400192915050565b600082198211156112145761121461129b565b500190565b60008261123457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156112535761125361129b565b500290565b60008282101561126a5761126a61129b565b500390565b60005b8381101561128a578181015183820152602001611272565b83811115610de85750506000910152565b634e487b7160e01b600052601160045260246000fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c6343000803000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Implementation of strategy for testing. The strategy will \"mine\" TEST_LP tokens to simulate a working farm for testing purpouses. It's very simple to facilitate testing. Every time it's harvested, it will add 1% to TEST_LP balance. Will be improved to test fee distribution, etc."
      },
      "deposit(address,uint256)": {
        "details": "Function to transfer tokens BalleMaster -> strategy and put it to work. It will leave the tokens here, strategy only for testing purpouses."
      },
      "harvest()": {
        "details": "Function to harvest benefits and implement strategy steps. It will increase deposited tokens by 1% every time it's called."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "Function to transfer tokens strategy -> BalleMaster."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1652,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "balleMaster",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1654,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "depositToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1656,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "govAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1659,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "depositTotal",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1662,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1665,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1668,
        "contract": "contracts/test/TestStrategy.sol:TestStrategy",
        "label": "retired",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}