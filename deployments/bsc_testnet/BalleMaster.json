{
  "address": "0x68c70f1054CdE29c57f2dbA092842FaF14A6c6C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract BALLEv2",
          "name": "_balle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ballePerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balleTotalRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "ActivateRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        }
      ],
      "name": "DeactivateRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "ModifyRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "activateVaultRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_wantToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balle",
      "outputs": [
        {
          "internalType": "contract BALLEv2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ballePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balleToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balleTotalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "deactivateVaultRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getBlockMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "modifyVaultRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingBalle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "stakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "wantToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "rewardsActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accBallePerShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "strat",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vid",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x662e130a20b3a1580206e02571d36a02fef39b5bcda46af1a02cc77cca18db8e",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0x68c70f1054CdE29c57f2dbA092842FaF14A6c6C0",
    "transactionIndex": 0,
    "gasUsed": "2584443",
    "logsBloom": "0x
    "blockHash": "0x20371539ee5dcc669606fe1c6265da16c82d47774d466edd9affef4acd6ce2ca",
    "transactionHash": "0x662e130a20b3a1580206e02571d36a02fef39b5bcda46af1a02cc77cca18db8e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8178368,
        "transactionHash": "0x662e130a20b3a1580206e02571d36a02fef39b5bcda46af1a02cc77cca18db8e",
        "address": "0x68c70f1054CdE29c57f2dbA092842FaF14A6c6C0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x20371539ee5dcc669606fe1c6265da16c82d47774d466edd9affef4acd6ce2ca"
      }
    ],
    "blockNumber": 8178368,
    "cumulativeGasUsed": "2584443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b",
    "228310502283105",
    "24000000000000000000000"
  ],
  "solcInputHash": "051e042caf338cdcdf6b4b840f5a2f8e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BALLEv2\",\"name\":\"_balle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ballePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balleTotalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"ActivateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"}],\"name\":\"DeactivateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"ModifyRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"activateVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wantToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balle\",\"outputs\":[{\"internalType\":\"contract BALLEv2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balleToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balleTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"deactivateVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getBlockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"modifyVaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBalle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"wantToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"rewardsActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBallePerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strat\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the Master of BALLE. This contract will take care of all rewards calculations and distribution of BALLE tokens in vaults. It's ownable and the owner is the only who can manage the active vaults and it's parameters for rewards distribution. The ownership will be transferred to the Governance GNOSIS Safe.\",\"kind\":\"dev\",\"methods\":{\"activateVaultRewards(uint256,uint256)\":{\"details\":\"Function to activate vault rewards. Can only be called by the owner.\"},\"addVault(address,address,address)\":{\"details\":\"Function to add a new vault configuration. Can only be called by the owner.\"},\"deactivateVaultRewards(uint256)\":{\"details\":\"Function to deactivate vault rewards. Can only be called by the owner.\"},\"deposit(uint256,uint256)\":{\"details\":\"Function that deposits user tokens.\"},\"depositAll(uint256)\":{\"details\":\"Function that deposits all user tokens balance.\"},\"emergencyWithdraw(uint256)\":{\"details\":\"Function that withdraws without caring about rewards. EMERGENCY ONLY.\"},\"getBlockMultiplier(uint256,uint256)\":{\"details\":\"View function to calculate the reward multiplier over the given _from to _to block.\"},\"inCaseTokensGetStuck(address,uint256)\":{\"details\":\"Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\"},\"modifyVaultRewards(uint256,uint256)\":{\"details\":\"Function to modify vault rewards. Can only be called by the owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingBalle(uint256,address)\":{\"details\":\"View function to see pending BALLE on frontend.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stakedTokens(uint256,address)\":{\"details\":\"View function to see staked (LP) tokens on frontend.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vaultLength()\":{\"details\":\"View function to get the number of vaults configured.\"},\"withdraw(uint256,uint256)\":{\"details\":\"Function that withdraws user tokens.\"},\"withdrawAll(uint256)\":{\"details\":\"Function that withdraws all user tokens balance.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/BalleMaster.sol\":\"BalleMaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x21d8a5dd396bee41e4a039d150af08b66b6d09eef416daf8e5edf13ef219084e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// contracts/interfaces/IStrategy.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface IStrategy {\\n    // Total tokens managed by strategy\\n    function depositTotal() external view returns (uint256);\\n\\n    // Sum of all shares of users to depositTotal\\n    function sharesTotal() external view returns (uint256);\\n\\n    // Main harvest function\\n    function harvest() external;\\n\\n    // Transfer tokens BalleMaster -> strategy\\n    function deposit(uint256 _amount) external returns (uint256);\\n\\n    // Transfer tokens strategy -> BalleMaster\\n    function withdraw(uint256 _amount)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\",\"keccak256\":\"0x896f97e4f30cb5706e6e58491122b167d5fe6346158cb79127cfad1ce2774dbe\",\"license\":\"MIT\"},\"contracts/token/BALLEv2.sol\":{\"content\":\"// contracts/token/BALLEv2.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract BALLEv2 is ERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    address public governance;\\n    mapping(address => bool) public minters;\\n    uint256 public immutable cap;\\n\\n    event SetGovernance(address indexed addr);\\n    event AddMinter(address indexed addr);\\n    event RemoveMinter(address indexed addr);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _cap\\n    ) ERC20(string(_name), string(_symbol)) {\\n        require(_cap > 0, \\\"BALLE: cap is 0\\\");\\n        cap = _cap;\\n        governance = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the governance address\\n     */\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the governance address or an authorized minter\\n     */\\n    modifier onlyMinter() {\\n        require(msg.sender == governance || minters[msg.sender], \\\"!governance && !minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the new governance address\\n     */\\n    function setGovernance(address _governance) external onlyGovernance {\\n        require(_governance != address(0), \\\"zero address\\\");\\n        governance = _governance;\\n        emit SetGovernance(_governance);\\n    }\\n\\n    /**\\n     * @dev Add a minter address\\n     */\\n    function addMinter(address _minter) external onlyGovernance {\\n        require(_minter != address(0), \\\"zero address\\\");\\n        minters[_minter] = true;\\n        emit AddMinter(_minter);\\n    }\\n\\n    /**\\n     * @dev Remove a minter address\\n     */\\n    function removeMinter(address _minter) external onlyGovernance {\\n        require(_minter != address(0), \\\"zero address\\\");\\n        minters[_minter] = false;\\n        emit RemoveMinter(_minter);\\n    }\\n\\n    /**\\n     * @dev Creates _amount tokens and assigns them to _to account, increasing\\n     * the total supply until the cap is reached.\\n     */\\n    function mint(address _to, uint256 _amount) external onlyMinter {\\n        require(ERC20.totalSupply() + _amount <= cap, \\\"!cap\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Allows governance to take unsupported tokens out of the contract. This is just in case someone seriously messed up.\\n     * There is no guarantee governance will vote to return these.\\n     */\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyGovernance {\\n        require(_to != address(0), \\\"zero address\\\");\\n        _token.safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8cad7842534e02271ff0c519b73dcbd2370dffb40f89132bb5ad7cdba37f859e\",\"license\":\"MIT\"},\"contracts/vaults/BalleMaster.sol\":{\"content\":\"// contracts/vaults/BalleMaster.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../token/BALLEv2.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\n/**\\n * @dev Implementation of the Master of BALLE.\\n * This contract will take care of all rewards calculations and distribution of BALLE tokens in vaults.\\n * It's ownable and the owner is the only who can manage the active vaults and it's parameters for rewards distribution.\\n * The ownership will be transferred to the Governance GNOSIS Safe.\\n */\\ncontract BalleMaster is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each vault\\n    struct VaultInfo {\\n        IERC20 depositToken; // Address of deposited token contract.\\n        IERC20 wantToken; // Address of the token to maximize.\\n        bool rewardsActive; // BALLE rewards active for this vault.\\n        uint256 allocPoint; // How many allocation points assigned to this vault. BALLEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that BALLEs distribution occurs.\\n        uint256 accBallePerShare; // Accumulated BALLEs per share, times 1e12. See below.\\n        address strat; // Address of the strategy contract that will maximize want tokens.\\n    }\\n\\n    // Info of each user\\n    struct UserInfo {\\n        uint256 shares; // User shares of the vault.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BALLEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a vault. Here's what happens:\\n        //   1. The vault's `accBallePerShare` and `lastRewardBlock` gets updated.\\n        //   2. User receives the pending reward sent to his address.\\n        //   3. User's `shares` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // The BALLE token.\\n    BALLEv2 public balle;\\n    // BALLE tokens created per block: 2283105022831050.\\n    uint256 public ballePerBlock;\\n    // BALLE tokens to distribute: 24000e18.\\n    uint256 public balleTotalRewards;\\n    // The block number when BALLE rewards distribution starts.\\n    uint256 public startBlock;\\n    // The block number when BALLE rewards distribution ends.\\n    uint256 public endBlock;\\n    // Total allocation points. Must be the sum of all allocation points in all vaults.\\n    uint256 public totalAllocPoint = 0;\\n    // BALLE to be minted for rewards.\\n    uint256 public balleToMint = 0;\\n\\n    // Info of each vault.\\n    VaultInfo[] public vaultInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    event ActivateRewards(uint256 indexed vid, uint256 allocPoint);\\n    event ModifyRewards(uint256 indexed vid, uint256 allocPoint);\\n    event DeactivateRewards(uint256 indexed vid);\\n    event Deposit(address indexed user, uint256 indexed vid, uint256 amount, uint256 rewards);\\n    event Withdraw(address indexed user, uint256 indexed vid, uint256 amount, uint256 rewards);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed vid, uint256 amount);\\n\\n    constructor(\\n        BALLEv2 _balle,\\n        uint256 _ballePerBlock,\\n        uint256 _balleTotalRewards\\n    ) {\\n        balle = _balle;\\n        ballePerBlock = _ballePerBlock;\\n        balleTotalRewards = _balleTotalRewards;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the vault exists.\\n     */\\n    modifier vaultExists(uint256 pid) {\\n        require(pid < vaultInfo.length, \\\"!vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev View function to get the number of vaults configured.\\n     */\\n    function vaultLength() external view returns (uint256) {\\n        return vaultInfo.length;\\n    }\\n\\n    /**\\n     * @dev Function to add a new vault configuration. Can only be called by the owner.\\n     */\\n    function addVault(\\n        IERC20 _depositToken,\\n        IERC20 _wantToken,\\n        address _strat\\n    ) public onlyOwner {\\n        vaultInfo.push(\\n            VaultInfo({\\n                depositToken: _depositToken,\\n                wantToken: _wantToken,\\n                rewardsActive: false,\\n                allocPoint: 0,\\n                lastRewardBlock: 0,\\n                accBallePerShare: 0,\\n                strat: _strat\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to activate vault rewards. Can only be called by the owner.\\n     */\\n    function activateVaultRewards(uint256 _vid, uint256 _allocPoint) public onlyOwner vaultExists(_vid) {\\n        require(!vaultInfo[_vid].rewardsActive, \\\"active\\\");\\n        require(_allocPoint > 0, \\\"!allocpoint\\\");\\n\\n        massUpdateVaults();\\n\\n        if (startBlock == 0) {\\n            startBlock = block.number;\\n            endBlock = startBlock + (balleTotalRewards / ballePerBlock);\\n        }\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n\\n        vaultInfo[_vid].allocPoint = _allocPoint;\\n        vaultInfo[_vid].lastRewardBlock = lastRewardBlock;\\n        vaultInfo[_vid].rewardsActive = true;\\n        vaultInfo[_vid].accBallePerShare = 0;\\n\\n        emit ActivateRewards(_vid, _allocPoint);\\n    }\\n\\n    /**\\n     * @dev Function to modify vault rewards. Can only be called by the owner.\\n     */\\n    function modifyVaultRewards(uint256 _vid, uint256 _allocPoint) public onlyOwner vaultExists(_vid) {\\n        require(vaultInfo[_vid].rewardsActive, \\\"!active\\\");\\n        require(_allocPoint > 0, \\\"!allocpoint\\\");\\n\\n        massUpdateVaults();\\n\\n        totalAllocPoint = totalAllocPoint - vaultInfo[_vid].allocPoint + _allocPoint;\\n        vaultInfo[_vid].allocPoint = _allocPoint;\\n\\n        emit ModifyRewards(_vid, _allocPoint);\\n    }\\n\\n    /**\\n     * @dev Function to deactivate vault rewards. Can only be called by the owner.\\n     */\\n    function deactivateVaultRewards(uint256 _vid) public onlyOwner vaultExists(_vid) {\\n        require(vaultInfo[_vid].rewardsActive, \\\"!active\\\");\\n\\n        massUpdateVaults();\\n\\n        totalAllocPoint = totalAllocPoint - vaultInfo[_vid].allocPoint;\\n        vaultInfo[_vid].allocPoint = 0;\\n        vaultInfo[_vid].rewardsActive = false;\\n\\n        emit DeactivateRewards(_vid);\\n    }\\n\\n    /**\\n     * @dev View function to calculate the reward multiplier over the given _from to _to block.\\n     */\\n    function getBlockMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        if (_to < _from) {\\n            return 0;\\n        }\\n        if (_to < startBlock) {\\n            return 0;\\n        }\\n        if (_from > endBlock) {\\n            return 0;\\n        }\\n        if (_from < startBlock) {\\n            _from = startBlock;\\n        }\\n        if (_to > endBlock) {\\n            _to = endBlock;\\n        }\\n        return _to - _from;\\n    }\\n\\n    /**\\n     * @dev View function to see pending BALLE on frontend.\\n     */\\n    function pendingBalle(uint256 _vid, address _user) external view returns (uint256) {\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        UserInfo storage user = userInfo[_vid][_user];\\n        uint256 accBallePerShare = vault.accBallePerShare;\\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\\n        if (vault.rewardsActive && block.number > vault.lastRewardBlock && sharesTotal != 0) {\\n            uint256 multiplier = getBlockMultiplier(vault.lastRewardBlock, block.number);\\n            uint256 balleReward = (multiplier * ballePerBlock * vault.allocPoint) / totalAllocPoint;\\n            accBallePerShare = accBallePerShare + (balleReward * 1e12) / sharesTotal;\\n        }\\n        return (user.shares * accBallePerShare) / 1e12 - user.rewardDebt;\\n    }\\n\\n    /**\\n     * @dev View function to see staked (LP) tokens on frontend.\\n     */\\n    function stakedTokens(uint256 _vid, address _user) external view returns (uint256) {\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        UserInfo storage user = userInfo[_vid][_user];\\n\\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\\n        if (sharesTotal == 0) {\\n            return 0;\\n        }\\n        return (user.shares * depositTotal) / sharesTotal;\\n    }\\n\\n    /**\\n     * @dev Function to update reward variables for all vaults. Be careful of gas spending!\\n     */\\n    function massUpdateVaults() internal {\\n        uint256 length = vaultInfo.length;\\n        for (uint256 vid = 0; vid < length; ++vid) {\\n            updateVault(vid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to update reward variables of the given vault to be up-to-date.\\n     */\\n    function updateVault(uint256 _vid) internal {\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        if (!vault.rewardsActive) {\\n            return;\\n        }\\n        if (block.number <= vault.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\\n        if (sharesTotal == 0) {\\n            vault.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getBlockMultiplier(vault.lastRewardBlock, block.number);\\n        if (multiplier <= 0) {\\n            return;\\n        }\\n        uint256 balleReward = (multiplier * ballePerBlock * vault.allocPoint) / totalAllocPoint;\\n        balleToMint = balleToMint + balleReward;\\n\\n        vault.accBallePerShare = vault.accBallePerShare + (balleReward * 1e12) / sharesTotal;\\n        vault.lastRewardBlock = block.number;\\n    }\\n\\n    /**\\n     * @dev Function that moves tokens from user -> BalleMaster (BALLE allocation) -> Strat (compounding).\\n     */\\n    function _deposit(uint256 _vid, uint256 _amount) internal {\\n        updateVault(_vid);\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        UserInfo storage user = userInfo[_vid][msg.sender];\\n\\n        uint256 pending;\\n        if (user.shares > 0) {\\n            pending = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt;\\n            if (pending > 0) {\\n                safeBalleTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            vault.depositToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            vault.depositToken.safeIncreaseAllowance(vault.strat, _amount);\\n            uint256 sharesAdded = IStrategy(vaultInfo[_vid].strat).deposit(_amount);\\n            user.shares = user.shares + sharesAdded;\\n        }\\n        user.rewardDebt = (user.shares * vault.accBallePerShare) / 1e12;\\n        emit Deposit(msg.sender, _vid, _amount, pending);\\n    }\\n\\n    /**\\n     * @dev Function that deposits user tokens.\\n     */\\n    function deposit(uint256 _vid, uint256 _amount) public nonReentrant vaultExists(_vid) {\\n        _deposit(_vid, _amount);\\n    }\\n\\n    /**\\n     * @dev Function that deposits all user tokens balance.\\n     */\\n    function depositAll(uint256 _vid) public nonReentrant {\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        _deposit(_vid, vault.depositToken.balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Function that performs the withdrawal.\\n     */\\n    function _withdraw(uint256 _vid, uint256 _amount) internal {\\n        updateVault(_vid);\\n\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        UserInfo storage user = userInfo[_vid][msg.sender];\\n\\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\\n\\n        require(sharesTotal > 0, \\\"!sharesTotal\\\");\\n        require(user.shares > 0, \\\"!user.shares\\\");\\n\\n        // Withdraw pending BALLE\\n        uint256 pending = (user.shares * vault.accBallePerShare) / 1e12 - user.rewardDebt;\\n        if (pending > 0) {\\n            safeBalleTransfer(msg.sender, pending);\\n        }\\n\\n        // Withdraw tokens\\n        uint256 amount = (user.shares * depositTotal) / sharesTotal;\\n        if (_amount > amount) {\\n            _amount = amount;\\n        }\\n        if (_amount > 0) {\\n            (uint256 sharesRemoved, uint256 depositRemoved, uint256 wantRemoved) =\\n                IStrategy(vault.strat).withdraw(_amount);\\n\\n            if (sharesRemoved > user.shares) {\\n                user.shares = 0;\\n            } else {\\n                user.shares = user.shares - sharesRemoved;\\n            }\\n\\n            uint256 depositBal = IERC20(vault.depositToken).balanceOf(address(this));\\n            if (depositBal < depositRemoved) {\\n                depositRemoved = depositBal;\\n            }\\n            vault.depositToken.safeTransfer(address(msg.sender), depositRemoved);\\n\\n            if (vault.depositToken != vault.wantToken) {\\n                uint256 wantBal = IERC20(vault.wantToken).balanceOf(address(this));\\n                if (wantBal < wantRemoved) {\\n                    wantRemoved = wantBal;\\n                }\\n                vault.wantToken.safeTransfer(address(msg.sender), wantRemoved);\\n            }\\n        }\\n        user.rewardDebt = (user.shares * vault.accBallePerShare) / 1e12;\\n        emit Withdraw(msg.sender, _vid, _amount, pending);\\n    }\\n\\n    /**\\n     * @dev Function that withdraws user tokens.\\n     */\\n    function withdraw(uint256 _vid, uint256 _amount) public nonReentrant vaultExists(_vid) {\\n        _withdraw(_vid, _amount);\\n    }\\n\\n    /**\\n     * @dev Function that withdraws all user tokens balance.\\n     */\\n    function withdrawAll(uint256 _vid) public nonReentrant {\\n        _withdraw(_vid, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Function that withdraws without caring about rewards. EMERGENCY ONLY.\\n     */\\n    function emergencyWithdraw(uint256 _vid) public nonReentrant vaultExists(_vid) {\\n        VaultInfo storage vault = vaultInfo[_vid];\\n        UserInfo storage user = userInfo[_vid][msg.sender];\\n\\n        uint256 depositTotal = IStrategy(vault.strat).depositTotal();\\n        uint256 sharesTotal = IStrategy(vault.strat).sharesTotal();\\n        uint256 amount = (user.shares * depositTotal) / sharesTotal;\\n        user.shares = 0;\\n        user.rewardDebt = 0;\\n\\n        // TODO consider implementing emergencyWithdraw on strategy too.\\n        IStrategy(vault.strat).withdraw(amount);\\n\\n        uint256 lpBal = IERC20(vault.depositToken).balanceOf(address(this));\\n        if (lpBal < amount) {\\n            amount = lpBal;\\n        }\\n        vault.depositToken.safeTransfer(address(msg.sender), amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _vid, amount);\\n    }\\n\\n    /**\\n     * @dev Function for Safe BALLE transfer.\\n     * Will mint BALLE when needed and take care if rounding error causes pool to not have enough BALLE.\\n     */\\n    function safeBalleTransfer(address _to, uint256 _amount) internal {\\n        uint256 balleBal = balle.balanceOf(address(this));\\n        if (_amount > balleBal) {\\n            if (balleToMint > 0) {\\n                balle.mint(address(this), balleToMint);\\n                balleToMint = 0;\\n                balleBal = balle.balanceOf(address(this));\\n                if (_amount > balleBal) {\\n                    balle.transfer(_to, balleBal);\\n                } else {\\n                    balle.transfer(_to, _amount);\\n                }\\n            } else {\\n                balle.transfer(_to, balleBal);\\n            }\\n        } else {\\n            balle.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\\n     */\\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public onlyOwner {\\n        require(_token != address(balle), \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x44ba1e778296dca3de78d16e3292d424184999e84ac2349e5e60a67ee6345ad1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060075560006008553480156200001b57600080fd5b5060405162002cd538038062002cd58339810160408190526200003e91620000b0565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600280546001600160a01b0319166001600160a01b039490941693909317909255600355600455620000f3565b600080600060608486031215620000c5578283fd5b83516001600160a01b0381168114620000dc578384fd5b602085015160409095015190969495509392505050565b612bd280620001036000396000f3fe608060405234801561001057600080fd5b50600436106101ad5760003560e01c80638da5cb5b116100ee578063bc5a247011610097578063ded0da1011610071578063ded0da10146103a2578063e2bbb158146103b5578063f2fde38b146103c8578063f7f460c7146103db576101ad565b8063bc5a247014610369578063c6d758cb1461037c578063c6f678bd1461038f576101ad565b8063958e2d31116100c8578063958e2d3114610330578063acd3d32d14610343578063bc0838fc14610356576101ad565b80638da5cb5b1461026c578063929060d81461029157806393f1a40b146102e9576101ad565b8063441a3e701161015b5780635312ea8e116101355780635312ea8e1461023557806356eeafd9146102485780635ebac9b51461025b578063715018a614610264576101ad565b8063441a3e701461021057806344bd5b4f1461022357806348cd4cb11461022c576101ad565b80632b5b0a971161018c5780632b5b0a97146101ec5780632b68772c146101f5578063360f0730146101fd576101ad565b80629ddce5146101b2578063083c6323146101c757806317caf6f1146101e3575b600080fd5b6101c56101c0366004612a28565b6103ee565b005b6101d060065481565b6040519081526020015b60405180910390f35b6101d060075481565b6101d060085481565b6009546101d0565b6101c561020b3660046129c9565b6106a6565b6101c561021e366004612a28565b6108a2565b6101d060035481565b6101d060055481565b6101c56102433660046129c9565b610949565b6101d06102563660046129f9565b610cc2565b6101d060045481565b6101c5610e52565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101da565b6102a461029f3660046129c9565b610ee4565b604080516001600160a01b0398891681529688166020880152941515948601949094526060850192909252608084015260a083015290911660c082015260e0016101da565b61031b6102f73660046129f9565b600a6020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101da565b6101c561033e3660046129c9565b610f45565b6101d0610351366004612a28565b610fb0565b6101c5610364366004612a28565b611017565b6101d06103773660046129f9565b61121e565b6101c561038a366004612934565b6113b9565b6101c561039d3660046129c9565b61145f565b600254610279906001600160a01b031681565b6101c56103c3366004612a28565b61157b565b6101c56103d6366004612918565b611619565b6101c56103e936600461297f565b611721565b6000546001600160a01b0316331461043b5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba683398151915260448201526064015b60405180910390fd5b600954829081106104775760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b6009838154811061049857634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160149054906101000a900460ff16156104ed5760405162461bcd60e51b815260206004820152600660248201526561637469766560d01b6044820152606401610432565b6000821161052b5760405162461bcd60e51b815260206004820152600b60248201526a08585b1b1bd8dc1bda5b9d60aa1b6044820152606401610432565b6105336118f7565b60055461055f574360055560035460045461054e9190612add565b60055461055b9190612ac5565b6006555b600754439061056f908490612ac5565b600781905550826009858154811061059757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002018190555080600985815481106105ce57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003018190555060016009858154811061060657634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160146101000a81548160ff02191690831515021790555060006009858154811061065157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040181905550837fba13fd9b2f2ae67565b95a27e65b1e9ebf5b1d3be4d048c3327b5037f022816b8460405161069891815260200190565b60405180910390a250505050565b6000546001600160a01b031633146106ee5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6009548190811061072a5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b6009828154811061074b57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160149054906101000a900460ff166107a05760405162461bcd60e51b81526020600482015260076024820152662161637469766560c81b6044820152606401610432565b6107a86118f7565b600982815481106107c957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201546007546107e89190612b1c565b60078190555060006009838154811061081157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002018190555060006009838154811061084957634e487b7160e01b600052603260045260246000fd5b6000918252602082206001600690920201018054921515600160a01b0260ff60a01b199093169290921790915560405183917fb8b83da790f78135db4aec46ee97590874ea01f3cd58912bb00f308d072fda2691a25050565b600260015414156108f55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b6002600155600954829081106109365760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b610940838361191e565b50506001805550565b6002600154141561099c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b6002600155600954819081106109dd5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b600060098381548110610a0057634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600a8252604080852033865283528085206006949094029091016005810154825163256d706d60e11b815292519196509394936001600160a01b031692634adae0da9260048082019391829003018186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa391906129e1565b905060008360050160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906129e1565b9050600081838560000154610b449190612afd565b610b4e9190612add565b600080865560018601556005860154604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401606060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd99190612a49565b505085546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5991906129e1565b905081811015610c67578091505b8554610c7d906001600160a01b03163384611df0565b604051828152889033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a3505060018055505050505050565b60008060098481548110610ce657634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600a825260408085206001600160a01b03808a16875290845281862060056006909602909301948501548251632251caaf60e11b815292519597509295949216926344a3955e92600480840193829003018186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c91906129e1565b905060008360050160009054906101000a90046001600160a01b03166001600160a01b0316634adae0da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1891906129e1565b905081610e2c576000945050505050610e4c565b82548290610e3b908390612afd565b610e459190612add565b9450505050505b92915050565b6000546001600160a01b03163314610e9a5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60098181548110610ef457600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03948516965084841695600160a01b90940460ff1694929391921687565b60026001541415610f985760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b6002600155610fa98160001961191e565b5060018055565b600082821015610fc257506000610e4c565b600554821015610fd457506000610e4c565b600654831115610fe657506000610e4c565b600554831015610ff65760055492505b6006548211156110065760065491505b6110108383612b1c565b9392505050565b6000546001600160a01b0316331461105f5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6009548290811061109b5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b600983815481106110bc57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160149054906101000a900460ff166111115760405162461bcd60e51b81526020600482015260076024820152662161637469766560c81b6044820152606401610432565b6000821161114f5760405162461bcd60e51b815260206004820152600b60248201526a08585b1b1bd8dc1bda5b9d60aa1b6044820152606401610432565b6111576118f7565b816009848154811061117957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201546007546111989190612b1c565b6111a29190612ac5565b60078190555081600984815481106111ca57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160020181905550827f54ca8df74b9602d422d5c5e11eece496fd3d57504eba7dec5915ef0171c896168360405161121191815260200190565b60405180910390a2505050565b6000806009848154811061124257634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600a825260408085206001600160a01b03898116875290845281862060069590950290920160048181015460058301548451632251caaf60e11b815294519399509697909690959416936344a3955e9380830193919290829003018186803b1580156112ba57600080fd5b505afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f291906129e1565b6001850154909150600160a01b900460ff1680156113135750836003015443115b801561131e57508015155b1561138c576000611333856003015443610fb0565b9050600060075486600201546003548461134d9190612afd565b6113579190612afd565b6113619190612add565b9050826113738264e8d4a51000612afd565b61137d9190612add565b6113879085612ac5565b935050505b6001830154835464e8d4a51000906113a5908590612afd565b6113af9190612add565b610e459190612b1c565b6000546001600160a01b031633146114015760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6002546001600160a01b03838116911614156114475760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b6044820152606401610432565b61145b6001600160a01b0383163383611df0565b5050565b600260015414156114b25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b60026001819055506000600982815481106114dd57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020180546040516370a0823160e01b81523360048201529192506115739184916001600160a01b0316906370a082319060240160206040518083038186803b15801561153657600080fd5b505afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e91906129e1565b611e85565b505060018055565b600260015414156115ce5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b60026001556009548290811061160f5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b6109408383611e85565b6000546001600160a01b031633146116615760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6001600160a01b0381166116c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610432565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146117695760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6040805160e0810182526001600160a01b039485168152928416602084019081526000918401828152606085018381526080860184815260a0870185815295881660c08801908152600980546001810182559652965160069095027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81018054968a166001600160a01b031997881617905593517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08501805494511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff19909516918a169190911793909317909255517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1830155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b282015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b383015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b49091018054919093169116179055565b60095460005b8181101561145b5761190e81612090565b61191781612b5f565b90506118fd565b61192782612090565b60006009838154811061194a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600a8252604080852033865283528085206006949094029091016005810154825163256d706d60e11b815292519196509394936001600160a01b031692634adae0da9260048082019391829003018186803b1580156119b557600080fd5b505afa1580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed91906129e1565b905060008360050160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7991906129e1565b905060008111611aba5760405162461bcd60e51b815260206004820152600c60248201526b085cda185c995cd51bdd185b60a21b6044820152606401610432565b8254611af75760405162461bcd60e51b815260206004820152600c60248201526b21757365722e73686172657360a01b6044820152606401610432565b6000836001015464e8d4a5100086600401548660000154611b189190612afd565b611b229190612add565b611b2c9190612b1c565b90508015611b3e57611b3e3382612223565b600082848660000154611b519190612afd565b611b5b9190612add565b905080871115611b69578096505b8615611d83576005860154604051632e1a7d4d60e01b815260048101899052600091829182916001600160a01b031690632e1a7d4d90602401606060405180830381600087803b158015611bbc57600080fd5b505af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf49190612a49565b9250925092508760000154831115611c0f5760008855611c1f565b8754611c1c908490612b1c565b88555b88546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611c6257600080fd5b505afa158015611c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9a91906129e1565b905082811015611ca8578092505b8954611cbe906001600160a01b03163385611df0565b60018a01548a546001600160a01b03908116911614611d7e5760018a01546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d1d57600080fd5b505afa158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5591906129e1565b905082811015611d63578092505b60018b0154611d7c906001600160a01b03163385611df0565b505b505050505b6004860154855464e8d4a5100091611d9a91612afd565b611da49190612add565b60018601556040805188815260208101849052899133917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94910160405180910390a35050505050505050565b6040516001600160a01b038316602482015260448101829052611e8090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526125d5565b505050565b611e8e82612090565b600060098381548110611eb157634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600a82526040808520338652909252908320805460069093029091019350919015611f255760018201546004840154835464e8d4a5100091611eff91612afd565b611f099190612add565b611f139190612b1c565b90508015611f2557611f253382612223565b8315612026578254611f42906001600160a01b03163330876126a7565b60058301548354611f60916001600160a01b039182169116866126df565b600060098681548110611f8357634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102016005015460405163b6b55f2560e01b8152600481018790526001600160a01b039091169063b6b55f2590602401602060405180830381600087803b158015611fda57600080fd5b505af1158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201291906129e1565b8354909150612022908290612ac5565b8355505b6004830154825464e8d4a510009161203d91612afd565b6120479190612add565b60018301556040805185815260208101839052869133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e910160405180910390a35050505050565b6000600982815481106120b357634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020190508060010160149054906101000a900460ff166120df5750612220565b806003015443116120f05750612220565b600581015460408051632251caaf60e11b815290516000926001600160a01b0316916344a3955e916004808301926020929190829003018186803b15801561213757600080fd5b505afa15801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216f91906129e1565b905080612183575043600390910155612220565b6000612193836003015443610fb0565b9050600081116121a557505050612220565b60006007548460020154600354846121bd9190612afd565b6121c79190612afd565b6121d19190612add565b9050806008546121e19190612ac5565b600855826121f48264e8d4a51000612afd565b6121fe9190612add565b846004015461220d9190612ac5565b6004850155505043600390920191909155505b50565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f91906129e1565b90508082111561254957600854156124bc576002546008546040516340c10f1960e01b815230600482015260248101919091526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561230157600080fd5b505af1158015612315573d6000803e3d6000fd5b5050600060085550506002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561236157600080fd5b505afa158015612375573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239991906129e1565b90508082111561242f5760025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612429919061295f565b506124b7565b60025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561247d57600080fd5b505af1158015612491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b5919061295f565b505b612544565b60025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612542919061295f565b505b611e80565b60025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561259757600080fd5b505af11580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf919061295f565b50505050565b600061262a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127a09092919063ffffffff16565b805190915015611e805780806020019051810190612648919061295f565b611e805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610432565b6040516001600160a01b03808516602483015283166044820152606481018290526125cf9085906323b872dd60e01b90608401611e1c565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561272b57600080fd5b505afa15801561273f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276391906129e1565b61276d9190612ac5565b6040516001600160a01b0385166024820152604481018290529091506125cf90859063095ea7b360e01b90606401611e1c565b60606127af84846000856127b7565b949350505050565b6060824710156128185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610432565b843b6128665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610432565b600080866001600160a01b031685876040516128829190612a76565b60006040518083038185875af1925050503d80600081146128bf576040519150601f19603f3d011682016040523d82523d6000602084013e6128c4565b606091505b50915091506128d48282866128df565b979650505050505050565b606083156128ee575081611010565b8251156128fe5782518084602001fd5b8160405162461bcd60e51b81526004016104329190612a92565b600060208284031215612929578081fd5b813561101081612b90565b60008060408385031215612946578081fd5b823561295181612b90565b946020939093013593505050565b600060208284031215612970578081fd5b81518015158114611010578182fd5b600080600060608486031215612993578081fd5b833561299e81612b90565b925060208401356129ae81612b90565b915060408401356129be81612b90565b809150509250925092565b6000602082840312156129da578081fd5b5035919050565b6000602082840312156129f2578081fd5b5051919050565b60008060408385031215612a0b578182fd5b823591506020830135612a1d81612b90565b809150509250929050565b60008060408385031215612a3a578182fd5b50508035926020909101359150565b600080600060608486031215612a5d578283fd5b8351925060208401519150604084015190509250925092565b60008251612a88818460208701612b33565b9190910192915050565b6000602082528251806020840152612ab1816040850160208701612b33565b601f01601f19169190910160400192915050565b60008219821115612ad857612ad8612b7a565b500190565b600082612af857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b1757612b17612b7a565b500290565b600082821015612b2e57612b2e612b7a565b500390565b60005b83811015612b4e578181015183820152602001612b36565b838111156125cf5750506000910152565b6000600019821415612b7357612b73612b7a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461222057600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c6343000803000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ad5760003560e01c80638da5cb5b116100ee578063bc5a247011610097578063ded0da1011610071578063ded0da10146103a2578063e2bbb158146103b5578063f2fde38b146103c8578063f7f460c7146103db576101ad565b8063bc5a247014610369578063c6d758cb1461037c578063c6f678bd1461038f576101ad565b8063958e2d31116100c8578063958e2d3114610330578063acd3d32d14610343578063bc0838fc14610356576101ad565b80638da5cb5b1461026c578063929060d81461029157806393f1a40b146102e9576101ad565b8063441a3e701161015b5780635312ea8e116101355780635312ea8e1461023557806356eeafd9146102485780635ebac9b51461025b578063715018a614610264576101ad565b8063441a3e701461021057806344bd5b4f1461022357806348cd4cb11461022c576101ad565b80632b5b0a971161018c5780632b5b0a97146101ec5780632b68772c146101f5578063360f0730146101fd576101ad565b80629ddce5146101b2578063083c6323146101c757806317caf6f1146101e3575b600080fd5b6101c56101c0366004612a28565b6103ee565b005b6101d060065481565b6040519081526020015b60405180910390f35b6101d060075481565b6101d060085481565b6009546101d0565b6101c561020b3660046129c9565b6106a6565b6101c561021e366004612a28565b6108a2565b6101d060035481565b6101d060055481565b6101c56102433660046129c9565b610949565b6101d06102563660046129f9565b610cc2565b6101d060045481565b6101c5610e52565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101da565b6102a461029f3660046129c9565b610ee4565b604080516001600160a01b0398891681529688166020880152941515948601949094526060850192909252608084015260a083015290911660c082015260e0016101da565b61031b6102f73660046129f9565b600a6020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101da565b6101c561033e3660046129c9565b610f45565b6101d0610351366004612a28565b610fb0565b6101c5610364366004612a28565b611017565b6101d06103773660046129f9565b61121e565b6101c561038a366004612934565b6113b9565b6101c561039d3660046129c9565b61145f565b600254610279906001600160a01b031681565b6101c56103c3366004612a28565b61157b565b6101c56103d6366004612918565b611619565b6101c56103e936600461297f565b611721565b6000546001600160a01b0316331461043b5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba683398151915260448201526064015b60405180910390fd5b600954829081106104775760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b6009838154811061049857634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160149054906101000a900460ff16156104ed5760405162461bcd60e51b815260206004820152600660248201526561637469766560d01b6044820152606401610432565b6000821161052b5760405162461bcd60e51b815260206004820152600b60248201526a08585b1b1bd8dc1bda5b9d60aa1b6044820152606401610432565b6105336118f7565b60055461055f574360055560035460045461054e9190612add565b60055461055b9190612ac5565b6006555b600754439061056f908490612ac5565b600781905550826009858154811061059757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002018190555080600985815481106105ce57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003018190555060016009858154811061060657634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160146101000a81548160ff02191690831515021790555060006009858154811061065157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040181905550837fba13fd9b2f2ae67565b95a27e65b1e9ebf5b1d3be4d048c3327b5037f022816b8460405161069891815260200190565b60405180910390a250505050565b6000546001600160a01b031633146106ee5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6009548190811061072a5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b6009828154811061074b57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160149054906101000a900460ff166107a05760405162461bcd60e51b81526020600482015260076024820152662161637469766560c81b6044820152606401610432565b6107a86118f7565b600982815481106107c957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201546007546107e89190612b1c565b60078190555060006009838154811061081157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016002018190555060006009838154811061084957634e487b7160e01b600052603260045260246000fd5b6000918252602082206001600690920201018054921515600160a01b0260ff60a01b199093169290921790915560405183917fb8b83da790f78135db4aec46ee97590874ea01f3cd58912bb00f308d072fda2691a25050565b600260015414156108f55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b6002600155600954829081106109365760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b610940838361191e565b50506001805550565b6002600154141561099c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b6002600155600954819081106109dd5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b600060098381548110610a0057634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600a8252604080852033865283528085206006949094029091016005810154825163256d706d60e11b815292519196509394936001600160a01b031692634adae0da9260048082019391829003018186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa391906129e1565b905060008360050160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f91906129e1565b9050600081838560000154610b449190612afd565b610b4e9190612add565b600080865560018601556005860154604051632e1a7d4d60e01b8152600481018390529192506001600160a01b031690632e1a7d4d90602401606060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd99190612a49565b505085546040516370a0823160e01b8152306004820152600092506001600160a01b03909116906370a082319060240160206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5991906129e1565b905081811015610c67578091505b8554610c7d906001600160a01b03163384611df0565b604051828152889033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a3505060018055505050505050565b60008060098481548110610ce657634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600a825260408085206001600160a01b03808a16875290845281862060056006909602909301948501548251632251caaf60e11b815292519597509295949216926344a3955e92600480840193829003018186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c91906129e1565b905060008360050160009054906101000a90046001600160a01b03166001600160a01b0316634adae0da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1891906129e1565b905081610e2c576000945050505050610e4c565b82548290610e3b908390612afd565b610e459190612add565b9450505050505b92915050565b6000546001600160a01b03163314610e9a5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60098181548110610ef457600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03948516965084841695600160a01b90940460ff1694929391921687565b60026001541415610f985760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b6002600155610fa98160001961191e565b5060018055565b600082821015610fc257506000610e4c565b600554821015610fd457506000610e4c565b600654831115610fe657506000610e4c565b600554831015610ff65760055492505b6006548211156110065760065491505b6110108383612b1c565b9392505050565b6000546001600160a01b0316331461105f5760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6009548290811061109b5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b600983815481106110bc57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160010160149054906101000a900460ff166111115760405162461bcd60e51b81526020600482015260076024820152662161637469766560c81b6044820152606401610432565b6000821161114f5760405162461bcd60e51b815260206004820152600b60248201526a08585b1b1bd8dc1bda5b9d60aa1b6044820152606401610432565b6111576118f7565b816009848154811061117957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600201546007546111989190612b1c565b6111a29190612ac5565b60078190555081600984815481106111ca57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160020181905550827f54ca8df74b9602d422d5c5e11eece496fd3d57504eba7dec5915ef0171c896168360405161121191815260200190565b60405180910390a2505050565b6000806009848154811061124257634e487b7160e01b600052603260045260246000fd5b60009182526020808320878452600a825260408085206001600160a01b03898116875290845281862060069590950290920160048181015460058301548451632251caaf60e11b815294519399509697909690959416936344a3955e9380830193919290829003018186803b1580156112ba57600080fd5b505afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f291906129e1565b6001850154909150600160a01b900460ff1680156113135750836003015443115b801561131e57508015155b1561138c576000611333856003015443610fb0565b9050600060075486600201546003548461134d9190612afd565b6113579190612afd565b6113619190612add565b9050826113738264e8d4a51000612afd565b61137d9190612add565b6113879085612ac5565b935050505b6001830154835464e8d4a51000906113a5908590612afd565b6113af9190612add565b610e459190612b1c565b6000546001600160a01b031633146114015760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6002546001600160a01b03838116911614156114475760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b6044820152606401610432565b61145b6001600160a01b0383163383611df0565b5050565b600260015414156114b25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b60026001819055506000600982815481106114dd57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020180546040516370a0823160e01b81523360048201529192506115739184916001600160a01b0316906370a082319060240160206040518083038186803b15801561153657600080fd5b505afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e91906129e1565b611e85565b505060018055565b600260015414156115ce5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610432565b60026001556009548290811061160f5760405162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b6044820152606401610432565b6109408383611e85565b6000546001600160a01b031633146116615760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6001600160a01b0381166116c65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610432565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146117695760405162461bcd60e51b81526020600482018190526024820152600080516020612ba68339815191526044820152606401610432565b6040805160e0810182526001600160a01b039485168152928416602084019081526000918401828152606085018381526080860184815260a0870185815295881660c08801908152600980546001810182559652965160069095027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81018054968a166001600160a01b031997881617905593517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08501805494511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff19909516918a169190911793909317909255517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1830155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b282015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b383015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b49091018054919093169116179055565b60095460005b8181101561145b5761190e81612090565b61191781612b5f565b90506118fd565b61192782612090565b60006009838154811061194a57634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600a8252604080852033865283528085206006949094029091016005810154825163256d706d60e11b815292519196509394936001600160a01b031692634adae0da9260048082019391829003018186803b1580156119b557600080fd5b505afa1580156119c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ed91906129e1565b905060008360050160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4157600080fd5b505afa158015611a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7991906129e1565b905060008111611aba5760405162461bcd60e51b815260206004820152600c60248201526b085cda185c995cd51bdd185b60a21b6044820152606401610432565b8254611af75760405162461bcd60e51b815260206004820152600c60248201526b21757365722e73686172657360a01b6044820152606401610432565b6000836001015464e8d4a5100086600401548660000154611b189190612afd565b611b229190612add565b611b2c9190612b1c565b90508015611b3e57611b3e3382612223565b600082848660000154611b519190612afd565b611b5b9190612add565b905080871115611b69578096505b8615611d83576005860154604051632e1a7d4d60e01b815260048101899052600091829182916001600160a01b031690632e1a7d4d90602401606060405180830381600087803b158015611bbc57600080fd5b505af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf49190612a49565b9250925092508760000154831115611c0f5760008855611c1f565b8754611c1c908490612b1c565b88555b88546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611c6257600080fd5b505afa158015611c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9a91906129e1565b905082811015611ca8578092505b8954611cbe906001600160a01b03163385611df0565b60018a01548a546001600160a01b03908116911614611d7e5760018a01546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611d1d57600080fd5b505afa158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5591906129e1565b905082811015611d63578092505b60018b0154611d7c906001600160a01b03163385611df0565b505b505050505b6004860154855464e8d4a5100091611d9a91612afd565b611da49190612add565b60018601556040805188815260208101849052899133917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94910160405180910390a35050505050505050565b6040516001600160a01b038316602482015260448101829052611e8090849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526125d5565b505050565b611e8e82612090565b600060098381548110611eb157634e487b7160e01b600052603260045260246000fd5b60009182526020808320868452600a82526040808520338652909252908320805460069093029091019350919015611f255760018201546004840154835464e8d4a5100091611eff91612afd565b611f099190612add565b611f139190612b1c565b90508015611f2557611f253382612223565b8315612026578254611f42906001600160a01b03163330876126a7565b60058301548354611f60916001600160a01b039182169116866126df565b600060098681548110611f8357634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102016005015460405163b6b55f2560e01b8152600481018790526001600160a01b039091169063b6b55f2590602401602060405180830381600087803b158015611fda57600080fd5b505af1158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201291906129e1565b8354909150612022908290612ac5565b8355505b6004830154825464e8d4a510009161203d91612afd565b6120479190612add565b60018301556040805185815260208101839052869133917f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e910160405180910390a35050505050565b6000600982815481106120b357634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020190508060010160149054906101000a900460ff166120df5750612220565b806003015443116120f05750612220565b600581015460408051632251caaf60e11b815290516000926001600160a01b0316916344a3955e916004808301926020929190829003018186803b15801561213757600080fd5b505afa15801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216f91906129e1565b905080612183575043600390910155612220565b6000612193836003015443610fb0565b9050600081116121a557505050612220565b60006007548460020154600354846121bd9190612afd565b6121c79190612afd565b6121d19190612add565b9050806008546121e19190612ac5565b600855826121f48264e8d4a51000612afd565b6121fe9190612add565b846004015461220d9190612ac5565b6004850155505043600390920191909155505b50565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561226757600080fd5b505afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f91906129e1565b90508082111561254957600854156124bc576002546008546040516340c10f1960e01b815230600482015260248101919091526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561230157600080fd5b505af1158015612315573d6000803e3d6000fd5b5050600060085550506002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561236157600080fd5b505afa158015612375573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239991906129e1565b90508082111561242f5760025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156123f157600080fd5b505af1158015612405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612429919061295f565b506124b7565b60025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561247d57600080fd5b505af1158015612491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b5919061295f565b505b612544565b60025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561250a57600080fd5b505af115801561251e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612542919061295f565b505b611e80565b60025460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561259757600080fd5b505af11580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf919061295f565b50505050565b600061262a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127a09092919063ffffffff16565b805190915015611e805780806020019051810190612648919061295f565b611e805760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610432565b6040516001600160a01b03808516602483015283166044820152606481018290526125cf9085906323b872dd60e01b90608401611e1c565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561272b57600080fd5b505afa15801561273f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276391906129e1565b61276d9190612ac5565b6040516001600160a01b0385166024820152604481018290529091506125cf90859063095ea7b360e01b90606401611e1c565b60606127af84846000856127b7565b949350505050565b6060824710156128185760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610432565b843b6128665760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610432565b600080866001600160a01b031685876040516128829190612a76565b60006040518083038185875af1925050503d80600081146128bf576040519150601f19603f3d011682016040523d82523d6000602084013e6128c4565b606091505b50915091506128d48282866128df565b979650505050505050565b606083156128ee575081611010565b8251156128fe5782518084602001fd5b8160405162461bcd60e51b81526004016104329190612a92565b600060208284031215612929578081fd5b813561101081612b90565b60008060408385031215612946578081fd5b823561295181612b90565b946020939093013593505050565b600060208284031215612970578081fd5b81518015158114611010578182fd5b600080600060608486031215612993578081fd5b833561299e81612b90565b925060208401356129ae81612b90565b915060408401356129be81612b90565b809150509250925092565b6000602082840312156129da578081fd5b5035919050565b6000602082840312156129f2578081fd5b5051919050565b60008060408385031215612a0b578182fd5b823591506020830135612a1d81612b90565b809150509250929050565b60008060408385031215612a3a578182fd5b50508035926020909101359150565b600080600060608486031215612a5d578283fd5b8351925060208401519150604084015190509250925092565b60008251612a88818460208701612b33565b9190910192915050565b6000602082528251806020840152612ab1816040850160208701612b33565b601f01601f19169190910160400192915050565b60008219821115612ad857612ad8612b7a565b500190565b600082612af857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b1757612b17612b7a565b500290565b600082821015612b2e57612b2e612b7a565b500390565b60005b83811015612b4e578181015183820152602001612b36565b838111156125cf5750506000910152565b6000600019821415612b7357612b73612b7a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461222057600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a164736f6c6343000803000a",
  "devdoc": {
    "details": "Implementation of the Master of BALLE. This contract will take care of all rewards calculations and distribution of BALLE tokens in vaults. It's ownable and the owner is the only who can manage the active vaults and it's parameters for rewards distribution. The ownership will be transferred to the Governance GNOSIS Safe.",
    "kind": "dev",
    "methods": {
      "activateVaultRewards(uint256,uint256)": {
        "details": "Function to activate vault rewards. Can only be called by the owner."
      },
      "addVault(address,address,address)": {
        "details": "Function to add a new vault configuration. Can only be called by the owner."
      },
      "deactivateVaultRewards(uint256)": {
        "details": "Function to deactivate vault rewards. Can only be called by the owner."
      },
      "deposit(uint256,uint256)": {
        "details": "Function that deposits user tokens."
      },
      "depositAll(uint256)": {
        "details": "Function that deposits all user tokens balance."
      },
      "emergencyWithdraw(uint256)": {
        "details": "Function that withdraws without caring about rewards. EMERGENCY ONLY."
      },
      "getBlockMultiplier(uint256,uint256)": {
        "details": "View function to calculate the reward multiplier over the given _from to _to block."
      },
      "inCaseTokensGetStuck(address,uint256)": {
        "details": "Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY."
      },
      "modifyVaultRewards(uint256,uint256)": {
        "details": "Function to modify vault rewards. Can only be called by the owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingBalle(uint256,address)": {
        "details": "View function to see pending BALLE on frontend."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stakedTokens(uint256,address)": {
        "details": "View function to see staked (LP) tokens on frontend."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vaultLength()": {
        "details": "View function to get the number of vaults configured."
      },
      "withdraw(uint256,uint256)": {
        "details": "Function that withdraws user tokens."
      },
      "withdrawAll(uint256)": {
        "details": "Function that withdraws all user tokens balance."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2377,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "balle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(BALLEv2)2217"
      },
      {
        "astId": 2379,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "ballePerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2381,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "balleTotalRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2383,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "startBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2385,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "endBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2388,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2391,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "balleToMint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2395,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "vaultInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(VaultInfo)2369_storage)dyn_storage"
      },
      {
        "astId": 2402,
        "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
        "label": "userInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2374_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(VaultInfo)2369_storage)dyn_storage": {
        "base": "t_struct(VaultInfo)2369_storage",
        "encoding": "dynamic_array",
        "label": "struct BalleMaster.VaultInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BALLEv2)2217": {
        "encoding": "inplace",
        "label": "contract BALLEv2",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)728": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2374_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BalleMaster.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2374_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2374_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct BalleMaster.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2374_storage)"
      },
      "t_struct(UserInfo)2374_storage": {
        "encoding": "inplace",
        "label": "struct BalleMaster.UserInfo",
        "members": [
          {
            "astId": 2371,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2373,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)2369_storage": {
        "encoding": "inplace",
        "label": "struct BalleMaster.VaultInfo",
        "members": [
          {
            "astId": 2355,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "depositToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)728"
          },
          {
            "astId": 2358,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "wantToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)728"
          },
          {
            "astId": 2360,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "rewardsActive",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2362,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2364,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2366,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "accBallePerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2368,
            "contract": "contracts/vaults/BalleMaster.sol:BalleMaster",
            "label": "strat",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}