{
  "address": "0x49f1A0E1ce7732b792569950782BeB64C927d58F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_cakeToBallePath",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_cakeToToken0Path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_cakeToToken1Path",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryAmount",
          "type": "uint256"
        }
      ],
      "name": "DistributeFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "SetGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasuryFeeFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minEarnedToReinvest",
          "type": "uint256"
        }
      ],
      "name": "SetSettings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE_LL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ENTRANCE_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_FACTOR_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_EARNED_TO_REINVEST_LL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_EARNED_TO_REINVEST_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERFORMANCE_FEE_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERFORMANCE_FEE_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLIPPAGE_UL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "addHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cake",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cakeToBallePath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cakeToToken0Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cakeToToken1Path",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minEarnedToReinvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "panic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingCake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "removeHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryFeeFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minEarnedToReinvest",
          "type": "uint256"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFeeFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesTotal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earnedAmt",
          "type": "uint256"
        }
      ],
      "name": "upgradeFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strat",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44bb29a76ba0e83ac90a63c5cc2db73d753ada6d89327b1daa720fd1c8b32e2e",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0x49f1A0E1ce7732b792569950782BeB64C927d58F",
    "transactionIndex": 0,
    "gasUsed": "3317419",
    "logsBloom": "0x
    "blockHash": "0x299308254b55e1a5105070b37af45939e8334fd0534dfcd4000d329bfbadf693",
    "transactionHash": "0x44bb29a76ba0e83ac90a63c5cc2db73d753ada6d89327b1daa720fd1c8b32e2e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8890185,
        "transactionHash": "0x44bb29a76ba0e83ac90a63c5cc2db73d753ada6d89327b1daa720fd1c8b32e2e",
        "address": "0x49f1A0E1ce7732b792569950782BeB64C927d58F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x299308254b55e1a5105070b37af45939e8334fd0534dfcd4000d329bfbadf693"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8890185,
        "transactionHash": "0x44bb29a76ba0e83ac90a63c5cc2db73d753ada6d89327b1daa720fd1c8b32e2e",
        "address": "0x49f1A0E1ce7732b792569950782BeB64C927d58F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355",
          "0x000000000000000000000000d3f2fa28ec7b8261ddd31de3697454c1cd5d855b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x299308254b55e1a5105070b37af45939e8334fd0534dfcd4000d329bfbadf693"
      }
    ],
    "blockNumber": 8890185,
    "cumulativeGasUsed": "3317419",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x3edd0c7cec29179d45431471e413be197fb31446",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd",
      "0xac9b54f806af4b9451f1faa5293601d5006348ad",
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0x9ac64cc6e4415144c455bd8e4837fea55603e5c3",
      "0x91E85122eF92FF306EA47025efd00404CcaEEb19",
      "0xD3f2fA28EC7B8261DdD31DE3697454C1cD5D855B",
      "0xb25D37892305FE1b44c06F035139a0ED11EcA82d",
      "0x03D622e23228B85db39F8168f0C6FAe41F32Cbf1",
      "0x8ADB7044d41aC5B378281e0ebd9CD6eAC43a53F8"
    ],
    1,
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd",
      "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b"
    ],
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd"
    ],
    [
      "0xa6D6240e5d5b6232996D58B6b3C4555c824deA73",
      "0xae13d989dac2f0debff460ac112a837c89baa7cd",
      "0xac9b54f806af4b9451f1faa5293601d5006348ad"
    ]
  ],
  "solcInputHash": "347fc71d55151518a0fec02bb327905f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_cakeToBallePath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_cakeToToken0Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_cakeToToken1Path\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFeeFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minEarnedToReinvest\",\"type\":\"uint256\"}],\"name\":\"SetSettings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE_LL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTRANCE_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_EARNED_TO_REINVEST_LL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_EARNED_TO_REINVEST_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_FEE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_UL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"addHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cakeToBallePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cakeToToken0Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cakeToToken1Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEarnedToReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"removeHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEarnedToReinvest\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnedAmt\",\"type\":\"uint256\"}],\"name\":\"upgradeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strat\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHarvester(address)\":{\"details\":\"Add a harvester address from Governance GNOSIS Safe.\"},\"constructor\":{\"details\":\"Implementation of PancakeSwap LP autocompounding strategy.\"},\"deposit(address,uint256)\":{\"details\":\"Function to transfer tokens BalleMaster -> strategy and put it to work.\"},\"harvest()\":{\"details\":\"Function to harvest earnings and reinvest.\"},\"inCaseTokensGetStuck(address,uint256,address)\":{\"details\":\"Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"panic()\":{\"details\":\"Stop the vault with emergencyWithdraw from farm.\"},\"pause()\":{\"details\":\"Stop the vault.\"},\"pendingCake()\":{\"details\":\"View function to see pending CAKEs on farm.\"},\"removeHarvester(address)\":{\"details\":\"Remove a harvester address from Governance GNOSIS Safe.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"retire()\":{\"details\":\"Retire the vault.\"},\"setGovernance(address)\":{\"details\":\"Function to change the governance address.\"},\"setRewards(address)\":{\"details\":\"Function to change the rewards address.\"},\"setSettings(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Function to change strategy settings.\"},\"setTreasury(address)\":{\"details\":\"Function to change the treasury address.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Restart the vault.\"},\"upgradeFrom(address,uint256,uint256,uint256)\":{\"details\":\"Complete upgrade from the old strategy.\"},\"upgradeTo(address)\":{\"details\":\"Prepare to upgrade strategy to the new one indicated.\"},\"withdraw(address,uint256)\":{\"details\":\"Function to transfer tokens strategy -> BalleMaster.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/StratPancakeLpV1.sol\":\"StratPancakeLpV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"// contracts/interfaces/IPancakeRouter01.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xaabb10e62d52c3c3b172d2ca712f2eb26e67d6fd04f143a1cac2e3b2d1594fd0\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeswapFarm.sol\":{\"content\":\"// contracts/interfaces/IPancakeswapFarm.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeswapFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\",\"keccak256\":\"0x14a6c4dce2a653a262b585f434be731f622fe55d4f670c275ab618f2c185a0dd\",\"license\":\"MIT\"},\"contracts/strategies/StratPancakeLpV1.sol\":{\"content\":\"// contracts/strategies/StratPancakeLpV1.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPancakeswapFarm.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter01.sol\\\";\\n\\ncontract StratPancakeLpV1 is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // PancakeSwap's MasterChef address.\\n    address public immutable masterChef;\\n    // MasterChef's pid of pool.\\n    uint256 public immutable pid;\\n    // Deposit token (LP) address.\\n    address public immutable depositToken;\\n    // First token of LP address.\\n    address public immutable token0;\\n    // Second token of LP address.\\n    address public immutable token1;\\n    // Earned token (CAKE) address.\\n    address public immutable cake;\\n    // PancakeSwap router address.\\n    address public immutable router;\\n\\n    // Address to send controller fee.\\n    address public rewards;\\n    // Address to send treasury fee.\\n    address public treasury;\\n\\n    // Governance address\\n    address public governance;\\n    // Harvest addresses\\n    mapping(address => bool) public harvesters;\\n\\n    uint256 public depositTotal = 0;\\n    uint256 public sharesTotal = 0;\\n\\n    // 0.1% entrance fee. Goes to pool, prevents front-running.\\n    uint256 public entranceFee = 9990;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant ENTRANCE_FEE_MAX = 10000;\\n    // 0.5% max settable entrance fee, LL = lowerlimit.\\n    uint256 public constant ENTRANCE_FEE_LL = 9950;\\n\\n    // 4% performance fee.\\n    uint256 public performanceFee = 400;\\n    // 8% max settable performance fee, UL = upperlimit.\\n    uint256 public constant PERFORMANCE_FEE_UL = 800;\\n    // Factor to calculate fee 100 = 1%.\\n    uint256 public constant PERFORMANCE_FEE_MAX = 10000;\\n    // 3% goes to BALLE holders.\\n    uint256 public rewardsFeeFactor = 750;\\n    // 1% goes to treasury.\\n    uint256 public treasuryFeeFactor = 250;\\n    // Factor for fee distribution.\\n    uint256 public constant FEE_FACTOR_MAX = 1000;\\n\\n    // 5% default slippage tolerance.\\n    uint256 public slippage = 950;\\n    // 10% max settable slippage tolerance, UL = upperlimit.\\n    uint256 public constant SLIPPAGE_UL = 990;\\n\\n    // Minimum earned amount to reinvest. Default 10 CAKE.\\n    uint256 public minEarnedToReinvest = 10000000000000000000;\\n    // 1 CAKE min settable minimum to reinvest, LL = lowerlimit.\\n    uint256 public constant MIN_EARNED_TO_REINVEST_LL = 1000000000000000000;\\n    // 20 CAKE max settable minimum to reinvest, UL = upperlimit.\\n    uint256 public constant MIN_EARNED_TO_REINVEST_UL = 20000000000000000000;\\n\\n    // Swap routes\\n    address[] public cakeToBallePath;\\n    address[] public cakeToToken0Path;\\n    address[] public cakeToToken1Path;\\n\\n    // Paused state activated\\n    bool public paused = false;\\n\\n    event SetSettings(\\n        uint256 entranceFee,\\n        uint256 performanceFee,\\n        uint256 rewardsFeeFactor,\\n        uint256 treasuryFeeFactor,\\n        uint256 slippage,\\n        uint256 minEarnedToReinvest\\n    );\\n    event Harvest(uint256 amount);\\n    event DistributeFees(uint256 rewardsAmount, uint256 treasuryAmount);\\n    event SetGovernance(address indexed addr);\\n\\n    /**\\n     * @dev Implementation of PancakeSwap LP autocompounding strategy.\\n     */\\n    constructor(\\n        address[] memory _addresses,\\n        uint256 _pid,\\n        address[] memory _cakeToBallePath,\\n        address[] memory _cakeToToken0Path,\\n        address[] memory _cakeToToken1Path\\n    ) {\\n        require(_pid > 0, \\\"!pid\\\");\\n\\n        depositToken = _addresses[0];\\n        token0 = _addresses[1];\\n        token1 = _addresses[2];\\n        cake = _addresses[3];\\n        router = _addresses[4];\\n        masterChef = _addresses[5];\\n        pid = _pid;\\n\\n        governance = msg.sender;\\n        harvesters[_addresses[7]] = true;\\n        rewards = _addresses[8];\\n        treasury = _addresses[9];\\n\\n        cakeToBallePath = _cakeToBallePath;\\n        cakeToToken0Path = _cakeToToken0Path;\\n        cakeToToken1Path = _cakeToToken1Path;\\n\\n        transferOwnership(_addresses[6]);\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the governance address.\\n     */\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the governance address or an authorized harvester.\\n     */\\n    modifier onlyHarvester() {\\n        require(msg.sender == governance || harvesters[msg.sender], \\\"!governance && !harvester\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the strategy is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check that the strategy is paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused, \\\"!paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev View function to see pending CAKEs on farm.\\n     */\\n    function pendingCake() external view returns (uint256) {\\n        return IPancakeswapFarm(masterChef).pendingCake(pid, address(this));\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens BalleMaster -> strategy and put it to work.\\n     */\\n    function deposit(address _user, uint256 _amount) public onlyOwner whenNotPaused returns (uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        IERC20(depositToken).safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        uint256 sharesAdded = _amount;\\n        if (depositTotal > 0 && sharesTotal > 0) {\\n            sharesAdded = ((_amount * sharesTotal * entranceFee) / depositTotal) / ENTRANCE_FEE_MAX;\\n        }\\n        sharesTotal = sharesTotal + sharesAdded;\\n\\n        farm();\\n\\n        return sharesAdded;\\n    }\\n\\n    /**\\n     * @dev Function to send depositToken to farm.\\n     */\\n    function farm() internal {\\n        if (depositTotal == 0) {\\n            // On first farming, set allowances\\n            setAllowances();\\n        }\\n        uint256 amount = IERC20(depositToken).balanceOf(address(this));\\n        depositTotal = depositTotal + amount;\\n\\n        IPancakeswapFarm(masterChef).deposit(pid, amount);\\n    }\\n\\n    /**\\n     * @dev Function to transfer tokens strategy -> BalleMaster.\\n     */\\n    function withdraw(address _user, uint256 _amount) public onlyOwner returns (uint256, uint256) {\\n        require(_user != address(0), \\\"!user\\\");\\n        require(_amount > 0, \\\"!amount\\\");\\n\\n        uint256 sharesRemoved = (_amount * sharesTotal) / depositTotal;\\n        if (sharesRemoved > sharesTotal) {\\n            sharesRemoved = sharesTotal;\\n        }\\n        sharesTotal = sharesTotal - sharesRemoved;\\n\\n        // If paused, tokens are already here\\n        if (!paused) {\\n            IPancakeswapFarm(masterChef).withdraw(pid, _amount);\\n        }\\n\\n        uint256 balance = IERC20(depositToken).balanceOf(address(this));\\n        if (_amount > balance) {\\n            _amount = balance;\\n        }\\n\\n        if (depositTotal < _amount) {\\n            _amount = depositTotal;\\n        }\\n\\n        depositTotal = depositTotal - _amount;\\n\\n        IERC20(depositToken).safeTransfer(address(msg.sender), _amount);\\n\\n        return (sharesRemoved, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to harvest earnings and reinvest.\\n     */\\n    function harvest() public onlyHarvester whenNotPaused {\\n        _harvest(0);\\n    }\\n\\n    /**\\n     * @dev Internal function to harvest earnings and reinvest.\\n     * If called with _amount > 0 will withdraw the LP indicated with the earned CAKE.\\n     */\\n    function _harvest(uint256 _amount) internal {\\n        // Harvest farm tokens\\n        IPancakeswapFarm(masterChef).withdraw(pid, _amount);\\n        uint256 earnedAmt = IERC20(cake).balanceOf(address(this));\\n        if (earnedAmt < minEarnedToReinvest) {\\n            return;\\n        }\\n\\n        emit Harvest(earnedAmt);\\n\\n        // Distribute the fees\\n        earnedAmt = distributeFees(earnedAmt);\\n\\n        // Converts farm tokens into want tokens\\n        if (cake != token0) {\\n            // Swap half earned to token0\\n            safeSwap(\\n                router,\\n                earnedAmt / 2,\\n                slippage,\\n                cakeToToken0Path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp + 600\\n            );\\n        }\\n\\n        if (cake != token1) {\\n            // Swap half earned to token1\\n            safeSwap(\\n                router,\\n                earnedAmt / 2,\\n                slippage,\\n                cakeToToken1Path,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp + 600\\n            );\\n        }\\n\\n        // Add liquidity\\n        uint256 token0Amt = IERC20(token0).balanceOf(address(this));\\n        uint256 token1Amt = IERC20(token1).balanceOf(address(this));\\n        if (token0Amt > 0 && token1Amt > 0) {\\n            IPancakeRouter01(router).addLiquidity(\\n                token0,\\n                token1,\\n                token0Amt,\\n                token1Amt,\\n                0,\\n                0,\\n                address(this),\\n                // solhint-disable-next-line not-rely-on-time\\n                block.timestamp + 600\\n            );\\n        }\\n\\n        farm();\\n    }\\n\\n    /**\\n     * @dev Function to calculate and distribute the fees.\\n     */\\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\\n        if (_earnedAmt > 0) {\\n            // Performance fee\\n            if (performanceFee > 0) {\\n                uint256 totalFee = (_earnedAmt * performanceFee) / PERFORMANCE_FEE_MAX;\\n\\n                uint256 treasuryFee = (totalFee * treasuryFeeFactor) / FEE_FACTOR_MAX;\\n                // Swap treasuryFee to BALLE and send to treasury.\\n                safeSwap(\\n                    router,\\n                    treasuryFee,\\n                    slippage,\\n                    cakeToBallePath,\\n                    treasury,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + 600\\n                );\\n                uint256 rewardsFee = (totalFee * rewardsFeeFactor) / FEE_FACTOR_MAX;\\n                // Swap rewardsFee to BALLE and send to rewards contract.\\n                safeSwap(\\n                    router,\\n                    rewardsFee,\\n                    slippage,\\n                    cakeToBallePath,\\n                    rewards,\\n                    // solhint-disable-next-line not-rely-on-time\\n                    block.timestamp + 600\\n                );\\n\\n                _earnedAmt = _earnedAmt - totalFee;\\n\\n                emit DistributeFees(rewardsFee, treasuryFee);\\n            }\\n        }\\n\\n        return _earnedAmt;\\n    }\\n\\n    /**\\n     * @dev Function to change strategy settings.\\n     */\\n    function setSettings(\\n        uint256 _entranceFee,\\n        uint256 _performanceFee,\\n        uint256 _rewardsFeeFactor,\\n        uint256 _treasuryFeeFactor,\\n        uint256 _slippage,\\n        uint256 _minEarnedToReinvest\\n    ) public onlyGovernance {\\n        require(_entranceFee >= ENTRANCE_FEE_LL, \\\"!entranceFeeLL\\\");\\n        require(_entranceFee <= ENTRANCE_FEE_MAX, \\\"!entranceFeeMax\\\");\\n        entranceFee = _entranceFee;\\n\\n        require(_performanceFee <= PERFORMANCE_FEE_UL, \\\"!performanceFeeUL\\\");\\n        performanceFee = _performanceFee;\\n\\n        require(_rewardsFeeFactor + _treasuryFeeFactor == FEE_FACTOR_MAX, \\\"!feeFactor\\\");\\n        rewardsFeeFactor = _rewardsFeeFactor;\\n        treasuryFeeFactor = _treasuryFeeFactor;\\n\\n        require(_slippage <= SLIPPAGE_UL, \\\"!slippageUL\\\");\\n        slippage = _slippage;\\n\\n        require(_minEarnedToReinvest <= MIN_EARNED_TO_REINVEST_UL, \\\"!minEarnedToReinvestUL\\\");\\n        require(_minEarnedToReinvest >= MIN_EARNED_TO_REINVEST_LL, \\\"!minEarnedToReinvestLL\\\");\\n        minEarnedToReinvest = _minEarnedToReinvest;\\n\\n        emit SetSettings(\\n            _entranceFee,\\n            _performanceFee,\\n            _rewardsFeeFactor,\\n            _treasuryFeeFactor,\\n            _slippage,\\n            _minEarnedToReinvest\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to change the governance address.\\n     */\\n    function setGovernance(address _governance) public onlyGovernance {\\n        require(_governance != address(0), \\\"zero address\\\");\\n        governance = _governance;\\n        emit SetGovernance(_governance);\\n    }\\n\\n    /**\\n     * @dev Function to change the rewards address.\\n     */\\n    function setRewards(address _rewards) public onlyGovernance {\\n        require(_rewards != address(0), \\\"zero address\\\");\\n        rewards = _rewards;\\n    }\\n\\n    /**\\n     * @dev Function to change the treasury address.\\n     */\\n    function setTreasury(address _treasury) public onlyGovernance {\\n        require(_treasury != address(0), \\\"zero address\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @dev Add a harvester address from Governance GNOSIS Safe.\\n     */\\n    function addHarvester(address _harvester) external onlyGovernance {\\n        require(_harvester != address(0), \\\"zero address\\\");\\n        harvesters[_harvester] = true;\\n    }\\n\\n    /**\\n     * @dev Remove a harvester address from Governance GNOSIS Safe.\\n     */\\n    function removeHarvester(address _harvester) external onlyGovernance {\\n        require(_harvester != address(0), \\\"zero address\\\");\\n        harvesters[_harvester] = false;\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY.\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public onlyGovernance {\\n        require(_token != address(0), \\\"zero token address\\\");\\n        require(_to != address(0), \\\"zero to address\\\");\\n        require(_amount > 0, \\\"!amount\\\");\\n        require(_token != cake, \\\"!safe\\\");\\n        require(_token != depositToken, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Utility function for setting allowances with third party contracts.\\n     */\\n    function setAllowances() internal {\\n        // Approve token transfers\\n        IERC20(depositToken).safeApprove(masterChef, type(uint256).max);\\n        IERC20(cake).safeApprove(router, type(uint256).max);\\n        IERC20(token0).safeApprove(router, type(uint256).max);\\n        IERC20(token1).safeApprove(router, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Utility function for clearing allowances with third party contracts.\\n     */\\n    function clearAllowances() internal {\\n        // Disapprove token transfers\\n        IERC20(depositToken).safeApprove(masterChef, 0);\\n        IERC20(cake).safeApprove(router, 0);\\n        IERC20(token0).safeApprove(router, 0);\\n        IERC20(token1).safeApprove(router, 0);\\n    }\\n\\n    /**\\n     * @dev Utility function for safely swap tokens.\\n     */\\n    function safeSwap(\\n        address _router,\\n        uint256 _amountIn,\\n        uint256 _slippage,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline\\n    ) internal {\\n        uint256[] memory amounts = IPancakeRouter01(_router).getAmountsOut(_amountIn, _path);\\n        uint256 amountOut = amounts[amounts.length - 1];\\n\\n        IPancakeRouter01(_router).swapExactTokensForTokens(\\n            _amountIn,\\n            (amountOut * _slippage) / 1000,\\n            _path,\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @dev Prepare to upgrade strategy to the new one indicated.\\n     */\\n    function upgradeTo(address _strat)\\n        external\\n        onlyOwner\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(_strat != address(0), \\\"!strat\\\");\\n\\n        // Stop vault.\\n        _pause();\\n\\n        // Set allowance for new strat contract.\\n        uint256 depositAmt = IERC20(depositToken).balanceOf(address(this));\\n        uint256 earnedAmt = IERC20(cake).balanceOf(address(this));\\n        IERC20(depositToken).safeApprove(_strat, 0);\\n        IERC20(depositToken).safeIncreaseAllowance(_strat, depositAmt);\\n        IERC20(cake).safeApprove(_strat, 0);\\n        IERC20(cake).safeIncreaseAllowance(_strat, earnedAmt);\\n\\n        return (sharesTotal, depositAmt, earnedAmt);\\n    }\\n\\n    /**\\n     * @dev Complete upgrade from the old strategy.\\n     */\\n    function upgradeFrom(\\n        address _strat,\\n        uint256 _sharesTotal,\\n        uint256 _depositAmt,\\n        uint256 _earnedAmt\\n    ) external onlyOwner {\\n        require(_strat != address(0), \\\"!strat\\\");\\n\\n        if (_depositAmt > 0) {\\n            IERC20(depositToken).safeTransferFrom(_strat, address(this), _depositAmt);\\n        }\\n        if (_earnedAmt > 0) {\\n            IERC20(cake).safeTransferFrom(_strat, address(this), _earnedAmt);\\n        }\\n        sharesTotal = _sharesTotal;\\n\\n        farm();\\n    }\\n\\n    /**\\n     * @dev Stop the vault.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Internal function for stopping the vault.\\n     */\\n    function _pause() internal {\\n        if (!paused) {\\n            // Harvest with withdrawall.\\n            if (depositTotal > 0) {\\n                _harvest(depositTotal);\\n            }\\n\\n            // Clear allowances of third party contracts.\\n            clearAllowances();\\n\\n            paused = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Restart the vault.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        depositTotal = 0; // It will be set back on farm().\\n        farm();\\n        paused = false;\\n    }\\n\\n    /**\\n     * @dev Stop the vault with emergencyWithdraw from farm.\\n     */\\n    function panic() external onlyOwner whenNotPaused {\\n        // Emergency withdraw.\\n        IPancakeswapFarm(masterChef).emergencyWithdraw(pid);\\n\\n        // Clear allowances of third party contracts.\\n        clearAllowances();\\n\\n        paused = true;\\n    }\\n\\n    /**\\n     * @dev Retire the vault.\\n     */\\n    function retire() external onlyOwner {\\n        // Stop vault\\n        _pause();\\n\\n        // Send remaining earningTokens to treasury (if not converted on last harvest because not reach minimun).\\n        uint256 earnedAmt = IERC20(cake).balanceOf(address(this));\\n        if (earnedAmt > 0) {\\n            IERC20(cake).safeTransfer(treasury, earnedAmt);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa81ec9d3fa38f3396727da3811488107d9eb866ac8af68e9b4392745abfd1445\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052600060058190556006556127066007556101906008556102ee60095560fa600a556103b6600b55678ac7230489e80000600c556010805460ff191690553480156200004f57600080fd5b5060405162003b9138038062003b91833981016040819052620000729162000687565b600080546001600160a01b0319163390811782556040519091829160008051602062003b71833981519152908290a35060008411620000e65760405162461bcd60e51b8152600401620000dd90602080825260049082015263085c1a5960e21b604082015260600190565b60405180910390fd5b846000815181106200010857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031660c0816001600160a01b031660601b81525050846001815181106200014e57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031660e0816001600160a01b031660601b81525050846002815181106200019457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610100816001600160a01b031660601b8152505084600381518110620001db57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610120816001600160a01b031660601b81525050846004815181106200022257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316610140816001600160a01b031660601b81525050846005815181106200026957634e487b7160e01b600052603260045260246000fd5b602090810291909101015160601b6001600160601b03191660805260a084905260038054336001600160a01b0319909116179055845160019060049060009088906007908110620002ca57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550846008815181106200032b57634e487b7160e01b600052603260045260246000fd5b6020026020010151600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550846009815181106200037b57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600280546001600160a01b0319166001600160a01b039092169190911790558351620003ba91600d919086019062000539565b508151620003d090600e90602085019062000539565b508051620003e690600f90602084019062000539565b5062000421856006815181106200040d57634e487b7160e01b600052603260045260246000fd5b60200260200101516200042c60201b60201c565b50505050506200075b565b6000546001600160a01b03163314620004885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000dd565b6001600160a01b038116620004ef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000dd565b600080546040516001600160a01b038085169392169160008051602062003b7183398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b82805482825590600052602060002090810192821562000591579160200282015b828111156200059157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200055a565b506200059f929150620005a3565b5090565b5b808211156200059f5760008155600101620005a4565b80516001600160a01b0381168114620005d257600080fd5b919050565b600082601f830112620005e8578081fd5b815160206001600160401b038083111562000607576200060762000745565b8260051b604051601f19603f830116810181811084821117156200062f576200062f62000745565b604052848152838101925086840182880185018910156200064e578687fd5b8692505b858310156200067b576200066681620005ba565b84529284019260019290920191840162000652565b50979650505050505050565b600080600080600060a086880312156200069f578081fd5b85516001600160401b0380821115620006b6578283fd5b620006c489838a01620005d7565b9650602088015195506040880151915080821115620006e1578283fd5b620006ef89838a01620005d7565b9450606088015191508082111562000705578283fd5b6200071389838a01620005d7565b9350608088015191508082111562000729578283fd5b506200073888828901620005d7565b9150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160c05160601c60e05160601c6101005160601c6101205160601c6101405160601c61322162000950600039600081816106b50152818161209a0152818161219401528181612381015281816125390152818161258e015281816125e3015281816127c80152818161281e01528181612874015281816128ee01526129ab0152600081816105f40152818161091901528181610a0b01528181610a4001528181610ec0015281816110e601528181611244015281816112df01528181611f6901528181612068015281816121620152818161251701526127a60152600081816105cd01528181612138015281816122e6015281816123c9015281816125c1015261285201526000818161031f0152818161203e01528181612241015281816123a80152818161256c01526127fc01526000818161059301528181610874015281816109a2015281816109d701528181610d2d01528181610f2a015281816110ab01528181611a2801528181611ae601528181611d7a015281816124c2015261275001526000818161064a015281816106e601528181610bf30152818161197e01528181611e1e0152611ec10152600081816103f60152818161071501528181610c19015281816119ab01528181611e4b01528181611eee015281816124e4015261277201526132216000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80637c10eef21161019d578063aff66095116100e9578063ed0f4352116100a2578063f2fde38b1161007c578063f2fde38b1461066c578063f384a44c1461067f578063f3fef3a314610688578063f887ea40146106b0576102f1565b8063ed0f435214610629578063f0f4426014610632578063f106845414610645576102f1565b8063aff660951461057b578063c89039c51461058e578063cc917f4e146105b5578063d21220a7146105c8578063dce17484146105ef578063ec38a86214610616576102f1565b80638da5cb5b116101565780639ae0ddaf116101305780639ae0ddaf146105445780639ec5a8941461054d578063a4874d7714610560578063ab033ea914610568576102f1565b80638da5cb5b146105175780638fab591714610528578063952e6ee91461053b576102f1565b80637c10eef2146104b45780637f010784146104c75780638456cb59146104da578063871392c4146104e257806387788782146104eb57806387976583146104f4576102f1565b80634adae0da1161025c578063649677e111610215578063715018a6116101ef578063715018a61461048a5780637215313d14610492578063790f6e511461049b5780637a340488146104ab576102f1565b8063649677e11461045b57806367206d40146104645780636926d05c14610477576102f1565b80634adae0da146103e8578063575a86b2146103f15780635aa6e675146104185780635b5be8dd146102f65780635c975abb1461042b57806361d027b314610448576102f1565b80633e032a3b116102ae5780633e032a3b146103a95780633f4ba83a146103b257806344a3955e146103bc5780634641257d146103c55780634700d305146103cd57806347e7ef24146103d5576102f1565b806304448370146102f65780630cec11e4146103125780630dfe16811461031a57806313c50bea1461035957806319714fac146103685780633659cfe61461037b575b600080fd5b6102ff61271081565b6040519081526020015b60405180910390f35b6102ff6106d7565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610309565b6102ff670de0b6b3a764000081565b610341610376366004612f28565b61079c565b61038e610389366004612d92565b6107c6565b60408051938452602084019290925290820152606001610309565b6102ff600b5481565b6103ba610a75565b005b6102ff60065481565b6103ba610af4565b6103ba610b97565b6102ff6103e3366004612dac565b610c94565b6102ff60055481565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b600354610341906001600160a01b031681565b6010546104389060ff1681565b6040519015158152602001610309565b600254610341906001600160a01b031681565b6102ff60075481565b6103ba610472366004612dd5565b610dc7565b610341610485366004612f28565b610fab565b6103ba610fbb565b6102ff6103de81565b6102ff6801158e460913d0000081565b6102ff61032081565b6103ba6104c2366004612e10565b61102f565b6103416104d5366004612f28565b611121565b6103ba611131565b6102ff600c5481565b6102ff60085481565b610438610502366004612d92565b60046020526000908152604090205460ff1681565b6000546001600160a01b0316610341565b6103ba610536366004612d92565b611186565b6102ff60095481565b6102ff6126de81565b600154610341906001600160a01b031681565b6103ba6111fa565b6103ba610576366004612d92565b61130b565b6103ba610589366004612d92565b6113a5565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b6103ba6105c3366004612f85565b611416565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b6103ba610624366004612d92565b6116b3565b6102ff6103e881565b6103ba610640366004612d92565b611725565b6102ff7f000000000000000000000000000000000000000000000000000000000000000081565b6103ba61067a366004612d92565b611797565b6102ff600a5481565b61069b610696366004612dac565b611881565b60408051928352602083019190915201610309565b6103417f000000000000000000000000000000000000000000000000000000000000000081565b604051631175a1dd60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631175a1dd9060440160206040518083038186803b15801561075f57600080fd5b505afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107979190612f40565b905090565b600d81815481106107ac57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080336001600160a01b03166107e66000546001600160a01b031690565b6001600160a01b0316146108155760405162461bcd60e51b815260040161080c9061307e565b60405180910390fd5b6001600160a01b0384166108545760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b604482015260640161080c565b61085c611b16565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156108be57600080fd5b505afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190612f40565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561095b57600080fd5b505afa15801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109939190612f40565b90506109ca6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016876000611b3b565b6109fe6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168784611c92565b610a336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016876000611b3b565b610a676001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168783611c92565b600654969195509350915050565b6000546001600160a01b03163314610a9f5760405162461bcd60e51b815260040161080c9061307e565b60105460ff16610adb5760405162461bcd60e51b8152602060048201526007602482015266085c185d5cd95960ca1b604482015260640161080c565b6000600555610ae8611d53565b6010805460ff19169055565b6003546001600160a01b0316331480610b1c57503360009081526004602052604090205460ff165b610b685760405162461bcd60e51b815260206004820152601960248201527f21676f7665726e616e6365202626202168617276657374657200000000000000604482015260640161080c565b60105460ff1615610b8b5760405162461bcd60e51b815260040161080c906130d9565b610b956000611eb2565b565b6000546001600160a01b03163314610bc15760405162461bcd60e51b815260040161080c9061307e565b60105460ff1615610be45760405162461bcd60e51b815260040161080c906130d9565b604051632989754760e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635312ea8e90602401600060405180830381600087803b158015610c6557600080fd5b505af1158015610c79573d6000803e3d6000fd5b50505050610c856124b5565b6010805460ff19166001179055565b600080546001600160a01b03163314610cbf5760405162461bcd60e51b815260040161080c9061307e565b60105460ff1615610ce25760405162461bcd60e51b815260040161080c906130d9565b6001600160a01b038316610d205760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b604482015260640161080c565b610d556001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085612609565b600554829015801590610d6a57506000600654115b15610da75761271060055460075460065486610d869190613186565b610d909190613186565b610d9a9190613166565b610da49190613166565b90505b80600654610db5919061314e565b600655610dc0611d53565b9392505050565b6003546001600160a01b03163314610df15760405162461bcd60e51b815260040161080c90613059565b6001600160a01b038316610e3c5760405162461bcd60e51b81526020600482015260126024820152717a65726f20746f6b656e206164647265737360701b604482015260640161080c565b6001600160a01b038116610e845760405162461bcd60e51b815260206004820152600f60248201526e7a65726f20746f206164647265737360881b604482015260640161080c565b60008211610ebe5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161080c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610f285760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b604482015260640161080c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610f925760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b604482015260640161080c565b610fa66001600160a01b0384168284612641565b505050565b600e81815481106107ac57600080fd5b6000546001600160a01b03163314610fe55760405162461bcd60e51b815260040161080c9061307e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146110595760405162461bcd60e51b815260040161080c9061307e565b6001600160a01b0384166110985760405162461bcd60e51b8152602060048201526006602482015265085cdd1c985d60d21b604482015260640161080c565b81156110d3576110d36001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853085612609565b801561110e5761110e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853084612609565b600683905561111b611d53565b50505050565b600f81815481106107ac57600080fd5b6000546001600160a01b0316331461115b5760405162461bcd60e51b815260040161080c9061307e565b60105460ff161561117e5760405162461bcd60e51b815260040161080c906130d9565b610b95611b16565b6003546001600160a01b031633146111b05760405162461bcd60e51b815260040161080c90613059565b6001600160a01b0381166111d65760405162461bcd60e51b815260040161080c906130b3565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000546001600160a01b031633146112245760405162461bcd60e51b815260040161080c9061307e565b61122c611b16565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c69190612f40565b9050801561130857600254611308906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612641565b50565b6003546001600160a01b031633146113355760405162461bcd60e51b815260040161080c90613059565b6001600160a01b03811661135b5760405162461bcd60e51b815260040161080c906130b3565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f24a8c4807b324a269a51827c3446b8ac1cc13810d7d0c0ca1efafabddd7b621990600090a250565b6003546001600160a01b031633146113cf5760405162461bcd60e51b815260040161080c90613059565b6001600160a01b0381166113f55760405162461bcd60e51b815260040161080c906130b3565b6001600160a01b03166000908152600460205260409020805460ff19169055565b6003546001600160a01b031633146114405760405162461bcd60e51b815260040161080c90613059565b6126de8610156114835760405162461bcd60e51b815260206004820152600e60248201526d08595b9d1c985b98d9519959531360921b604482015260640161080c565b6127108611156114c75760405162461bcd60e51b815260206004820152600f60248201526e042cadce8e4c2dcc6ca8ccaca9ac2f608b1b604482015260640161080c565b60078690556103208511156115125760405162461bcd60e51b8152602060048201526011602482015270085c195c999bdc9b585b98d95199595553607a1b604482015260640161080c565b60088590556103e8611524848661314e565b1461155e5760405162461bcd60e51b815260206004820152600a60248201526910b332b2a330b1ba37b960b11b604482015260640161080c565b6009849055600a8390556103de8211156115a85760405162461bcd60e51b815260206004820152600b60248201526a085cdb1a5c1c1859d9555360aa1b604482015260640161080c565b600b8290556801158e460913d000008111156115ff5760405162461bcd60e51b8152602060048201526016602482015275085b5a5b91585c9b9959151bd4995a5b9d995cdd155360521b604482015260640161080c565b670de0b6b3a76400008110156116505760405162461bcd60e51b8152602060048201526016602482015275085b5a5b91585c9b9959151bd4995a5b9d995cdd131360521b604482015260640161080c565b600c8190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527fcb4ecc62ba7efb533c814d48b7dc1c8f06063d93bf32c3730c1ec47011e8747a9060c00160405180910390a1505050505050565b6003546001600160a01b031633146116dd5760405162461bcd60e51b815260040161080c90613059565b6001600160a01b0381166117035760405162461bcd60e51b815260040161080c906130b3565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461174f5760405162461bcd60e51b815260040161080c90613059565b6001600160a01b0381166117755760405162461bcd60e51b815260040161080c906130b3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146117c15760405162461bcd60e51b815260040161080c9061307e565b6001600160a01b0381166118265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161080c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000805481906001600160a01b031633146118ae5760405162461bcd60e51b815260040161080c9061307e565b6001600160a01b0384166118ec5760405162461bcd60e51b815260206004820152600560248201526410bab9b2b960d91b604482015260640161080c565b600083116119265760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161080c565b6000600554600654856119399190613186565b6119439190613166565b905060065481111561195457506006545b8060065461196291906131a5565b60065560105460ff16611a1057604051630441a3e760e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b1580156119f757600080fd5b505af1158015611a0b573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611a7257600080fd5b505afa158015611a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aaa9190612f40565b905080851115611ab8578094505b846005541015611ac85760055494505b84600554611ad691906131a5565b600555611b0d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163387612641565b50949293505050565b60105460ff16610b955760055415611b3357611b33600554611eb2565b610c856124b5565b801580611bc45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611b8a57600080fd5b505afa158015611b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc29190612f40565b155b611c2f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161080c565b6040516001600160a01b038316602482015260448101829052610fa690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612671565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d169190612f40565b611d20919061314e565b6040516001600160a01b03851660248201526044810182905290915061111b90859063095ea7b360e01b90606401611c5b565b600554611d6257611d62612743565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611dc457600080fd5b505afa158015611dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfc9190612f40565b905080600554611e0c919061314e565b600555604051631c57762b60e31b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e2bbb15890604401600060405180830381600087803b158015611e9757600080fd5b505af1158015611eab573d6000803e3d6000fd5b5050505050565b604051630441a3e760e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b158015611f3a57600080fd5b505af1158015611f4e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015611fb457600080fd5b505afa158015611fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fec9190612f40565b9050600c54811015611ffe5750611308565b6040518181527f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d589060200160405180910390a161203a8161289b565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612136576121367f00000000000000000000000000000000000000000000000000000000000000006120c4600284613166565b600b54600e80548060200260200160405190810160405280929190818152602001828054801561211d57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120ff575b50505050503042610258612131919061314e565b612a96565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612229576122297f00000000000000000000000000000000000000000000000000000000000000006121be600284613166565b600b54600f80548060200260200160405190810160405280929190818152602001828054801561211d576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116120ff5750505050503042610258612131919061314e565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561228b57600080fd5b505afa15801561229f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c39190612f40565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561232857600080fd5b505afa15801561233c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123609190612f40565b90506000821180156123725750600081115b156124ad576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e8e337007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008585600080306123fa4261025861314e565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b15801561247157600080fd5b505af1158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a99190612f58565b5050505b61111b611d53565b61250a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611b3b565b61255f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611b3b565b6125b46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611b3b565b610b956001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000006000611b3b565b6040516001600160a01b038085166024830152831660448201526064810182905261111b9085906323b872dd60e01b90608401611c5b565b6040516001600160a01b038316602482015260448101829052610fa690849063a9059cbb60e01b90606401611c5b565b60006126c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612c039092919063ffffffff16565b805190915015610fa657808060200190518101906126e49190612f08565b610fa65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161080c565b6127996001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611b3b565b6127ef6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611b3b565b6128456001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611b3b565b610b956001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000600019611b3b565b60008115612a8e5760085415612a8e576000612710600854846128be9190613186565b6128c89190613166565b905060006103e8600a54836128dd9190613186565b6128e79190613166565b90506129877f000000000000000000000000000000000000000000000000000000000000000082600b54600d80548060200260200160405190810160405280929190818152602001828054801561296757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612949575b50506002546001600160a01b03169250612131915042905061025861314e565b60006103e86009548461299a9190613186565b6129a49190613166565b9050612a447f000000000000000000000000000000000000000000000000000000000000000082600b54600d805480602002602001604051908101604052809291908181526020018280548015612a2457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612a06575b50506001546001600160a01b03169250612131915042905061025861314e565b612a4e83866131a5565b60408051838152602081018590529196507f916ad8171ef8c567c7790377a142f0200f9565940680c06e30dd105cfd924968910160405180910390a15050505b50805b919050565b60405163d06ca61f60e01b81526000906001600160a01b0388169063d06ca61f90612ac790899088906004016130f9565b60006040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b1b9190810190612e48565b905060008160018351612b2e91906131a5565b81518110612b4c57634e487b7160e01b600052603260045260246000fd5b60200260200101519050876001600160a01b03166338ed1739886103e88985612b759190613186565b612b7f9190613166565b8888886040518663ffffffff1660e01b8152600401612ba2959493929190613112565b600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612bf89190810190612e48565b505050505050505050565b6060612c128484600085612c1a565b949350505050565b606082471015612c7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161080c565b843b612cc95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161080c565b600080866001600160a01b03168587604051612ce5919061300a565b60006040518083038185875af1925050503d8060008114612d22576040519150601f19603f3d011682016040523d82523d6000602084013e612d27565b606091505b5091509150612d37828286612d42565b979650505050505050565b60608315612d51575081610dc0565b825115612d615782518084602001fd5b8160405162461bcd60e51b815260040161080c9190613026565b80356001600160a01b0381168114612a9157600080fd5b600060208284031215612da3578081fd5b610dc082612d7b565b60008060408385031215612dbe578081fd5b612dc783612d7b565b946020939093013593505050565b600080600060608486031215612de9578081fd5b612df284612d7b565b925060208401359150612e0760408501612d7b565b90509250925092565b60008060008060808587031215612e25578081fd5b612e2e85612d7b565b966020860135965060408601359560600135945092505050565b60006020808385031215612e5a578182fd5b825167ffffffffffffffff80821115612e71578384fd5b818501915085601f830112612e84578384fd5b815181811115612e9657612e966131fe565b8060051b604051601f19603f83011681018181108582111715612ebb57612ebb6131fe565b604052828152858101935084860182860187018a1015612ed9578788fd5b8795505b83861015612efb578051855260019590950194938601938601612edd565b5098975050505050505050565b600060208284031215612f19578081fd5b81518015158114610dc0578182fd5b600060208284031215612f39578081fd5b5035919050565b600060208284031215612f51578081fd5b5051919050565b600080600060608486031215612f6c578283fd5b8351925060208401519150604084015190509250925092565b60008060008060008060c08789031215612f9d578182fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000815180845260208085019450808401835b83811015612fff5781516001600160a01b031687529582019590820190600101612fda565b509495945050505050565b6000825161301c8184602087016131bc565b9190910192915050565b60006020825282518060208401526130458160408501602087016131bc565b601f01601f19169190910160400192915050565b6020808252600b908201526a21676f7665726e616e636560a81b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252600690820152651c185d5cd95960d21b604082015260600190565b600083825260406020830152612c126040830184612fc7565b600086825285602083015260a0604083015261313160a0830186612fc7565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115613161576131616131e8565b500190565b60008261318157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156131a0576131a06131e8565b500290565b6000828210156131b7576131b76131e8565b500390565b60005b838110156131d75781810151838201526020016131bf565b8381111561111b5750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000803000a8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addHarvester(address)": {
        "details": "Add a harvester address from Governance GNOSIS Safe."
      },
      "constructor": {
        "details": "Implementation of PancakeSwap LP autocompounding strategy."
      },
      "deposit(address,uint256)": {
        "details": "Function to transfer tokens BalleMaster -> strategy and put it to work."
      },
      "harvest()": {
        "details": "Function to harvest earnings and reinvest."
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "details": "Function to use from Governance GNOSIS Safe only in case tokens get stuck. EMERGENCY ONLY."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "panic()": {
        "details": "Stop the vault with emergencyWithdraw from farm."
      },
      "pause()": {
        "details": "Stop the vault."
      },
      "pendingCake()": {
        "details": "View function to see pending CAKEs on farm."
      },
      "removeHarvester(address)": {
        "details": "Remove a harvester address from Governance GNOSIS Safe."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "retire()": {
        "details": "Retire the vault."
      },
      "setGovernance(address)": {
        "details": "Function to change the governance address."
      },
      "setRewards(address)": {
        "details": "Function to change the rewards address."
      },
      "setSettings(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Function to change strategy settings."
      },
      "setTreasury(address)": {
        "details": "Function to change the treasury address."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Restart the vault."
      },
      "upgradeFrom(address,uint256,uint256,uint256)": {
        "details": "Complete upgrade from the old strategy."
      },
      "upgradeTo(address)": {
        "details": "Prepare to upgrade strategy to the new one indicated."
      },
      "withdraw(address,uint256)": {
        "details": "Function to transfer tokens strategy -> BalleMaster."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3979,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "rewards",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3981,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3983,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "governance",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3987,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "harvesters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3990,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "depositTotal",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3993,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "sharesTotal",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3996,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "entranceFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4005,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "performanceFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4014,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "rewardsFeeFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4017,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "treasuryFeeFactor",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4023,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "slippage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4029,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "minEarnedToReinvest",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4038,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "cakeToBallePath",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4041,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "cakeToToken0Path",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4044,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "cakeToToken1Path",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4047,
        "contract": "contracts/strategies/StratPancakeLpV1.sol:StratPancakeLpV1",
        "label": "paused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}