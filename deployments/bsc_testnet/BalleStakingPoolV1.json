{
  "address": "0x56060fAaa55343c14718bC5a63fCdb378Eb38678",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfBlocks",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfBlocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardStartBlock",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "inCaseTokensGetStuck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "security",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_security",
          "type": "address"
        }
      ],
      "name": "setSecurity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58d2e0f14f8a24c164bd69ad50f429b9882c92351b66acc08885c5c34ac3cdd0",
  "receipt": {
    "to": null,
    "from": "0xF662c2785A537F9cd75240544624f7C52d539355",
    "contractAddress": "0x56060fAaa55343c14718bC5a63fCdb378Eb38678",
    "transactionIndex": 1,
    "gasUsed": "1595693",
    "logsBloom": "0x
    "blockHash": "0xc86f63458a5c5042b566e0cca2eaec39d1506f57d8e1171c9bed73fefac3094d",
    "transactionHash": "0x58d2e0f14f8a24c164bd69ad50f429b9882c92351b66acc08885c5c34ac3cdd0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9016387,
        "transactionHash": "0x58d2e0f14f8a24c164bd69ad50f429b9882c92351b66acc08885c5c34ac3cdd0",
        "address": "0x56060fAaa55343c14718bC5a63fCdb378Eb38678",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f662c2785a537f9cd75240544624f7c52d539355"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xc86f63458a5c5042b566e0cca2eaec39d1506f57d8e1171c9bed73fefac3094d"
      }
    ],
    "blockNumber": 9016387,
    "cumulativeGasUsed": "8884951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b",
    "0x43fC744c34b211cD57c6f0d1ddB4EA8BC504541b",
    "0xe79D4c20F38C7264F1b6c813394c37d33dAc0e73"
  ],
  "solcInputHash": "360ef9858f9d13e2da8b2e0e5d9f9b58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfBlocks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardStartBlock\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"security\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_security\",\"type\":\"address\"}],\"name\":\"setSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the BALLE Staking Pool. This pool distributes platform performance fee. The owner of the contract is the Governance Gnosis Safe multisig.\",\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256,uint256,uint256)\":{\"details\":\"Add reward to distribute. The funds should be transferred to the Rewarder contract.\",\"params\":{\"_amount\":\": the reward amount to distribute.\",\"_multiplier\":\": extra reward multiplier (100 = 1).\",\"_numberOfBlocks\":\": the num of blocks for the period of distribution.\",\"_rewardStartBlock\":\": only for the first distribution, start block of rewards.\"}},\"balanceOf(address)\":{\"details\":\"View function to see total staked value on frontend.\",\"params\":{\"_user\":\": user address.\"},\"returns\":{\"_0\":\"Total staked for a given user.\"}},\"constructor\":{\"details\":\"BALLE Rewards staking pool.\",\"params\":{\"_rewardDistribution\":\": reward distribution contract address.\",\"_rewardToken\":\": reward token address.\",\"_stakedToken\":\": staked token address.\"}},\"emergencyWithdraw()\":{\"details\":\"Withdraw all staked tokens without caring about rewards. EMERGENCY ONLY.\"},\"finish()\":{\"details\":\"Finish pool.\"},\"inCaseTokensGetStuck(address,uint256,address)\":{\"details\":\"Function to use from Governance Gnosis Safe multisig only in case tokens get stuck. This is to be used if someone, for example, sends tokens to the contract by mistake. There is no guarantee governance will vote to return these.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(address)\":{\"details\":\"View function to see pending reward on frontend.\",\"params\":{\"_user\":\": user address.\"},\"returns\":{\"_0\":\"Pending reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardDistribution(address)\":{\"details\":\"Function to change the rewardDistribution address.\"},\"setRewarder(address)\":{\"details\":\"Function to change the rewarder address.\"},\"setSecurity(address)\":{\"details\":\"Function to change the Security Gnosis Safe multisig.\"},\"stake(uint256)\":{\"details\":\"Stake tokens to the pool and collect reward tokens (if any).\",\"params\":{\"_amount\":\": amount to stake (in stakedToken).\"}},\"stakeAll()\":{\"details\":\"Stake all stakedToken balance on user wallet to the pool and collect reward tokens (if any).\"},\"stopRewards()\":{\"details\":\"Stop rewards.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"Withdraw staked tokens and collect reward tokens (if any).\",\"params\":{\"_amount\":\": amount to withdraw (in stakedToken).\"}},\"withdrawAll()\":{\"details\":\"Withdraw all user's staked tokens and collect reward (if any).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/BalleStakingPoolV1.sol\":\"BalleStakingPoolV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/interfaces/IBalleRewarder.sol\":{\"content\":\"// contracts/interfaces/IBalleRewarder.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBalleRewarder {\\n    // Send reward to the user.\\n    function sendReward(\\n        address user,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x19b1e0ad3ce19f599f795310110f64ccacc52ebf40fb58ec30e7aaab4bc44f20\",\"license\":\"MIT\"},\"contracts/staking/BalleStakingPoolV1.sol\":{\"content\":\"// contracts/staking/BalleStakingPoolV1.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IBalleRewarder.sol\\\";\\n\\n/**\\n * @dev Implementation of the BALLE Staking Pool.\\n * This pool distributes platform performance fee.\\n * The owner of the contract is the Governance Gnosis Safe multisig.\\n */\\ncontract BalleStakingPoolV1 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user\\n    struct UserInfo {\\n        uint256 amount; // How many staked tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BALLEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt\\n        //\\n        // Whenever a user stakes or withdraws tokens to the pool. Here's what happens:\\n        //   1. The pool's `accTokenPerShare` and `lastRewardBlock` gets updated.\\n        //   2. User receives the pending reward sent to his address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // The staked token.\\n    address public immutable stakedToken;\\n    // The reward token.\\n    address public immutable rewardToken;\\n    // The rewarder contract.\\n    address public rewarder;\\n    // The reward distribution contract.\\n    address public rewardDistribution;\\n    // Security Gnosis Safe multisig.\\n    address public security;\\n    // Accrued token per share.\\n    uint256 public accTokenPerShare;\\n    // The block number when rewards start.\\n    uint256 public rewardStartBlock;\\n    // The block number when rewards end.\\n    uint256 public rewardEndBlock;\\n    // The block number of the last pool update.\\n    uint256 public lastRewardBlock;\\n    // Reward tokens per block.\\n    uint256 public rewardPerBlock;\\n    // The extra reward multiplier applied over the amount from fees (100 = 1).\\n    uint256 public extraRewardMultiplier;\\n    // Total staked tokens amount.\\n    uint256 private totalSupply;\\n\\n    // Info of each user that stakes tokens (stakedToken).\\n    mapping(address => UserInfo) public userInfo;\\n\\n    // The pool is finished, no staking can be made and no more rewards will be distributed.\\n    bool public finished;\\n\\n    event Deposit(address indexed user, uint256 amount, uint256 reward);\\n    event Withdraw(address indexed user, uint256 amount, uint256 reward);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event RewardAdded(uint256 amount, uint256 numberOfBlocks, uint256 multiplier);\\n    event RewardsStop();\\n    event PoolFinish();\\n\\n    /**\\n     * @dev BALLE Rewards staking pool.\\n     * @param _stakedToken: staked token address.\\n     * @param _rewardToken: reward token address.\\n     * @param _rewardDistribution: reward distribution contract address.\\n     */\\n    constructor(\\n        address _stakedToken,\\n        address _rewardToken,\\n        address _rewardDistribution\\n    ) {\\n        require(_stakedToken != address(0), \\\"!stakedToken\\\");\\n        require(_rewardToken != address(0), \\\"!rewardToken\\\");\\n        require(_rewardDistribution != address(0), \\\"!rewardDistribution\\\");\\n\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        rewardDistribution = _rewardDistribution;\\n    }\\n\\n    /**\\n     * @dev Function to change the rewarder address.\\n     */\\n    function setRewarder(address _rewarder) external onlyOwner {\\n        require(_rewarder != address(0), \\\"zero address\\\");\\n        rewarder = _rewarder;\\n    }\\n\\n    /**\\n     * @dev Function to change the rewardDistribution address.\\n     */\\n    function setRewardDistribution(address _rewardDistribution) external onlyOwner {\\n        require(_rewardDistribution != address(0), \\\"zero address\\\");\\n        rewardDistribution = _rewardDistribution;\\n    }\\n\\n    /**\\n     * @dev Function to change the Security Gnosis Safe multisig.\\n     */\\n    function setSecurity(address _security) external onlyOwner {\\n        require(_security != address(0), \\\"zero address\\\");\\n        security = _security;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance Gnosis Safe multisig address or the rewardDistribution.\\n     */\\n    modifier onlyRewardDistribution() {\\n        require(msg.sender == rewardDistribution || msg.sender == owner(), \\\"!rewardDistribution\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check the caller is the Governance or Security Gnosis Safe multisig.\\n     */\\n    modifier onlySecurity() {\\n        require(msg.sender == owner() || msg.sender == security, \\\"!security\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Internal stake function.\\n     * @param _amount: amount to stake (in stakedToken).\\n     */\\n    function _stake(uint256 _amount) internal {\\n        require(_amount > 0, \\\"!amount\\\");\\n        require(rewarder != address(0), \\\"!rewarder\\\");\\n        require(!finished, \\\"finished\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        updatePool();\\n\\n        uint256 pending = 0;\\n        if (user.amount > 0) {\\n            pending = (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt;\\n            if (pending > 0) {\\n                IBalleRewarder(rewarder).sendReward(address(msg.sender), rewardToken, pending);\\n            }\\n        }\\n\\n        user.amount = user.amount + _amount;\\n        totalSupply = totalSupply + _amount;\\n        IERC20(stakedToken).safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        user.rewardDebt = (user.amount * accTokenPerShare) / 1e12;\\n\\n        emit Deposit(msg.sender, _amount, pending);\\n    }\\n\\n    /**\\n     * @dev Stake tokens to the pool and collect reward tokens (if any).\\n     * @param _amount: amount to stake (in stakedToken).\\n     */\\n    function stake(uint256 _amount) external nonReentrant {\\n        _stake(_amount);\\n    }\\n\\n    /**\\n     * @dev Stake all stakedToken balance on user wallet to the pool and collect reward tokens (if any).\\n     */\\n    function stakeAll() external nonReentrant {\\n        _stake(IERC20(stakedToken).balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Internal withdraw\\n     * @param _amount: amount to withdraw (in stakedToken).\\n     */\\n    function _withdraw(uint256 _amount) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        if (_amount > user.amount) {\\n            _amount = user.amount;\\n        }\\n\\n        updatePool();\\n\\n        uint256 pending = (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt;\\n\\n        if (_amount > 0) {\\n            // Take care of rounding issues.\\n            uint256 bal = IERC20(stakedToken).balanceOf(address(this));\\n            if (bal < _amount) {\\n                _amount = bal;\\n                user.amount = 0;\\n                totalSupply = 0;\\n            } else {\\n                user.amount = user.amount - _amount;\\n                totalSupply = totalSupply - _amount;\\n            }\\n            IERC20(stakedToken).safeTransfer(address(msg.sender), _amount);\\n        }\\n\\n        if (pending > 0) {\\n            IBalleRewarder(rewarder).sendReward(address(msg.sender), rewardToken, pending);\\n        }\\n\\n        user.rewardDebt = (user.amount * accTokenPerShare) / 1e12;\\n\\n        emit Withdraw(msg.sender, _amount, pending);\\n    }\\n\\n    /**\\n     * @dev Withdraw staked tokens and collect reward tokens (if any).\\n     * @param _amount: amount to withdraw (in stakedToken).\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw all user's staked tokens and collect reward (if any).\\n     */\\n    function withdrawAll() external nonReentrant {\\n        _withdraw(type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Withdraw all staked tokens without caring about rewards. EMERGENCY ONLY.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        if (amountToTransfer > 0) {\\n            // Take care of rounding issues.\\n            uint256 bal = IERC20(stakedToken).balanceOf(address(this));\\n            if (bal < amountToTransfer) {\\n                amountToTransfer = bal;\\n            }\\n            IERC20(stakedToken).safeTransfer(address(msg.sender), amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, user.amount);\\n    }\\n\\n    /**\\n     * @dev View function to see total staked value on frontend.\\n     * @param _user: user address.\\n     * @return Total staked for a given user.\\n     */\\n    function balanceOf(address _user) external view returns (uint256) {\\n        return userInfo[_user].amount;\\n    }\\n\\n    /**\\n     * @dev View function to see pending reward on frontend.\\n     * @param _user: user address.\\n     * @return Pending reward for a given user.\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (block.number > lastRewardBlock && totalSupply != 0) {\\n            uint256 multiplier = getBlockMultiplier(lastRewardBlock, block.number);\\n            uint256 reward = multiplier * rewardPerBlock;\\n            uint256 adjustedTokenPerShare = accTokenPerShare + (reward * 1e12) / totalSupply;\\n            return (user.amount * adjustedTokenPerShare) / 1e12 - user.rewardDebt;\\n        } else {\\n            return (user.amount * accTokenPerShare) / 1e12 - user.rewardDebt;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update reward variables of the given pool to be up-to-date.\\n     */\\n    function updatePool() internal {\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n\\n        totalSupply = IERC20(stakedToken).balanceOf(address(this));\\n\\n        if (totalSupply == 0) {\\n            lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getBlockMultiplier(lastRewardBlock, block.number);\\n        uint256 reward = multiplier * rewardPerBlock;\\n        accTokenPerShare = accTokenPerShare + (reward * 1e12) / totalSupply;\\n        lastRewardBlock = block.number;\\n    }\\n\\n    /**\\n     * @dev Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start.\\n     * @param _to: block to finish.\\n     */\\n    function getBlockMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\n        if (_from <= rewardStartBlock) {\\n            if (_to > rewardStartBlock) {\\n                _from = rewardStartBlock;\\n            } else {\\n                _from = _to;\\n            }\\n        }\\n        if (_to <= rewardEndBlock) {\\n            return _to - _from;\\n        } else if (_from >= rewardEndBlock) {\\n            return 0;\\n        } else {\\n            return rewardEndBlock - _from;\\n        }\\n    }\\n\\n    /**\\n     * @dev Add reward to distribute.\\n     * The funds should be transferred to the Rewarder contract.\\n     * @param _amount: the reward amount to distribute.\\n     * @param _numberOfBlocks: the num of blocks for the period of distribution.\\n     * @param _multiplier: extra reward multiplier (100 = 1).\\n     * @param _rewardStartBlock: only for the first distribution, start block of rewards.\\n     */\\n    function addReward(\\n        uint256 _amount,\\n        uint256 _numberOfBlocks,\\n        uint256 _multiplier,\\n        uint256 _rewardStartBlock\\n    ) external onlyRewardDistribution {\\n        require(_amount > 0, \\\"!amount\\\");\\n        require(_numberOfBlocks >= (24 * 60 * 20), \\\"!numberOfBlocks\\\");\\n        require(_multiplier >= 100, \\\"!multiplier\\\");\\n        require(!finished, \\\"finished\\\");\\n\\n        updatePool();\\n\\n        if (block.number >= rewardEndBlock) {\\n            // Previous reward period already finished.\\n            rewardPerBlock = _amount / _numberOfBlocks;\\n            if (rewardStartBlock == 0) {\\n                if (_rewardStartBlock == 0) {\\n                    rewardStartBlock = block.number;\\n                } else {\\n                    rewardStartBlock = _rewardStartBlock;\\n                }\\n            }\\n        } else {\\n            // Previous reward period still not finished, add leftover.\\n            uint256 remaining = rewardEndBlock - block.number;\\n            uint256 leftover = remaining * rewardPerBlock;\\n            rewardPerBlock = (_amount + leftover) / _numberOfBlocks;\\n        }\\n        rewardEndBlock = block.number + _numberOfBlocks;\\n        extraRewardMultiplier = _multiplier;\\n\\n        emit RewardAdded(_amount, _numberOfBlocks, _multiplier);\\n    }\\n\\n    /**\\n     * @dev Stop rewards.\\n     */\\n    function stopRewards() external onlySecurity {\\n        rewardEndBlock = block.number;\\n\\n        emit RewardsStop();\\n    }\\n\\n    /**\\n     * @dev Finish pool.\\n     */\\n    function finish() external onlySecurity {\\n        require(!finished, \\\"finished\\\");\\n\\n        if (rewardEndBlock > block.number) {\\n            rewardEndBlock = block.number;\\n        }\\n        finished = true;\\n\\n        emit PoolFinish();\\n    }\\n\\n    /**\\n     * @dev Function to use from Governance Gnosis Safe multisig only in case tokens get stuck.\\n     * This is to be used if someone, for example, sends tokens to the contract by mistake.\\n     * There is no guarantee governance will vote to return these.\\n     */\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public onlyOwner {\\n        require(_to != address(0), \\\"zero address\\\");\\n        require(_token != stakedToken, \\\"!safe\\\");\\n\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x14397f6df52ced93d85fa3e7ab532e3eb8862d378bc9c1aec45c9af678b18e35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001d1d38038062001d1d8339810160408190526200003491620001c1565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160a01b038316620000c45760405162461bcd60e51b815260206004820152600c60248201526b10b9ba30b5b2b22a37b5b2b760a11b60448201526064015b60405180910390fd5b6001600160a01b0382166200010b5760405162461bcd60e51b815260206004820152600c60248201526b10b932bbb0b9322a37b5b2b760a11b6044820152606401620000bb565b6001600160a01b038116620001635760405162461bcd60e51b815260206004820152601360248201527f21726577617264446973747269627574696f6e000000000000000000000000006044820152606401620000bb565b606092831b6001600160601b03199081166080529190921b1660a052600380546001600160a01b0319166001600160a01b039092169190911790556200020a565b80516001600160a01b0381168114620001bc57600080fd5b919050565b600080600060608486031215620001d6578283fd5b620001e184620001a4565b9250620001f160208501620001a4565b91506200020160408501620001a4565b90509250925092565b60805160601c60a05160601c611aa16200027c600039600081816103f60152818161119d01526113ea0152600081816103860152818161082501528181610a3d01528181610c1e01528181610cbb01528181610f20015281816110840152818161114e01526114840152611aa16000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063cc7a262e116100a2578063f2fde38b11610071578063f2fde38b146103cb578063f40f0f52146103de578063f7c618c1146103f1578063f88073dc14610418576101da565b8063cc7a262e14610381578063d56b2889146103a8578063db2e21bc146103b0578063dcc3e06e146103b8576101da565b8063a694fc3a116100de578063a694fc3a1461033f578063a9f8d18114610352578063b2d2900f1461035b578063bef4876b14610364576101da565b80638da5cb5b1461031d5780638dcb40611461032e5780638f66291514610336576101da565b8063548799181161017c578063715018a61161014b578063715018a6146102fc578063797008c614610304578063853828b61461030c5780638ae39cac14610314576101da565b806354879918146102ac578063604ef2e5146102bf57806367206d40146102d657806370a08231146102e9576101da565b806329206a70116101b857806329206a70146102605780632e1a7d4d146102735780633a6462e4146102865780635222805414610299576101da565b80630d68b761146101df578063101114cf146101f45780631959a00214610224575b600080fd5b6101f26101ed36600461180b565b610421565b005b600354610207906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024b61023236600461180b565b600c602052600090815260409020805460019091015482565b6040805192835260208301919091520161021b565b6101f261026e3660046118b0565b61049c565b6101f2610281366004611880565b6106b7565b6101f261029436600461180b565b6106ef565b6101f26102a736600461180b565b610761565b600454610207906001600160a01b031681565b6102c860075481565b60405190815260200161021b565b6101f26102e4366004611825565b6107d3565b6102c86102f736600461180b565b6108a6565b6101f26108c5565b6101f2610939565b6101f26109c3565b6102c860095481565b6000546001600160a01b0316610207565b6101f26109fc565b6102c860055481565b6101f261034d366004611880565b610ac4565b6102c860085481565b6102c860065481565b600d546103719060ff1681565b604051901515815260200161021b565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610af5565b6101f2610bba565b600254610207906001600160a01b031681565b6101f26103d936600461180b565b610d23565b6102c86103ec36600461180b565b610e0d565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6102c8600a5481565b6000546001600160a01b031633146104545760405162461bcd60e51b815260040161044b90611952565b60405180910390fd5b6001600160a01b03811661047a5760405162461bcd60e51b815260040161044b90611987565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314806104bf57506000546001600160a01b031633145b6105015760405162461bcd60e51b815260206004820152601360248201527210b932bbb0b9322234b9ba3934b13aba34b7b760691b604482015260640161044b565b6000841161053b5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161044b565b61708083101561057f5760405162461bcd60e51b815260206004820152600f60248201526e216e756d6265724f66426c6f636b7360881b604482015260640161044b565b60648210156105be5760405162461bcd60e51b815260206004820152600b60248201526a10b6bab63a34b83634b2b960a91b604482015260640161044b565b600d5460ff16156105e15760405162461bcd60e51b815260040161044b90611930565b6105e9610efd565b600754431061061f576105fc83856119fc565b60095560065461061a5780610614574360065561061a565b60068190555b61065e565b60004360075461062f9190611a3b565b90506000600954826106419190611a1c565b90508461064e82886119e4565b61065891906119fc565b60095550505b61066883436119e4565b600755600a82905560408051858152602081018590529081018390527f9795f222c951ae3e749f872dbe287f78d21fa52353e9175cb20ed3aa2b29b82b9060600160405180910390a150505050565b600260015414156106da5760405162461bcd60e51b815260040161044b906119ad565b60026001556106e88161100c565b5060018055565b6000546001600160a01b031633146107195760405162461bcd60e51b815260040161044b90611952565b6001600160a01b03811661073f5760405162461bcd60e51b815260040161044b90611987565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461078b5760405162461bcd60e51b815260040161044b90611952565b6001600160a01b0381166107b15760405162461bcd60e51b815260040161044b90611987565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107fd5760405162461bcd60e51b815260040161044b90611952565b6001600160a01b0381166108235760405162461bcd60e51b815260040161044b90611987565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561088d5760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b604482015260640161044b565b6108a16001600160a01b038416828461126f565b505050565b6001600160a01b0381166000908152600c60205260409020545b919050565b6000546001600160a01b031633146108ef5760405162461bcd60e51b815260040161044b90611952565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633148061095c57506004546001600160a01b031633145b6109945760405162461bcd60e51b815260206004820152600960248201526821736563757269747960b81b604482015260640161044b565b436007556040517f94058b34623ce4d33b7914fefdcc85339cc163f259f46483cb96645c0a140da090600090a1565b600260015414156109e65760405162461bcd60e51b815260040161044b906119ad565b60026001556109f660001961100c565b60018055565b60026001541415610a1f5760405162461bcd60e51b815260040161044b906119ad565b60026001556040516370a0823160e01b81523360048201526109f6907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abf9190611898565b6112d2565b60026001541415610ae75760405162461bcd60e51b815260040161044b906119ad565b60026001556106e8816112d2565b6000546001600160a01b0316331480610b1857506004546001600160a01b031633145b610b505760405162461bcd60e51b815260206004820152600960248201526821736563757269747960b81b604482015260640161044b565b600d5460ff1615610b735760405162461bcd60e51b815260040161044b90611930565b436007541115610b8257436007555b600d805460ff191660011790556040517f884913bf02e252a8fd422bf8f82d3bcc112060d513a34ff41bd395ff82c03d5590600090a1565b60026001541415610bdd5760405162461bcd60e51b815260040161044b906119ad565b60026001908155336000908152600c60205260408120805482825592810191909155908015610ce4576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c6857600080fd5b505afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611898565b905081811015610cae578091505b610ce26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338461126f565b505b815460405190815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a2505060018055565b6000546001600160a01b03163314610d4d5760405162461bcd60e51b815260040161044b90611952565b6001600160a01b038116610db25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600c6020526040812060085443118015610e375750600b5415155b15610ec7576000610e4a60085443611508565b9050600060095482610e5c9190611a1c565b90506000600b548264e8d4a51000610e749190611a1c565b610e7e91906119fc565b600554610e8b91906119e4565b9050836001015464e8d4a51000828660000154610ea89190611a1c565b610eb291906119fc565b610ebc9190611a3b565b9450505050506108c0565b6001810154600554825464e8d4a5100091610ee191611a1c565b610eeb91906119fc565b610ef59190611a3b565b9150506108c0565b6008544311610f0b5761100a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610f6a57600080fd5b505afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190611898565b600b819055610fb4574360085561100a565b6000610fc260085443611508565b9050600060095482610fd49190611a1c565b600b54909150610fe98264e8d4a51000611a1c565b610ff391906119fc565b60055461100091906119e4565b6005555050436008555b565b336000908152600c60205260409020805482111561102957805491505b611031610efd565b6000816001015464e8d4a5100060055484600001546110509190611a1c565b61105a91906119fc565b6110649190611a3b565b90508215611177576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190611898565b905083811015611120576000808455600b55925082611141565b825461112d908590611a3b565b8355600b5461113d908590611a3b565b600b555b6111756001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338661126f565b505b801561120a5760025460405163358d7baf60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905290911690636b1af75e90606401600060405180830381600087803b1580156111f157600080fd5b505af1158015611205573d6000803e3d6000fd5b505050505b600554825464e8d4a510009161121f91611a1c565b61122991906119fc565b6001830155604080518481526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56891015b60405180910390a2505050565b6040516001600160a01b0383166024820152604481018290526108a190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261156a565b6000811161130c5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161044b565b6002546001600160a01b03166113505760405162461bcd60e51b815260206004820152600960248201526810b932bbb0b93232b960b91b604482015260640161044b565b600d5460ff16156113735760405162461bcd60e51b815260040161044b90611930565b336000908152600c6020526040902061138a610efd565b805460009015611457576001820154600554835464e8d4a51000916113ae91611a1c565b6113b891906119fc565b6113c29190611a3b565b905080156114575760025460405163358d7baf60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905290911690636b1af75e90606401600060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050505b81546114649084906119e4565b8255600b546114749084906119e4565b600b556114ac6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661163c565b600554825464e8d4a51000916114c191611a1c565b6114cb91906119fc565b6001830155604080518481526020810183905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101611262565b6000600654831161152b5760065482111561152757600654925061152b565b8192505b60075482116115455761153e8383611a3b565b9050611564565b600754831061155657506000611564565b8260075461153e9190611a3b565b92915050565b60006115bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661167a9092919063ffffffff16565b8051909150156108a157808060200190518101906115dd9190611860565b6108a15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161044b565b6040516001600160a01b03808516602483015283166044820152606481018290526116749085906323b872dd60e01b9060840161129b565b50505050565b60606116898484600085611693565b90505b9392505050565b6060824710156116f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161044b565b843b6117425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161044b565b600080866001600160a01b0316858760405161175e91906118e1565b60006040518083038185875af1925050503d806000811461179b576040519150601f19603f3d011682016040523d82523d6000602084013e6117a0565b606091505b50915091506117b08282866117bb565b979650505050505050565b606083156117ca57508161168c565b8251156117da5782518084602001fd5b8160405162461bcd60e51b815260040161044b91906118fd565b80356001600160a01b03811681146108c057600080fd5b60006020828403121561181c578081fd5b61168c826117f4565b600080600060608486031215611839578182fd5b611842846117f4565b925060208401359150611857604085016117f4565b90509250925092565b600060208284031215611871578081fd5b8151801515811461168c578182fd5b600060208284031215611891578081fd5b5035919050565b6000602082840312156118a9578081fd5b5051919050565b600080600080608085870312156118c5578081fd5b5050823594602084013594506040840135936060013592509050565b600082516118f3818460208701611a52565b9190910192915050565b600060208252825180602084015261191c816040850160208701611a52565b601f01601f19169190910160400192915050565b602080825260089082015267199a5b9a5cda195960c21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156119f7576119f7611a7e565b500190565b600082611a1757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a3657611a36611a7e565b500290565b600082821015611a4d57611a4d611a7e565b500390565b60005b83811015611a6d578181015183820152602001611a55565b838111156116745750506000910152565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000803000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638da5cb5b11610104578063cc7a262e116100a2578063f2fde38b11610071578063f2fde38b146103cb578063f40f0f52146103de578063f7c618c1146103f1578063f88073dc14610418576101da565b8063cc7a262e14610381578063d56b2889146103a8578063db2e21bc146103b0578063dcc3e06e146103b8576101da565b8063a694fc3a116100de578063a694fc3a1461033f578063a9f8d18114610352578063b2d2900f1461035b578063bef4876b14610364576101da565b80638da5cb5b1461031d5780638dcb40611461032e5780638f66291514610336576101da565b8063548799181161017c578063715018a61161014b578063715018a6146102fc578063797008c614610304578063853828b61461030c5780638ae39cac14610314576101da565b806354879918146102ac578063604ef2e5146102bf57806367206d40146102d657806370a08231146102e9576101da565b806329206a70116101b857806329206a70146102605780632e1a7d4d146102735780633a6462e4146102865780635222805414610299576101da565b80630d68b761146101df578063101114cf146101f45780631959a00214610224575b600080fd5b6101f26101ed36600461180b565b610421565b005b600354610207906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024b61023236600461180b565b600c602052600090815260409020805460019091015482565b6040805192835260208301919091520161021b565b6101f261026e3660046118b0565b61049c565b6101f2610281366004611880565b6106b7565b6101f261029436600461180b565b6106ef565b6101f26102a736600461180b565b610761565b600454610207906001600160a01b031681565b6102c860075481565b60405190815260200161021b565b6101f26102e4366004611825565b6107d3565b6102c86102f736600461180b565b6108a6565b6101f26108c5565b6101f2610939565b6101f26109c3565b6102c860095481565b6000546001600160a01b0316610207565b6101f26109fc565b6102c860055481565b6101f261034d366004611880565b610ac4565b6102c860085481565b6102c860065481565b600d546103719060ff1681565b604051901515815260200161021b565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6101f2610af5565b6101f2610bba565b600254610207906001600160a01b031681565b6101f26103d936600461180b565b610d23565b6102c86103ec36600461180b565b610e0d565b6102077f000000000000000000000000000000000000000000000000000000000000000081565b6102c8600a5481565b6000546001600160a01b031633146104545760405162461bcd60e51b815260040161044b90611952565b60405180910390fd5b6001600160a01b03811661047a5760405162461bcd60e51b815260040161044b90611987565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314806104bf57506000546001600160a01b031633145b6105015760405162461bcd60e51b815260206004820152601360248201527210b932bbb0b9322234b9ba3934b13aba34b7b760691b604482015260640161044b565b6000841161053b5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161044b565b61708083101561057f5760405162461bcd60e51b815260206004820152600f60248201526e216e756d6265724f66426c6f636b7360881b604482015260640161044b565b60648210156105be5760405162461bcd60e51b815260206004820152600b60248201526a10b6bab63a34b83634b2b960a91b604482015260640161044b565b600d5460ff16156105e15760405162461bcd60e51b815260040161044b90611930565b6105e9610efd565b600754431061061f576105fc83856119fc565b60095560065461061a5780610614574360065561061a565b60068190555b61065e565b60004360075461062f9190611a3b565b90506000600954826106419190611a1c565b90508461064e82886119e4565b61065891906119fc565b60095550505b61066883436119e4565b600755600a82905560408051858152602081018590529081018390527f9795f222c951ae3e749f872dbe287f78d21fa52353e9175cb20ed3aa2b29b82b9060600160405180910390a150505050565b600260015414156106da5760405162461bcd60e51b815260040161044b906119ad565b60026001556106e88161100c565b5060018055565b6000546001600160a01b031633146107195760405162461bcd60e51b815260040161044b90611952565b6001600160a01b03811661073f5760405162461bcd60e51b815260040161044b90611987565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461078b5760405162461bcd60e51b815260040161044b90611952565b6001600160a01b0381166107b15760405162461bcd60e51b815260040161044b90611987565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107fd5760405162461bcd60e51b815260040161044b90611952565b6001600160a01b0381166108235760405162461bcd60e51b815260040161044b90611987565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561088d5760405162461bcd60e51b8152602060048201526005602482015264217361666560d81b604482015260640161044b565b6108a16001600160a01b038416828461126f565b505050565b6001600160a01b0381166000908152600c60205260409020545b919050565b6000546001600160a01b031633146108ef5760405162461bcd60e51b815260040161044b90611952565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633148061095c57506004546001600160a01b031633145b6109945760405162461bcd60e51b815260206004820152600960248201526821736563757269747960b81b604482015260640161044b565b436007556040517f94058b34623ce4d33b7914fefdcc85339cc163f259f46483cb96645c0a140da090600090a1565b600260015414156109e65760405162461bcd60e51b815260040161044b906119ad565b60026001556109f660001961100c565b60018055565b60026001541415610a1f5760405162461bcd60e51b815260040161044b906119ad565b60026001556040516370a0823160e01b81523360048201526109f6907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a8757600080fd5b505afa158015610a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abf9190611898565b6112d2565b60026001541415610ae75760405162461bcd60e51b815260040161044b906119ad565b60026001556106e8816112d2565b6000546001600160a01b0316331480610b1857506004546001600160a01b031633145b610b505760405162461bcd60e51b815260206004820152600960248201526821736563757269747960b81b604482015260640161044b565b600d5460ff1615610b735760405162461bcd60e51b815260040161044b90611930565b436007541115610b8257436007555b600d805460ff191660011790556040517f884913bf02e252a8fd422bf8f82d3bcc112060d513a34ff41bd395ff82c03d5590600090a1565b60026001541415610bdd5760405162461bcd60e51b815260040161044b906119ad565b60026001908155336000908152600c60205260408120805482825592810191909155908015610ce4576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c6857600080fd5b505afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611898565b905081811015610cae578091505b610ce26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338461126f565b505b815460405190815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd96959060200160405180910390a2505060018055565b6000546001600160a01b03163314610d4d5760405162461bcd60e51b815260040161044b90611952565b6001600160a01b038116610db25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600c6020526040812060085443118015610e375750600b5415155b15610ec7576000610e4a60085443611508565b9050600060095482610e5c9190611a1c565b90506000600b548264e8d4a51000610e749190611a1c565b610e7e91906119fc565b600554610e8b91906119e4565b9050836001015464e8d4a51000828660000154610ea89190611a1c565b610eb291906119fc565b610ebc9190611a3b565b9450505050506108c0565b6001810154600554825464e8d4a5100091610ee191611a1c565b610eeb91906119fc565b610ef59190611a3b565b9150506108c0565b6008544311610f0b5761100a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610f6a57600080fd5b505afa158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa29190611898565b600b819055610fb4574360085561100a565b6000610fc260085443611508565b9050600060095482610fd49190611a1c565b600b54909150610fe98264e8d4a51000611a1c565b610ff391906119fc565b60055461100091906119e4565b6005555050436008555b565b336000908152600c60205260409020805482111561102957805491505b611031610efd565b6000816001015464e8d4a5100060055484600001546110509190611a1c565b61105a91906119fc565b6110649190611a3b565b90508215611177576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190611898565b905083811015611120576000808455600b55925082611141565b825461112d908590611a3b565b8355600b5461113d908590611a3b565b600b555b6111756001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338661126f565b505b801561120a5760025460405163358d7baf60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905290911690636b1af75e90606401600060405180830381600087803b1580156111f157600080fd5b505af1158015611205573d6000803e3d6000fd5b505050505b600554825464e8d4a510009161121f91611a1c565b61122991906119fc565b6001830155604080518481526020810183905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56891015b60405180910390a2505050565b6040516001600160a01b0383166024820152604481018290526108a190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261156a565b6000811161130c5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161044b565b6002546001600160a01b03166113505760405162461bcd60e51b815260206004820152600960248201526810b932bbb0b93232b960b91b604482015260640161044b565b600d5460ff16156113735760405162461bcd60e51b815260040161044b90611930565b336000908152600c6020526040902061138a610efd565b805460009015611457576001820154600554835464e8d4a51000916113ae91611a1c565b6113b891906119fc565b6113c29190611a3b565b905080156114575760025460405163358d7baf60e11b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905290911690636b1af75e90606401600060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050505b81546114649084906119e4565b8255600b546114749084906119e4565b600b556114ac6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661163c565b600554825464e8d4a51000916114c191611a1c565b6114cb91906119fc565b6001830155604080518481526020810183905233917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159101611262565b6000600654831161152b5760065482111561152757600654925061152b565b8192505b60075482116115455761153e8383611a3b565b9050611564565b600754831061155657506000611564565b8260075461153e9190611a3b565b92915050565b60006115bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661167a9092919063ffffffff16565b8051909150156108a157808060200190518101906115dd9190611860565b6108a15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161044b565b6040516001600160a01b03808516602483015283166044820152606481018290526116749085906323b872dd60e01b9060840161129b565b50505050565b60606116898484600085611693565b90505b9392505050565b6060824710156116f45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161044b565b843b6117425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161044b565b600080866001600160a01b0316858760405161175e91906118e1565b60006040518083038185875af1925050503d806000811461179b576040519150601f19603f3d011682016040523d82523d6000602084013e6117a0565b606091505b50915091506117b08282866117bb565b979650505050505050565b606083156117ca57508161168c565b8251156117da5782518084602001fd5b8160405162461bcd60e51b815260040161044b91906118fd565b80356001600160a01b03811681146108c057600080fd5b60006020828403121561181c578081fd5b61168c826117f4565b600080600060608486031215611839578182fd5b611842846117f4565b925060208401359150611857604085016117f4565b90509250925092565b600060208284031215611871578081fd5b8151801515811461168c578182fd5b600060208284031215611891578081fd5b5035919050565b6000602082840312156118a9578081fd5b5051919050565b600080600080608085870312156118c5578081fd5b5050823594602084013594506040840135936060013592509050565b600082516118f3818460208701611a52565b9190910192915050565b600060208252825180602084015261191c816040850160208701611a52565b601f01601f19169190910160400192915050565b602080825260089082015267199a5b9a5cda195960c21b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156119f7576119f7611a7e565b500190565b600082611a1757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611a3657611a36611a7e565b500290565b600082821015611a4d57611a4d611a7e565b500390565b60005b83811015611a6d578181015183820152602001611a55565b838111156116745750506000910152565b634e487b7160e01b600052601160045260246000fdfea164736f6c6343000803000a",
  "devdoc": {
    "details": "Implementation of the BALLE Staking Pool. This pool distributes platform performance fee. The owner of the contract is the Governance Gnosis Safe multisig.",
    "kind": "dev",
    "methods": {
      "addReward(uint256,uint256,uint256,uint256)": {
        "details": "Add reward to distribute. The funds should be transferred to the Rewarder contract.",
        "params": {
          "_amount": ": the reward amount to distribute.",
          "_multiplier": ": extra reward multiplier (100 = 1).",
          "_numberOfBlocks": ": the num of blocks for the period of distribution.",
          "_rewardStartBlock": ": only for the first distribution, start block of rewards."
        }
      },
      "balanceOf(address)": {
        "details": "View function to see total staked value on frontend.",
        "params": {
          "_user": ": user address."
        },
        "returns": {
          "_0": "Total staked for a given user."
        }
      },
      "constructor": {
        "details": "BALLE Rewards staking pool.",
        "params": {
          "_rewardDistribution": ": reward distribution contract address.",
          "_rewardToken": ": reward token address.",
          "_stakedToken": ": staked token address."
        }
      },
      "emergencyWithdraw()": {
        "details": "Withdraw all staked tokens without caring about rewards. EMERGENCY ONLY."
      },
      "finish()": {
        "details": "Finish pool."
      },
      "inCaseTokensGetStuck(address,uint256,address)": {
        "details": "Function to use from Governance Gnosis Safe multisig only in case tokens get stuck. This is to be used if someone, for example, sends tokens to the contract by mistake. There is no guarantee governance will vote to return these."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(address)": {
        "details": "View function to see pending reward on frontend.",
        "params": {
          "_user": ": user address."
        },
        "returns": {
          "_0": "Pending reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardDistribution(address)": {
        "details": "Function to change the rewardDistribution address."
      },
      "setRewarder(address)": {
        "details": "Function to change the rewarder address."
      },
      "setSecurity(address)": {
        "details": "Function to change the Security Gnosis Safe multisig."
      },
      "stake(uint256)": {
        "details": "Stake tokens to the pool and collect reward tokens (if any).",
        "params": {
          "_amount": ": amount to stake (in stakedToken)."
        }
      },
      "stakeAll()": {
        "details": "Stake all stakedToken balance on user wallet to the pool and collect reward tokens (if any)."
      },
      "stopRewards()": {
        "details": "Stop rewards."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "Withdraw staked tokens and collect reward tokens (if any).",
        "params": {
          "_amount": ": amount to withdraw (in stakedToken)."
        }
      },
      "withdrawAll()": {
        "details": "Withdraw all user's staked tokens and collect reward (if any)."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4690,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "rewarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4692,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4694,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "security",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4696,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "accTokenPerShare",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4698,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "rewardStartBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4700,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "rewardEndBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4702,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4704,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4706,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "extraRewardMultiplier",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4708,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4713,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "userInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(UserInfo)4684_storage)"
      },
      {
        "astId": 4715,
        "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
        "label": "finished",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)4684_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BalleStakingPoolV1.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4684_storage"
      },
      "t_struct(UserInfo)4684_storage": {
        "encoding": "inplace",
        "label": "struct BalleStakingPoolV1.UserInfo",
        "members": [
          {
            "astId": 4681,
            "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4683,
            "contract": "contracts/staking/BalleStakingPoolV1.sol:BalleStakingPoolV1",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}